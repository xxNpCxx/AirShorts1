/**
 * –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ HeyGen API –∫–ª—é—á–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ endpoints
 */

const { default: fetch } = require('node-fetch');

const API_KEY = process.env.HEYGEN_API_KEY || 'MTdhNzdmMDU5YWMzNDU1N2JjZjA3YjVlNDgyYjAxNTItMTc1NjA3OTE2OQ==';
const BASE_URL = 'https://api.heygen.com';

// –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ endpoints –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const WORKING_ENDPOINTS = [
  {
    name: 'Avatar List',
    endpoint: '/v1/avatar.list',
    method: 'GET',
    description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤'
  },
  {
    name: 'Video Status',
    endpoint: '/v1/video_status.get',
    method: 'GET',
    description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç video_id)',
    params: { video_id: 'test_video_id' }
  },
  {
    name: 'Avatar IV Generate',
    endpoint: '/v2/video/av4/generate',
    method: 'POST',
    description: '–°–æ–∑–¥–∞—Ç—å Avatar IV –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç payload)',
    needsPayload: true
  },
  {
    name: 'Standard Video Generate',
    endpoint: '/v2/video/generate',
    method: 'POST',
    description: '–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç payload)',
    needsPayload: true
  }
];

async function testEndpoint(endpointInfo) {
  try {
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpointInfo.name}`);
    console.log(`üì° ${endpointInfo.method} ${endpointInfo.endpoint}`);
    console.log(`üìù ${endpointInfo.description}`);
    
    let url = `${BASE_URL}${endpointInfo.endpoint}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if (endpointInfo.params) {
      const searchParams = new URLSearchParams(endpointInfo.params);
      url += `?${searchParams.toString()}`;
    }
    
    const options = {
      method: endpointInfo.method,
      headers: {
        'X-API-KEY': API_KEY,
        'Content-Type': 'application/json'
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º payload –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
    if (endpointInfo.needsPayload) {
      options.body = JSON.stringify({
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        video_title: 'API Key Test',
        script: 'Test script',
        voice_id: '119caed25533477ba63822d5d1552d25'
      });
    }
    
    const response = await fetch(url, options);
    
    console.log(`üì• –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log(`‚úÖ –£–°–ü–ï–•! API Key —Ä–∞–±–æ—á–∏–π!`);
      console.log(`üìã –û—Ç–≤–µ—Ç:`, JSON.stringify(result, null, 2));
      return { success: true, data: result };
    } else {
      const errorText = await response.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 300)}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (response.status === 401) {
        console.log(`üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - API Key –Ω–µ–≤–µ—Ä–Ω—ã–π`);
      } else if (response.status === 403) {
        console.log(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - API Key –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π`);
      } else if (response.status === 404) {
        console.log(`üîç Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è`);
      } else if (response.status === 400) {
        console.log(`üìù –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–æ API Key —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      }
      
      return { success: false, error: errorText, status: response.status };
    }
  } catch (error) {
    console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function main() {
  console.log('üîë –¢–ï–°–¢ HEYGEN API KEY');
  console.log('======================');
  console.log(`API Key: ${API_KEY.substring(0, 20)}...`);
  console.log(`Base URL: ${BASE_URL}`);
  console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º ${WORKING_ENDPOINTS.length} —Ä–∞–±–æ—á–∏—Ö endpoints...`);
  
  const results = [];
  
  for (const endpointInfo of WORKING_ENDPOINTS) {
    const result = await testEndpoint(endpointInfo);
    results.push({ ...result, endpoint: endpointInfo.name });
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log('======================');
  
  const successfulTests = results.filter(r => r.success);
  const failedTests = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successfulTests.length}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${failedTests.length}`);
  
  if (successfulTests.length > 0) {
    console.log('\nüéâ API KEY –†–ê–ë–û–ß–ò–ô!');
    console.log('–†–∞–±–æ—á–∏–µ endpoints:');
    successfulTests.forEach(result => {
      console.log(`- ${result.endpoint}`);
    });
  } else {
    console.log('\nüòû API KEY –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- API Key –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫');
    console.log('- API Key –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    console.log('- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  require('fs').writeFileSync('heygen-api-key-test-results.json', JSON.stringify(results, null, 2));
  console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ heygen-api-key-test-results.json');
}

main().catch(console.error);
