#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –æ—Ç AKOOL
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
 */

const crypto = require('crypto');

// –î–∞–Ω–Ω—ã–µ –∏–∑ –±–æ–ª–µ–µ —Å–≤–µ–∂–∏—Ö –ª–æ–≥–æ–≤ (—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏)
const testData = {
  signature: "9a0403251957a130fad76ea64236e02c3c521e70",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7ow8MGfv8ow1idyPVOpDA0ncWuZmgMLazug/Vm1yEHrDhdr77Sz4hk9O0Oezc5VHKB6/Me5xwehJZjyVSCKTe/+2lqV7ezzDhi6LmMy7sCkVwt4rOFvq8Yafi64CnCcZLzpA==",
  timestamp: 1757785623798,
  nonce: "9047"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
const clientId = process.env.AKOOL_CLIENT_ID || "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = process.env.AKOOL_CLIENT_SECRET || "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤");
console.log("==============================================");
console.log();

console.log("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤:");
console.log(`  Signature: ${testData.signature}`);
console.log(`  Data Encrypt: ${testData.dataEncrypt}`);
console.log(`  Timestamp: ${testData.timestamp}`);
console.log(`  Nonce: ${testData.nonce}`);
console.log();

console.log("üîë –ö–ª—é—á–∏ –∏–∑ –ª–æ–≥–æ–≤:");
console.log(`  Client ID: ${clientId} (${clientId.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log(`  Client Secret: ${clientSecret} (${clientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  return calculatedSignature === signature;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
function decryptAES(dataEncrypt, clientId, clientSecret) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV
    let key = Buffer.from(clientSecret, 'utf8');
    let iv = Buffer.from(clientId, 'utf8');
    
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if (key.length > 24) {
      key = key.slice(0, 24);
      console.log(`  –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    }
    
    if (iv.length > 16) {
      iv = iv.slice(0, 16);
      console.log(`  –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    }
    
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true);
    
    let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testDecryption() {
  try {
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const isSignatureValid = verifySignature(
      clientId,
      testData.timestamp,
      testData.nonce,
      testData.dataEncrypt,
      testData.signature
    );
    
    console.log(`–ü–æ–¥–ø–∏—Å—å: ${isSignatureValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (!isSignatureValid) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===");
    
    try {
      const decryptedData = decryptAES(testData.dataEncrypt, clientId, clientSecret);
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${decryptError.message}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      console.log();
      console.log("=== –®–ê–ì 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ===");
      
      // –í–∞—Ä–∏–∞–Ω—Ç 1: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
      try {
        console.log("–í–∞—Ä–∏–∞–Ω—Ç 1: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π");
        const decodedClientId = Buffer.from(clientId, 'base64').toString('utf8');
        const decodedClientSecret = Buffer.from(clientSecret, 'base64').toString('utf8');
        
        console.log(`  –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ClientId: ${decodedClientId} (${decodedClientId.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        console.log(`  –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ClientSecret: ${decodedClientSecret} (${decodedClientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        
        const decryptedData = decryptAES(testData.dataEncrypt, decodedClientId, decodedClientSecret);
        console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
        console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
        
        try {
          const jsonData = JSON.parse(decryptedData);
          console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
          console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        } catch (jsonError) {
          console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        }
        
      } catch (altError) {
        console.log(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è: ${altError.message}`);
      }
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDecryption();
