"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var HeyGenService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeyGenService = exports.validateAvatarIVPayload = exports.validateStandardVideoPayload = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const axios_1 = __importDefault(require("axios"));
/**
 * Validates Standard Video API payload against API specification
 * @param payload - Object to validate
 * @returns true if valid, false otherwise
 */
function validateStandardVideoPayload(payload) {
    return (Array.isArray(payload.video_inputs) &&
        payload.video_inputs.length > 0 &&
        payload.dimension &&
        typeof payload.dimension.width === 'number' &&
        typeof payload.dimension.height === 'number' &&
        payload.video_inputs.every((input) => input.character &&
            ['avatar', 'talking_photo'].includes(input.character.type) &&
            input.voice &&
            ['text', 'audio'].includes(input.voice.type)));
}
exports.validateStandardVideoPayload = validateStandardVideoPayload;
/**
 * Validates Avatar IV payload against API specification
 * @param payload - Object to validate
 * @returns true if valid, false otherwise
 */
function validateAvatarIVPayload(payload) {
    return (typeof payload.image_key === 'string' &&
        typeof payload.video_title === 'string' &&
        typeof payload.script === 'string' &&
        typeof payload.voice_id === 'string' &&
        (!payload.video_orientation || ['portrait', 'landscape'].includes(payload.video_orientation)) &&
        (!payload.fit || ['cover', 'contain'].includes(payload.fit)));
}
exports.validateAvatarIVPayload = validateAvatarIVPayload;
/**
 * HeyGen API Configuration
 *
 * @version Avatar IV API v2 (current)
 * @baseUrl https://api.heygen.com
 * @uploadUrl https://upload.heygen.com
 * @endpoints
 *   - POST /v2/video/av4/generate (Avatar IV)
 *   - POST /v2/video/generate (Standard Avatar)
 *   - POST /v1/asset (Asset Upload)
 *   - GET /v1/avatar.list (List Avatars)
 *   - GET /v1/video_status.get (Video Status)
 * @lastUpdated 2025-09-06
 * @documentation https://docs.heygen.com/reference/create-avatar-iv-video
 */
const HEYGEN_API = {
    baseUrl: 'https://api.heygen.com',
    uploadUrl: 'https://upload.heygen.com',
    version: 'v2',
    endpoints: {
        avatarIV: '/v2/video/av4/generate',
        standardAvatar: '/v2/video/generate',
        uploadAsset: '/v1/asset',
        listAvatars: '/v1/avatar.list',
        videoStatus: '/v1/video_status.get',
    },
};
let HeyGenService = HeyGenService_1 = class HeyGenService {
    constructor(configService) {
        this.configService = configService;
        this.logger = new common_1.Logger(HeyGenService_1.name);
        this.baseUrl = HEYGEN_API.baseUrl;
        this.apiKey = this.configService.get('HEYGEN_API_KEY') || '';
        if (!this.apiKey) {
            this.logger.warn('HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
    }
    /**
     * Generate video using HeyGen API
     *
     * @see https://docs.heygen.com/reference/create-an-avatar-video-v2
     * @see https://docs.heygen.com/reference/create-avatar-iv-video
     * @endpoint POST /v2/video/generate (Standard Avatar API)
     * @endpoint POST /v2/video/av4/generate (Avatar IV API)
     * @param request - Video generation parameters
     * @returns Promise with video generation response
     * @throws Error if API validation fails or request is invalid
     */
    async generateVideo(request) {
        const requestId = `heygen_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        try {
            this.logger.log(`[${requestId}] üöÄ Starting video generation with HeyGen API`);
            this.logger.debug(`[${requestId}] Request params: platform=${request.platform}, quality=${request.quality}, duration=${request.duration}`);
            this.logger.debug(`[${requestId}] Audio provided: ${!!request.audioUrl}, Script length: ${request.script?.length || 0} chars`);
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ –∏–ª–∏ TTS
            const useCustomAudio = request.audioUrl &&
                request.audioUrl.trim() !== '' &&
                request.audioUrl !== 'undefined' &&
                request.audioUrl !== 'null' &&
                !request.audioUrl.includes('heygen_tts_required');
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            const availableAvatars = await this.getAvailableAvatars();
            const defaultAvatarId = availableAvatars[0] || '1bd001e7-c335-4a6a-9d1b-8f8b5b5b5b5b';
            // HeyGen API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            const payload = {
                video_inputs: [
                    {
                        character: {
                            type: 'avatar',
                            avatar_id: defaultAvatarId, // –†–∞–±–æ—á–∏–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                            avatar_style: 'normal',
                        },
                        voice: {
                            type: 'text',
                            input_text: request.script,
                            voice_id: '119caed25533477ba63822d5d1552d25', // –ì–æ–ª–æ—Å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                            speed: 1.0,
                        },
                    },
                ],
                dimension: {
                    width: 1280,
                    height: 720,
                },
            };
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞–µ–º TalkingPhoto –≤ Standard API
            if (request.imageUrl &&
                request.imageUrl.trim() !== '' &&
                request.imageUrl !== 'undefined' &&
                request.imageUrl !== 'null' &&
                request.imageUrl !== 'heygen_placeholder_image_url' &&
                request.imageUrl !== 'heygen_use_available_avatar') {
                this.logger.log(`[${requestId}] üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ –≤ Standard API: ${request.imageUrl}`);
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (request.imageUrl.includes('photo_avatar_')) {
                    // Photo Avatar - –∏—Å–ø–æ–ª—å–∑—É–µ–º TalkingPhoto
                    this.logger.log(`[${requestId}] üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º Photo Avatar –∫–∞–∫ TalkingPhoto`);
                    payload.video_inputs[0].character = {
                        type: 'talking_photo',
                        talking_photo_id: request.imageUrl,
                        talking_photo_style: 'square',
                        talking_style: 'expressive',
                        expression: 'default',
                        super_resolution: true,
                        scale: 1.0,
                    };
                }
                else {
                    // Asset –∏–ª–∏ image_key - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ Image Background
                    this.logger.log(`[${requestId}] üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Background`);
                    payload.video_inputs[0].background = {
                        type: 'image',
                        image_asset_id: request.imageUrl,
                        fit: 'cover',
                    };
                }
            }
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (useCustomAudio) {
                this.logger.log(`[${requestId}] üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ asset: ${request.audioUrl}`);
                payload.video_inputs[0].voice = {
                    type: 'audio',
                    audio_asset_id: request.audioUrl,
                };
            }
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
            if (!request.imageUrl ||
                request.imageUrl === 'heygen_use_available_avatar' ||
                request.imageUrl === 'heygen_placeholder_image_url') {
                this.logger.log(`[${requestId}] üì∏ Using available avatar: ${defaultAvatarId}`);
                // defaultAvatarId —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ payload –≤—ã—à–µ
            }
            // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞
            if (useCustomAudio) {
                this.logger.log(`[${requestId}] üéµ Using custom user audio from: ${request.audioUrl}`);
            }
            else {
                this.logger.log(`[${requestId}] üéµ Using TTS with script: ${request.script?.substring(0, 50)}...`);
            }
            // –í–∞–ª–∏–¥–∞—Ü–∏—è payload —Å–æ–≥–ª–∞—Å–Ω–æ API —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
            if (!validateStandardVideoPayload(payload)) {
                this.logger.error(`[${requestId}] ‚ùå Invalid Standard Video API parameters:`, payload);
                throw new Error('Invalid Standard Video API parameters');
            }
            this.logger.log(`[${requestId}] üì§ Standard Video payload (validated):`, payload);
            this.logger.log(`[${requestId}] üì§ Sending request to ${this.baseUrl}${HEYGEN_API.endpoints.standardAvatar}`);
            const response = await fetch(`${this.baseUrl}${HEYGEN_API.endpoints.standardAvatar}`, {
                method: 'POST',
                headers: {
                    'X-API-KEY': this.apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });
            this.logger.log(`[${requestId}] üì• HeyGen API response: ${response.status} ${response.statusText}`);
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`[${requestId}] ‚ùå HeyGen API Error:`, {
                    status: response.status,
                    statusText: response.statusText,
                    url: `${this.baseUrl}/v2/video/generate`,
                    method: 'POST',
                    errorBody: errorText,
                });
                throw new Error(`HeyGen API error: ${response.status} - ${errorText}`);
            }
            const result = (await response.json());
            this.logger.log(`[${requestId}] ‚úÖ Video generation started successfully with ID: ${result.data?.video_id}`);
            this.logger.log(`[${requestId}] Full HeyGen response:`, result);
            return {
                id: result.data?.video_id || '',
                status: 'created',
            };
        }
        catch (error) {
            this.logger.error(`[${requestId}] üí• Critical error in generateVideo:`, {
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                requestParams: {
                    platform: request.platform,
                    quality: request.quality,
                    duration: request.duration,
                    hasPhoto: !!request.photoUrl,
                    hasAudio: !!request.audioUrl,
                    scriptLength: request.script?.length || 0,
                },
            });
            throw error;
        }
    }
    async getVideoStatus(videoId) {
        try {
            this.logger.debug(`üîç Checking status for HeyGen video: ${videoId}`);
            const response = await fetch(`${this.baseUrl}/v1/video_status.get?video_id=${videoId}`, {
                headers: {
                    'X-API-KEY': this.apiKey,
                },
            });
            this.logger.debug(`üì• Status check response: ${response.status} ${response.statusText} for video ${videoId}`);
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`‚ùå Failed to get video status for ${videoId}:`, {
                    status: response.status,
                    statusText: response.statusText,
                    url: `${this.baseUrl}/v1/video_status.get?video_id=${videoId}`,
                    errorBody: errorText,
                });
                throw new Error(`Failed to get video status: ${response.status} - ${errorText}`);
            }
            const result = (await response.json());
            this.logger.debug(`üìä Video ${videoId} status: ${result.data?.status}`, {
                hasResultUrl: !!result.data?.video_url,
                hasError: !!result.data?.error,
                errorMessage: result.data?.error,
            });
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–æ–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if (result.data?.status === 'completed' && result.data?.video_url) {
                this.logger.log(`‚úÖ Video ${videoId} completed successfully with URL: ${result.data.video_url}`);
            }
            else if (result.data?.status === 'failed' || result.data?.error) {
                this.logger.error(`‚ùå Video ${videoId} failed:`, {
                    status: result.data?.status,
                    error: result.data?.error,
                    fullResponse: result,
                });
            }
            return {
                id: result.data?.id || videoId,
                status: result.data?.status || 'unknown',
                result_url: result.data?.video_url,
                error: result.data?.error,
            };
        }
        catch (error) {
            this.logger.error(`üí• Critical error getting video status for ${videoId}:`, {
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
            });
            throw error;
        }
    }
    /**
     * Upload audio to HeyGen Assets API for Standard Avatar API
     *
     * @see https://docs.heygen.com/reference/upload-asset
     * @endpoint POST /v1/upload
     * @param audioBuffer - Audio file buffer
     * @returns Promise with audio asset ID
     * @throws Error if upload fails
     */
    /**
     * Upload audio asset to HeyGen API using presigned upload URL
     *
     * @see https://docs.heygen.com/reference/upload-asset
     * @endpoint POST /v2/audio_assets (create resource) + PUT to presigned URL (upload file)
     * @param audioBuffer - Audio file buffer
     * @returns Promise with audio asset ID
     * @throws Error if upload fails
     */
    async uploadAudio(audioBuffer) {
        const uploadId = `heygen_audio_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`[${uploadId}] üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ –≤ HeyGen Assets (${audioBuffer.length} bytes)`);
            // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-—Ä–µ—Å—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ–º presigned upload URL
            this.logger.log(`[${uploadId}] üì§ Step 1: Creating audio resource...`);
            const createResponse = await fetch(`${this.baseUrl}/v2/audio_assets`, {
                method: 'POST',
                headers: {
                    'X-Api-Key': this.apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: `audio_${uploadId}`,
                    size: audioBuffer.length,
                    content_type: 'audio/mpeg',
                }),
            });
            this.logger.log(`[${uploadId}] üì• Create audio resource response: ${createResponse.status} ${createResponse.statusText}`);
            if (!createResponse.ok) {
                const errorText = await createResponse.text();
                this.logger.error(`[${uploadId}] ‚ùå Failed to create audio resource: ${createResponse.status} - ${errorText}`);
                throw new Error(`Failed to create audio resource: ${createResponse.status} - ${errorText}`);
            }
            const createResult = (await createResponse.json());
            this.logger.log(`[${uploadId}] üìã Create audio resource response:`, createResult);
            const audioAssetId = createResult.data?.id || createResult.id;
            const uploadUrl = createResult.data?.upload_url || createResult.upload_url;
            if (!audioAssetId) {
                this.logger.error(`[${uploadId}] ‚ùå No audio asset ID in response:`, createResult);
                throw new Error('No audio asset ID returned from HeyGen Create Audio Resource API');
            }
            if (!uploadUrl) {
                this.logger.error(`[${uploadId}] ‚ùå No upload URL in response:`, createResult);
                throw new Error('No upload URL returned from HeyGen Create Audio Resource API');
            }
            this.logger.log(`[${uploadId}] ‚úÖ Audio resource created: ${audioAssetId}`);
            this.logger.log(`[${uploadId}] üì§ Step 2: Uploading file to presigned URL...`);
            // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ presigned URL
            const uploadResponse = await fetch(uploadUrl, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'audio/mpeg',
                    'Content-Length': audioBuffer.length.toString(),
                },
                body: audioBuffer,
            });
            this.logger.log(`[${uploadId}] üì• Upload file response: ${uploadResponse.status} ${uploadResponse.statusText}`);
            if (!uploadResponse.ok) {
                const errorText = await uploadResponse.text();
                this.logger.error(`[${uploadId}] ‚ùå Audio file upload failed: ${uploadResponse.status} - ${errorText}`);
                throw new Error(`Audio file upload failed: ${uploadResponse.status} - ${errorText}`);
            }
            this.logger.log(`[${uploadId}] ‚úÖ Audio uploaded successfully: ${audioAssetId}`);
            return audioAssetId;
        }
        catch (error) {
            this.logger.error(`[${uploadId}] ‚ùå Error uploading audio:`, error);
            throw error;
        }
    }
    /**
     * Upload image asset to HeyGen API for Avatar IV
     *
     * @see https://docs.heygen.com/reference/upload-asset
     * @endpoint POST https://upload.heygen.com/v1/asset
     * @param imageBuffer - Image file buffer
     * @returns Promise with image_key for Avatar IV or asset_id for Standard API
     */
    async uploadImage(imageBuffer) {
        const uploadId = `heygen_image_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`[${uploadId}] üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ –≤ HeyGen Assets (${imageBuffer.length} bytes)`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FormData –¥–ª—è Node.js
            const FormData = require('form-data');
            const formData = new FormData();
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ HeyGen API
            formData.append('type', 'image');
            formData.append('asset', imageBuffer, {
                filename: 'user_photo.jpg',
                contentType: 'image/jpeg',
                knownLength: imageBuffer.length,
            });
            this.logger.debug(`[${uploadId}] üì§ FormData prepared with ${imageBuffer.length} bytes`);
            const response = await fetch('https://upload.heygen.com/v1/asset', {
                method: 'POST',
                headers: {
                    'X-Api-Key': this.apiKey,
                    ...formData.getHeaders(),
                },
                body: formData,
            });
            this.logger.log(`[${uploadId}] üì• Upload Asset response: ${response.status} ${response.statusText}`);
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`[${uploadId}] ‚ùå Image upload failed: ${response.status} ${response.statusText}`);
                this.logger.error(`[${uploadId}] Error details: ${errorText}`);
                throw new Error(`Image upload failed: ${response.status} - ${errorText}`);
            }
            const result = (await response.json());
            this.logger.log(`[${uploadId}] üìã Upload Asset response data:`, result);
            // –ò—â–µ–º image_key –¥–ª—è Avatar IV –∏–ª–∏ asset_id –¥–ª—è Standard API
            const imageKey = result.data?.image_key || result.image_key;
            const assetId = result.data?.asset_id || result.asset_id;
            if (imageKey) {
                this.logger.log(`[${uploadId}] ‚úÖ Image Key –¥–ª—è Avatar IV: ${imageKey}`);
                return imageKey;
            }
            else if (assetId) {
                this.logger.log(`[${uploadId}] ‚úÖ Asset ID –¥–ª—è Standard API: ${assetId}`);
                return assetId;
            }
            else {
                this.logger.error(`[${uploadId}] ‚ùå No image_key or asset_id in response:`, result);
                throw new Error('No image_key or asset_id returned from HeyGen Upload Asset API');
            }
        }
        catch (error) {
            this.logger.error(`[${uploadId}] ‚ùå Error uploading image:`, error);
            throw error;
        }
    }
    async uploadImageFallback(imageBuffer, uploadId) {
        try {
            this.logger.log(`[${uploadId}] üîÑ Fallback: trying direct image upload...`);
            const formData = new FormData();
            formData.append('image', new Blob([new Uint8Array(imageBuffer)]), 'user_photo.jpg');
            const response = await fetch(`${this.baseUrl}/v2/image/upload`, {
                method: 'POST',
                headers: {
                    'X-API-KEY': this.apiKey,
                },
                body: formData,
            });
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`[${uploadId}] ‚ùå Fallback image upload failed: ${response.status} ${response.statusText}`);
                this.logger.error(`[${uploadId}] Error details: ${errorText}`);
                this.logger.warn(`[${uploadId}] ‚ö†Ô∏è Will use default avatar instead of custom photo`);
                return 'heygen_placeholder_image_url';
            }
            const result = (await response.json());
            const imageUrl = result.data?.image_url || result.image_url || result.url;
            this.logger.log(`[${uploadId}] ‚úÖ Fallback image upload successful: ${imageUrl}`);
            return imageUrl;
        }
        catch (error) {
            this.logger.error(`[${uploadId}] ‚ùå Fallback image upload error:`, error);
            this.logger.warn(`[${uploadId}] ‚ö†Ô∏è Will use default avatar instead of custom photo`);
            return 'heygen_placeholder_image_url';
        }
    }
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è fallback
    async getAvailableAvatars() {
        try {
            const response = await fetch(`${this.baseUrl}/v1/avatar.list`, {
                headers: {
                    'X-API-KEY': this.apiKey,
                },
            });
            if (!response.ok) {
                this.logger.warn('Failed to get available avatars, using hardcoded fallback');
                return this.getHardcodedAvatars();
            }
            const result = (await response.json());
            const avatars = result.data?.avatars || [];
            const avatarIds = avatars.map((avatar) => avatar.avatar_id).filter(Boolean);
            if (avatarIds.length === 0) {
                this.logger.warn('No avatars found, using hardcoded fallback');
                return this.getHardcodedAvatars();
            }
            this.logger.log(`Found ${avatarIds.length} available avatars: ${avatarIds.slice(0, 3).join(', ')}...`);
            return avatarIds;
        }
        catch (error) {
            this.logger.error('Error getting available avatars:', error);
            return this.getHardcodedAvatars();
        }
    }
    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å HeyGen API
    getHardcodedAvatars() {
        return [
            'Abigail_expressive_2024112501',
            'Abigail_standing_office_front',
            'Abigail_sitting_sofa_front',
            '1bd001e7-c335-4a6a-9d1b-8f8b5b5b5b5b', // Fallback ID
            'Abigail_standing_office_front_2024112501',
        ];
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç Photo Avatar –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Avatar IV API —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     *
     * @see https://docs.heygen.com/reference/create-avatar-iv-video
     * @endpoint POST /v2/video/av4/generate
     * @param photoUrl - URL —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param callbackId - ID –¥–ª—è webhook callback
     * @returns Promise —Å avatar_id (–≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
     * @throws Error –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
     */
    async createPhotoAvatar(photoUrl, callbackId) {
        const requestId = `photo_avatar_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`üì∏ [HEYGEN_PHOTO_AVATAR] Starting Photo Avatar creation via Avatar IV API`, {
                requestId,
                callbackId,
                photoUrl: `${photoUrl.substring(0, 100)}...`,
                webhookUrl: `${process.env.WEBHOOK_URL}/heygen/webhook`,
                timestamp: new Date().toISOString(),
            });
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ asset
            const uploadResponse = await this.uploadAsset(photoUrl, 'image');
            this.logger.log(`üì§ [HEYGEN_PHOTO_AVATAR] Image uploaded successfully`, {
                requestId,
                callbackId,
                assetKey: uploadResponse.asset_key,
                timestamp: new Date().toISOString(),
            });
            // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º asset_key –∫–∞–∫ avatar_id
            // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API
            this.logger.log(`‚úÖ [HEYGEN_PHOTO_AVATAR] Asset uploaded, using as avatar_id`, {
                requestId,
                callbackId,
                assetKey: uploadResponse.asset_key,
                timestamp: new Date().toISOString(),
            });
            return uploadResponse.asset_key;
        }
        catch (error) {
            this.logger.error(`‚ùå [HEYGEN_PHOTO_AVATAR] Error creating Photo Avatar`, {
                requestId,
                callbackId,
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                photoUrl: `${photoUrl.substring(0, 100)}...`,
                timestamp: new Date().toISOString(),
            });
            throw error;
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç Photo Avatar –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ asset
     *
     * @param assetKey - –ö–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ asset
     * @param callbackId - ID –¥–ª—è webhook callback
     * @returns Promise —Å avatar_id
     */
    async createPhotoAvatarFromAsset(assetKey, callbackId) {
        const requestId = `avatar_create_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`üé≠ [HEYGEN_AVATAR_CREATE] Creating Photo Avatar from asset`, {
                requestId,
                callbackId,
                assetKey,
                timestamp: new Date().toISOString(),
            });
            // –°–æ–∑–¥–∞–µ–º Photo Avatar –∏—Å–ø–æ–ª—å–∑—É—è Avatar IV API
            const response = await axios_1.default.post(`${HEYGEN_API.baseUrl}/v2/video/av4/generate`, {
                video_input: {
                    character: {
                        type: 'photo_avatar',
                        photo_avatar_id: assetKey,
                    },
                    voice: {
                        type: 'text',
                        input_text: 'Hello, this is a test video.',
                        voice_id: '1bd001e7e50f421d891986aad5158bc3',
                    },
                    background: {
                        type: 'color',
                        value: '#FFFFFF',
                    },
                },
                dimension: {
                    width: 720,
                    height: 1280,
                },
                aspect_ratio: '9:16',
                quality: 'medium',
                callback_url: `${process.env.WEBHOOK_URL}/heygen/webhook`,
                callback_id: callbackId,
            }, {
                headers: {
                    'X-Api-Key': this.apiKey,
                    'Content-Type': 'application/json',
                },
                timeout: 30000,
            });
            this.logger.log(`‚úÖ [HEYGEN_AVATAR_CREATE] Photo Avatar creation initiated`, {
                requestId,
                callbackId,
                assetKey,
                responseData: response.data,
                timestamp: new Date().toISOString(),
            });
            return {
                avatar_id: response.data.data?.video_id || response.data.video_id || assetKey,
            };
        }
        catch (error) {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if (error.response) {
                this.logger.error(`‚ùå [HEYGEN_AVATAR_CREATE] HeyGen API Error`, {
                    requestId,
                    callbackId,
                    assetKey,
                    status: error.response.status,
                    statusText: error.response.statusText,
                    errorData: error.response.data,
                    timestamp: new Date().toISOString(),
                });
            }
            else {
                this.logger.error(`‚ùå [HEYGEN_AVATAR_CREATE] Network Error`, {
                    requestId,
                    callbackId,
                    assetKey,
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined,
                    timestamp: new Date().toISOString(),
                });
            }
            throw error;
        }
    }
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ asset –≤ HeyGen
     *
     * @see https://docs.heygen.com/reference/upload-asset
     * @endpoint POST /v1/asset
     * @param fileUrl - URL —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param fileType - –¢–∏–ø —Ñ–∞–π–ª–∞ ('image' –∏–ª–∏ 'audio')
     * @returns Promise —Å asset_key
     * @throws Error –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
     */
    async uploadAsset(fileUrl, fileType) {
        const requestId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`üì§ [HEYGEN_UPLOAD] Starting asset upload`, {
                requestId,
                fileUrl: `${fileUrl.substring(0, 100)}...`,
                fileType,
                endpoint: `${HEYGEN_API.uploadUrl}/v1/asset`,
                timestamp: new Date().toISOString(),
            });
            // –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
            const fileResponse = await fetch(fileUrl);
            if (!fileResponse.ok) {
                throw new Error(`Failed to download file: ${fileResponse.status} ${fileResponse.statusText}`);
            }
            const fileBuffer = await fileResponse.arrayBuffer();
            const buffer = Buffer.from(fileBuffer);
            this.logger.log(`üì• [HEYGEN_UPLOAD] File downloaded successfully`, {
                requestId,
                fileSize: buffer.length,
                fileType,
                timestamp: new Date().toISOString(),
            });
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type –¥–ª—è —Ñ–∞–π–ª–∞
            const contentType = fileType === 'image' ? 'image/jpeg' : 'audio/wav';
            this.logger.log(`üì§ [HEYGEN_UPLOAD] Preparing binary data for HeyGen API`, {
                requestId,
                fileSize: buffer.length,
                contentType,
                timestamp: new Date().toISOString(),
            });
            let response;
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º data-binary –ø–æ–¥—Ö–æ–¥ –≤–º–µ—Å—Ç–æ multipart/form-data
                const uploadUrl = `${HEYGEN_API.uploadUrl}/v1/asset?type=${fileType}`;
                response = await axios_1.default.post(uploadUrl, buffer, {
                    headers: {
                        'X-Api-Key': this.apiKey,
                        'Content-Type': contentType,
                    },
                    maxBodyLength: Infinity,
                    maxContentLength: Infinity,
                    timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                });
                this.logger.log(`üì• [HEYGEN_UPLOAD] Received response from HeyGen API`, {
                    requestId,
                    status: response.status,
                    statusText: response.statusText,
                    timestamp: new Date().toISOString(),
                });
                const data = response.data;
                this.logger.log(`‚úÖ [HEYGEN_UPLOAD] Asset uploaded successfully`, {
                    requestId,
                    responseData: data,
                    timestamp: new Date().toISOString(),
                });
                // –ò–∑–≤–ª–µ–∫–∞–µ–º asset_key –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                const assetKey = data.data?.image_key || data.data?.asset_key || data.image_key || data.asset_key;
                if (!assetKey) {
                    this.logger.error(`‚ùå [HEYGEN_UPLOAD] No asset_key found in response`, {
                        requestId,
                        responseData: data,
                        timestamp: new Date().toISOString(),
                    });
                    throw new Error('No asset_key in response');
                }
                this.logger.log(`‚úÖ [HEYGEN_UPLOAD] Asset key extracted: ${assetKey}`, {
                    requestId,
                    assetKey,
                    timestamp: new Date().toISOString(),
                });
                return { asset_key: assetKey };
            }
            catch (axiosError) {
                if (axiosError.response) {
                    // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
                    const errorBody = axiosError.response.data;
                    this.logger.error(`‚ùå [HEYGEN_UPLOAD] Upload failed`, {
                        requestId,
                        status: axiosError.response.status,
                        statusText: axiosError.response.statusText,
                        errorBody,
                        timestamp: new Date().toISOString(),
                    });
                    throw new Error(`Asset upload failed: ${axiosError.response.status} - ${JSON.stringify(errorBody)}`);
                }
                else {
                    // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    this.logger.error(`‚ùå [HEYGEN_UPLOAD] Network error`, {
                        requestId,
                        error: axiosError.message,
                        timestamp: new Date().toISOString(),
                    });
                    throw new Error(`Asset upload network error: ${axiosError.message}`);
                }
            }
        }
        catch (error) {
            this.logger.error(`‚ùå [HEYGEN_UPLOAD] Error uploading asset`, {
                requestId,
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                fileUrl: `${fileUrl.substring(0, 100)}...`,
                fileType,
                timestamp: new Date().toISOString(),
            });
            throw error;
        }
    }
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     *
     * @param audioUrl - URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
     * @param fileId - ID —Ñ–∞–π–ª–∞ –≤ Telegram
     * @returns Promise —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º URL
     * @throws Error –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async validateAndPrepareAudioFile(audioUrl, fileId) {
        const requestId = `audio_validate_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`[${requestId}] üéµ Validating audio file`, {
                requestId,
                audioUrl: `${audioUrl.substring(0, 100)}...`,
                fileId,
                timestamp: new Date().toISOString(),
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            const headResponse = await fetch(audioUrl, { method: 'HEAD' });
            if (!headResponse.ok) {
                throw new Error(`Audio file not accessible: ${headResponse.status} ${headResponse.statusText}`);
            }
            const contentLength = headResponse.headers.get('content-length');
            const contentType = headResponse.headers.get('content-type');
            const fileSize = contentLength ? parseInt(contentLength, 10) : 0;
            this.logger.log(`[${requestId}] üìä Audio file info`, {
                requestId,
                fileSize,
                contentType,
                contentLength,
                timestamp: new Date().toISOString(),
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 25MB –¥–ª—è HeyGen)
            const maxSize = 25 * 1024 * 1024; // 25MB
            if (fileSize > maxSize) {
                throw new Error(`Audio file too large: ${fileSize} bytes (max: ${maxSize} bytes)`);
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–∏–Ω–∏–º—É–º 1MB –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
            const minSize = 1024 * 1024; // 1MB
            if (fileSize < minSize) {
                this.logger.warn(`[${requestId}] ‚ö†Ô∏è Audio file may be too small for quality cloning`, {
                    requestId,
                    fileSize,
                    minSize,
                    timestamp: new Date().toISOString(),
                });
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            const supportedTypes = ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/oga'];
            if (contentType && !supportedTypes.some(type => contentType.includes(type))) {
                this.logger.warn(`[${requestId}] ‚ö†Ô∏è Unsupported audio format: ${contentType}`, {
                    requestId,
                    contentType,
                    supportedTypes,
                    timestamp: new Date().toISOString(),
                });
            }
            this.logger.log(`[${requestId}] ‚úÖ Audio file validation passed`, {
                requestId,
                fileSize,
                contentType,
                timestamp: new Date().toISOString(),
            });
            return audioUrl;
        }
        catch (error) {
            this.logger.error(`[${requestId}] ‚ùå Audio file validation failed`, {
                requestId,
                audioUrl: `${audioUrl.substring(0, 100)}...`,
                fileId,
                error: error instanceof Error ? error.message : String(error),
                timestamp: new Date().toISOString(),
            });
            throw error;
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–æ–Ω –≥–æ–ª–æ—Å–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—É–¥–∏–æ
     *
     * @see https://docs.heygen.com/reference/create-voice-cloning
     * @endpoint POST /v1/voice_cloning/create
     * @param audioUrl - URL –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param callbackId - ID –¥–ª—è webhook callback
     * @returns Promise —Å voice_id
     * @throws Error –µ—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
     */
    async createVoiceClone(audioUrl, callbackId, fileId) {
        const requestId = `voice_clone_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 30000); // 30s timeout
        try {
            this.logger.log(`[${requestId}] üéµ Creating Voice Clone from: ${audioUrl}`, {
                requestId,
                audioUrl: `${audioUrl.substring(0, 100)}...`,
                callbackId,
                fileId,
                timestamp: new Date().toISOString(),
            });
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!audioUrl || audioUrl.trim() === '') {
                throw new Error('Audio URL is required');
            }
            if (!callbackId || callbackId.trim() === '') {
                throw new Error('Callback ID is required');
            }
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            const validatedAudioUrl = await this.validateAndPrepareAudioFile(audioUrl, fileId || 'unknown');
            const payload = {
                name: `voice_${callbackId}`,
                audio_url: validatedAudioUrl,
                callback_url: `${process.env.WEBHOOK_URL}/heygen/webhook`,
                callback_id: callbackId,
            };
            this.logger.debug(`[${requestId}] üì§ Voice Cloning payload:`, {
                requestId,
                payload: {
                    ...payload,
                    audio_url: `${payload.audio_url.substring(0, 100)}...`,
                },
                timestamp: new Date().toISOString(),
            });
            this.logger.log(`[${requestId}] üì§ Sending request to HeyGen API`, {
                requestId,
                endpoint: `${this.baseUrl}/v1/voice_cloning/create`,
                method: 'POST',
                timestamp: new Date().toISOString(),
            });
            const response = await fetch(`${this.baseUrl}/v1/voice_cloning/create`, {
                method: 'POST',
                headers: {
                    'X-API-KEY': this.apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
                signal: controller.signal,
            });
            clearTimeout(timeout);
            this.logger.log(`[${requestId}] üì• Voice Cloning response received`, {
                requestId,
                status: response.status,
                statusText: response.statusText,
                headers: Object.fromEntries(response.headers.entries()),
                timestamp: new Date().toISOString(),
            });
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`[${requestId}] ‚ùå Voice Cloning failed`, {
                    requestId,
                    status: response.status,
                    statusText: response.statusText,
                    errorText,
                    audioUrl: `${audioUrl.substring(0, 100)}...`,
                    callbackId,
                    timestamp: new Date().toISOString(),
                });
                throw new Error(`Voice Cloning failed: ${response.status} - ${errorText}`);
            }
            const result = (await response.json());
            this.logger.debug(`[${requestId}] üìã Voice Cloning response data:`, {
                requestId,
                responseData: result,
                timestamp: new Date().toISOString(),
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            const voiceId = result.data?.voice_id || result.voice_id || result.data?.id || result.id;
            if (!voiceId) {
                this.logger.error(`[${requestId}] ‚ùå No voice_id found in response`, {
                    requestId,
                    responseData: result,
                    possibleFields: ['data.voice_id', 'voice_id', 'data.id', 'id'],
                    timestamp: new Date().toISOString(),
                });
                throw new Error('No voice_id returned from Voice Cloning API');
            }
            this.logger.log(`[${requestId}] ‚úÖ Voice Clone created successfully`, {
                requestId,
                voiceId,
                audioUrl: `${audioUrl.substring(0, 100)}...`,
                callbackId,
                timestamp: new Date().toISOString(),
            });
            return voiceId;
        }
        catch (error) {
            clearTimeout(timeout);
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if (error.name === 'AbortError') {
                this.logger.error(`[${requestId}] ‚è∞ Voice Cloning timeout after 30 seconds`, {
                    requestId,
                    audioUrl: `${audioUrl.substring(0, 100)}...`,
                    callbackId,
                    timestamp: new Date().toISOString(),
                });
                throw new Error('Voice Cloning request timed out after 30 seconds');
            }
            if (error instanceof TypeError && error.message.includes('fetch')) {
                this.logger.error(`[${requestId}] üåê Network error during Voice Cloning`, {
                    requestId,
                    error: error.message,
                    audioUrl: `${audioUrl.substring(0, 100)}...`,
                    callbackId,
                    timestamp: new Date().toISOString(),
                });
                throw new Error(`Network error during Voice Cloning: ${error.message}`);
            }
            this.logger.error(`[${requestId}] ‚ùå Error creating Voice Clone`, {
                requestId,
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                audioUrl: `${audioUrl.substring(0, 100)}...`,
                callbackId,
                timestamp: new Date().toISOString(),
            });
            throw error;
        }
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É—è Standard Avatar API
     * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∏–∑ ElevenLabs
     *
     * @see https://docs.heygen.com/reference/create-an-avatar-video-v2
     * @endpoint POST /v2/video/generate
     * @param avatarId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Photo Avatar (image_key)
     * @param voiceId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Voice Clone –∏–∑ ElevenLabs
     * @param script - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
     * @param videoTitle - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
     * @param callbackId - ID –¥–ª—è webhook callback
     * @param elevenlabsService - ElevenLabsService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     * @returns Promise —Å video_id
     * @throws Error –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ElevenLabs —Å–µ—Ä–≤–∏—Å
     */
    async generateDigitalTwinVideo(avatarId, voiceId, script, videoTitle, callbackId, elevenlabsService // ElevenLabsService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ) {
        const requestId = `digital_twin_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
        try {
            this.logger.log(`[${requestId}] üé¨ Generating Digital Twin Video with ElevenLabs voice`);
            this.logger.log(`[${requestId}] Avatar ID: ${avatarId}, ElevenLabs Voice ID: ${voiceId}`);
            this.logger.log(`[${requestId}] Script length: ${script.length} chars`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (!elevenlabsService) {
                throw new Error('ElevenLabs service is required for voice cloning');
            }
            if (!voiceId) {
                throw new Error('Voice ID is required for voice cloning');
            }
            this.logger.log(`[${requestId}] üéµ Generating audio with ElevenLabs cloned voice: ${voiceId}`);
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ ElevenLabs
            const audioBuffer = await elevenlabsService.textToSpeech({
                text: script,
                voice_id: voiceId,
                model_id: 'eleven_multilingual_v2',
                voice_settings: {
                    stability: 0.5,
                    similarity_boost: 0.75,
                    style: 0.0,
                    use_speaker_boost: true,
                },
            });
            this.logger.log(`[${requestId}] ‚úÖ Audio generated: ${audioBuffer.length} bytes`);
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ HeyGen –∫–∞–∫ asset
            const audioAssetId = await this.uploadAudio(audioBuffer);
            this.logger.log(`[${requestId}] ‚úÖ Audio uploaded to HeyGen: ${audioAssetId}`);
            // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ avatarId (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "image/" –∏ —Å—É—Ñ—Ñ–∏–∫—Å "/original")
            const talkingPhotoId = avatarId.replace(/^image\//, '').replace(/\/original$/, '');
            this.logger.log(`[${requestId}] üîß Extracted talking_photo_id: ${talkingPhotoId} from avatarId: ${avatarId}`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è HeyGen v2 API
            const payload = {
                video_inputs: [
                    {
                        character: {
                            type: 'talking_photo',
                            talking_photo_id: talkingPhotoId, // UUID –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
                            scale: 1.0,
                            style: 'normal',
                        },
                        voice: {
                            type: 'audio',
                            audio_asset_id: audioAssetId,
                        },
                        background: {
                            type: 'color',
                            value: '#f6f6fc',
                        },
                    },
                ],
                dimension: {
                    width: 1280,
                    height: 720,
                },
            };
            // –õ–æ–≥–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.logger.debug(`[${requestId}] üì§ HeyGen v2 API payload:`, payload);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è TalkingPhoto
            const response = await fetch(`${this.baseUrl}/v2/video/generate`, {
                method: 'POST',
                headers: {
                    'X-API-KEY': this.apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });
            this.logger.log(`[${requestId}] üì• Standard Avatar response: ${response.status} ${response.statusText}`);
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`[${requestId}] ‚ùå Standard Avatar generation failed: ${response.status} - ${errorText}`);
                throw new Error(`Standard Avatar generation failed: ${response.status} - ${errorText}`);
            }
            const result = (await response.json());
            const videoId = result.data?.video_id || result.video_id;
            if (!videoId) {
                this.logger.error(`[${requestId}] ‚ùå No video_id in response:`, result);
                throw new Error('No video_id returned from Standard Avatar API');
            }
            this.logger.log(`[${requestId}] ‚úÖ Digital Twin Video generation started: ${videoId}`);
            return videoId;
        }
        catch (error) {
            this.logger.error(`[${requestId}] ‚ùå Error generating Digital Twin Video:`, error);
            throw error;
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è HeyGen API
     *
     * @see https://docs.heygen.com/reference/webhook-events
     * @endpoint POST /v1/webhook/endpoint.add
     */
    async setupWebhook() {
        const webhookUrl = `${process.env.WEBHOOK_URL}/heygen/webhook`;
        try {
            this.logger.log(`üîó Setting up HeyGen webhook: ${webhookUrl}`);
            const response = await fetch(`${this.baseUrl}/v1/webhook/endpoint.add`, {
                method: 'POST',
                headers: {
                    'X-API-KEY': this.apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: webhookUrl,
                    events: [
                        'photo_avatar.success',
                        'photo_avatar.failed',
                        'voice_clone.success',
                        'voice_clone.failed',
                        'video.success',
                        'video.failed',
                    ],
                }),
            });
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error(`‚ùå Failed to setup webhook: ${response.status} - ${errorText}`);
                throw new Error(`Webhook setup failed: ${response.status} - ${errorText}`);
            }
            const result = await response.json();
            this.logger.log(`‚úÖ HeyGen webhook setup successfully:`, result);
        }
        catch (error) {
            this.logger.error(`‚ùå Error setting up HeyGen webhook:`, error);
            throw error;
        }
    }
};
exports.HeyGenService = HeyGenService;
exports.HeyGenService = HeyGenService = HeyGenService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService])
], HeyGenService);
