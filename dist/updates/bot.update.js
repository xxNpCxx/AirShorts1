"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotUpdate = void 0;
const nestjs_telegraf_1 = require("nestjs-telegraf");
const users_service_1 = require("../users/users.service");
const menu_service_1 = require("../menu/menu.service");
const keyboards_service_1 = require("../keyboards/keyboards.service");
const logger_service_1 = require("../logger/logger.service");
const process_manager_service_1 = require("../heygen/process-manager.service");
const telegraf_1 = require("telegraf");
let BotUpdate = class BotUpdate {
    constructor(_users, _menu, _kb, _logger, _processManager) {
        this._users = _users;
        this._menu = _menu;
        this._kb = _kb;
        this._logger = _logger;
        this._processManager = _processManager;
        this._logger.debug('BotUpdate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'BotUpdate');
        this._logger.log('üöÄ BotUpdate —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'BotUpdate');
    }
    async onStart(ctx) {
        this._logger.log(`üöÄ [@Start] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
            await ctx.reply('üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!');
            this._logger.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`, undefined, 'BotUpdate');
        }
        try {
            await this._users.upsertFromContext(ctx);
            this._logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'BotUpdate');
            await this._menu.sendMainMenu(ctx);
            this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
        }
        catch (error) {
            this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error}`, undefined, 'BotUpdate');
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    async onText(ctx) {
        const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start
        if (messageText === '/start') {
            this._logger.log(`üöÄ [@On text] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
            this._logger.log(`üìù [@On text] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${messageText}"`, 'BotUpdate');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                await ctx.reply('üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ @On text!');
                this._logger.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @On text', 'BotUpdate');
            }
            catch (error) {
                this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ @On text: ${error}`, undefined, 'BotUpdate');
            }
            try {
                await this._users.upsertFromContext(ctx);
                this._logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'BotUpdate');
                await this._menu.sendMainMenu(ctx);
                this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
            }
            catch (error) {
                this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ @On text: ${error}`, undefined, 'BotUpdate');
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
            return;
        }
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
        if (messageText?.startsWith('/')) {
            this._logger.debug(`[@On text] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: "${messageText}"`, 'BotUpdate');
            return;
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞–ø—Ä—è–º—É—é
        const { MainMenuHandler } = await Promise.resolve().then(() => __importStar(require('../utils/main-menu-handler')));
        if (MainMenuHandler.isMainMenuMessage(messageText)) {
            this._logger.debug(`[@On text] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: "${messageText}" - –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`, 'BotUpdate');
            await this._users.upsertFromContext(ctx);
            await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate-OnText');
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
        const sceneContext = ctx;
        if (sceneContext.scene?.current) {
            this._logger.debug(`[@On text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`, 'BotUpdate');
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            return;
        }
        this._logger.debug(`[@On text] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: "${messageText}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id} (–≤–Ω–µ —Å—Ü–µ–Ω—ã)`, 'BotUpdate');
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        this._logger.debug(`[@On text] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"`, 'BotUpdate');
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
    async onPhoto(ctx) {
        this._logger.log(`üì∏ [@On photo] –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
        const sceneContext = ctx;
        if (sceneContext.scene?.current) {
            this._logger.debug(`[@On photo] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`, 'BotUpdate');
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            return;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        await ctx.reply('üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n' +
            "üé¨ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.");
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async onVoice(ctx) {
        this._logger.log(`üé§ [@On voice] –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
        const sceneContext = ctx;
        if (sceneContext.scene?.current) {
            this._logger.debug(`[@On voice] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`, 'BotUpdate');
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            return;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        await ctx.reply('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n' +
            'üì∏ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n' +
            "üé¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.");
    }
    async onMainMenu(ctx) {
        const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
        this._logger.log(`üè† [@Hears] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}, —Ç–µ–∫—Å—Ç: "${messageText}"`, 'BotUpdate');
        try {
            await this._users.upsertFromContext(ctx);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            const { MainMenuHandler } = await Promise.resolve().then(() => __importStar(require('../utils/main-menu-handler')));
            await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate');
            this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Hears', 'BotUpdate');
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error}`, undefined, 'BotUpdate');
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
        }
    }
    async onMainMenuAction(ctx) {
        this._logger.log(`üè† [@Action] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}`, 'BotUpdate');
        try {
            await ctx.answerCbQuery();
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            const { MainMenuHandler } = await Promise.resolve().then(() => __importStar(require('../utils/main-menu-handler')));
            await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate-Action');
            this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Action', 'BotUpdate');
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ @Action: ${error}`, undefined, 'BotUpdate');
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É operator - –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ OperatorModule
    // @Command('operator') - –£–î–ê–õ–ï–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    async onMyId(ctx) {
        if (!ctx.from) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        const userId = ctx.from.id;
        const username = ctx.from.username || '–Ω–µ –∑–∞–¥–∞–Ω';
        const firstName = ctx.from.first_name || '';
        const lastName = ctx.from.last_name || '';
        const message = `üÜî –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` +
            `üì± Chat ID: \`${userId}\`\n` +
            `üë§ Username: @${username}\n` +
            `üìù –ò–º—è: ${firstName} ${lastName}\n\n` +
            `üí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Chat ID –≤—ã–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ`;
        await ctx.reply(message, { parse_mode: 'Markdown' });
    }
    // –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å @Command('myid')
    async onMyIdHears(ctx) {
        return this.onMyId(ctx);
    }
    async onStatus(ctx) {
        if (!ctx.from?.id) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        try {
            const userId = ctx.from.id;
            const activeProcesses = this._processManager.getActiveProcesses();
            const userProcesses = activeProcesses.filter(process => process.userId === userId);
            if (userProcesses.length === 0) {
                await ctx.reply('üìä **–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤**\n\n' +
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n' +
                    "üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'", { parse_mode: 'Markdown' });
                return;
            }
            let message = 'üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:**\n\n';
            for (const process of userProcesses) {
                const statusEmoji = this.getStatusEmoji(process.status);
                const statusText = this.getStatusText(process.status);
                const timeAgo = this.getTimeAgo(process.createdAt);
                message += `üé¨ **–ü—Ä–æ—Ü–µ—Å—Å:** \`${process.id}\`\n`;
                message += `${statusEmoji} **–°—Ç–∞—Ç—É—Å:** ${statusText}\n`;
                message += `üìù **–°—Ü–µ–Ω–∞—Ä–∏–π:** ${process.script.substring(0, 50)}...\n`;
                message += `üé• **–ö–∞—á–µ—Å—Ç–≤–æ:** ${process.quality}\n`;
                message += `‚è∞ **–°–æ–∑–¥–∞–Ω:** ${timeAgo}\n\n`;
            }
            message += 'üí° **–°—Ç–∞—Ç—É—Å—ã:**\n';
            message += 'üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Ñ–æ—Ç–æ\n';
            message += 'üéµ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞\n';
            message += 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n';
            message += '‚úÖ –ì–æ—Ç–æ–≤–æ\n\n';
            message += '‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 2-5 –º–∏–Ω—É—Ç';
            await ctx.reply(message, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this._logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${error}`, undefined, 'BotUpdate');
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    getStatusEmoji(status) {
        switch (status) {
            case 'photo_avatar_creating':
                return 'üì∏';
            case 'photo_avatar_completed':
                return '‚úÖ';
            case 'photo_avatar_failed':
                return '‚ùå';
            case 'voice_cloning':
                return 'üéµ';
            case 'voice_clone_completed':
                return '‚úÖ';
            case 'voice_clone_failed':
                return '‚ùå';
            case 'video_generating':
                return 'üé¨';
            case 'video_completed':
                return 'üéâ';
            case 'video_failed':
                return '‚ùå';
            default:
                return '‚è≥';
        }
    }
    getStatusText(status) {
        switch (status) {
            case 'photo_avatar_creating':
                return '–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Ñ–æ—Ç–æ';
            case 'photo_avatar_completed':
                return '–ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω';
            case 'photo_avatar_failed':
                return '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞';
            case 'voice_cloning':
                return '–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞';
            case 'voice_clone_completed':
                return '–ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω';
            case 'voice_clone_failed':
                return '–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞';
            case 'video_generating':
                return '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ';
            case 'video_completed':
                return '–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ';
            case 'video_failed':
                return '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
        }
    }
    getTimeAgo(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffMins = Math.floor(diffMs / (1000 * 60));
        if (diffMins < 1)
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffMins < 60)
            return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        const diffHours = Math.floor(diffMins / 60);
        if (diffHours < 24)
            return `${diffHours} —á –Ω–∞–∑–∞–¥`;
        const diffDays = Math.floor(diffHours / 24);
        return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    }
    async onCreateVideo(ctx) {
        await ctx.answerCbQuery();
        await ctx.scene.enter('video-generation');
    }
    async onServiceSettings(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from?.id) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        const currentService = await this._users.getUserPreferredService(ctx.from.id);
        const serviceNames = {
            did: 'ü§ñ –ò–ò-–ê–≤–∞—Ç–∞—Ä',
            heygen: 'üë§ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫',
        };
        const newText = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ**\n\n` +
            `–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: ${serviceNames[currentService]}\n\n` +
            `ü§ñ **–ò–ò-–ê–≤–∞—Ç–∞—Ä:**\n` +
            `‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n` +
            `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±\n` +
            `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞\n\n` +
            `üë§ **–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫:**\n` +
            `‚Ä¢ –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n` +
            `‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n` +
            `‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å:`;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const currentText = ctx.callbackQuery?.message && 'text' in ctx.callbackQuery.message
            ? ctx.callbackQuery.message.text
            : '';
        if (currentText !== newText) {
            await ctx.editMessageText(newText, {
                parse_mode: 'Markdown',
                reply_markup: this._kb.serviceSettings().reply_markup,
            });
        }
        else {
            await ctx.answerCbQuery('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!');
        }
    }
    async onSetServiceDid(ctx) {
        await ctx.answerCbQuery('ü§ñ –ò–ò-–ê–≤–∞—Ç–∞—Ä –≤—ã–±—Ä–∞–Ω!');
        if (!ctx.from?.id) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        const success = await this._users.setUserPreferredService(ctx.from.id, 'did');
        if (!success) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }
        await ctx.editMessageText(`‚úÖ **–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n` +
            `ü§ñ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: **–ò–ò-–ê–≤–∞—Ç–∞—Ä**\n\n` +
            `–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n` +
            `‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n` +
            `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±\n` +
            `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞\n` +
            `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤\n\n` +
            `üé¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'create_video' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }],
                ],
            },
        });
    }
    async onSetServiceHeyGen(ctx) {
        await ctx.answerCbQuery('üë§ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω!');
        if (!ctx.from?.id) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        const success = await this._users.setUserPreferredService(ctx.from.id, 'heygen');
        if (!success) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }
        await ctx.editMessageText(`‚úÖ **–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n` +
            `üë§ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: **–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫**\n\n` +
            `–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n` +
            `‚Ä¢ –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n` +
            `‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n` +
            `‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n` +
            `‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤\n\n` +
            `üé¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'create_video' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }],
                ],
            },
        });
    }
};
exports.BotUpdate = BotUpdate;
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onStart", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onText", null);
__decorate([
    (0, nestjs_telegraf_1.On)('photo'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onPhoto", null);
__decorate([
    (0, nestjs_telegraf_1.On)('voice'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onVoice", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMainMenu", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('main_menu'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMainMenuAction", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('myid'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMyId", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)(/^myid$/i),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMyIdHears", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('status'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onStatus", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_video'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onCreateVideo", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('service_settings'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onServiceSettings", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('set_service_did'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onSetServiceDid", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('set_service_heygen'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onSetServiceHeyGen", null);
exports.BotUpdate = BotUpdate = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    __metadata("design:paramtypes", [users_service_1.UsersService,
        menu_service_1.MenuService,
        keyboards_service_1.KeyboardsService,
        logger_service_1.CustomLoggerService,
        process_manager_service_1.ProcessManagerService])
], BotUpdate);
