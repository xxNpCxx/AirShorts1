"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotUpdate = void 0;
const nestjs_telegraf_1 = require("nestjs-telegraf");
const users_service_1 = require("../users/users.service");
const menu_service_1 = require("../menu/menu.service");
const logger_service_1 = require("../logger/logger.service");
const telegraf_1 = require("telegraf");
let BotUpdate = class BotUpdate {
    constructor(_users, _menu, _logger) {
        this._users = _users;
        this._menu = _menu;
        this._logger = _logger;
        this._logger.debug("BotUpdate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "BotUpdate");
        this._logger.log("üöÄ BotUpdate —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "BotUpdate");
    }
    async onStart(ctx) {
        this._logger.log(`üöÄ [@Start] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, "BotUpdate");
        try {
            await ctx.reply("üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!");
            this._logger.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "BotUpdate");
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`, undefined, "BotUpdate");
        }
        try {
            await this._users.upsertFromContext(ctx);
            this._logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "BotUpdate");
            await this._menu.sendMainMenu(ctx);
            this._logger.debug("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "BotUpdate");
        }
        catch (error) {
            this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error}`, undefined, "BotUpdate");
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async onText(ctx) {
        const messageText = ctx.message && "text" in ctx.message ? ctx.message.text : "";
        if (messageText === "/start") {
            this._logger.log(`üöÄ [@On text] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, "BotUpdate");
            this._logger.log(`üìù [@On text] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${messageText}"`, "BotUpdate");
            try {
                await ctx.reply("üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ @On text!");
                this._logger.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @On text", "BotUpdate");
            }
            catch (error) {
                this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ @On text: ${error}`, undefined, "BotUpdate");
            }
            try {
                await this._users.upsertFromContext(ctx);
                this._logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "BotUpdate");
                await this._menu.sendMainMenu(ctx);
                this._logger.debug("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "BotUpdate");
            }
            catch (error) {
                this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ @On text: ${error}`, undefined, "BotUpdate");
                await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
            return;
        }
        if (messageText?.startsWith("/")) {
            this._logger.debug(`[@On text] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: "${messageText}"`, "BotUpdate");
            return;
        }
        const hearsMessages = ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"];
        if (hearsMessages.includes(messageText)) {
            this._logger.debug(`[@On text] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: "${messageText}" - –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`, "BotUpdate");
            await this.onMainMenu(ctx);
            return;
        }
        this._logger.debug(`[@On text] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: "${messageText}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, "BotUpdate");
        this._logger.debug(`[@On text] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"`, "BotUpdate");
    }
    async onMainMenu(ctx) {
        const messageText = ctx.message && "text" in ctx.message ? ctx.message.text : "";
        this._logger.log(`üè† [@Hears] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}, —Ç–µ–∫—Å—Ç: "${messageText}"`, "BotUpdate");
        try {
            const sceneContext = ctx;
            if (sceneContext.scene?.current) {
                this._logger.log(`üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã "${sceneContext.scene.current.id}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, "BotUpdate");
                await sceneContext.scene.leave();
                this._logger.debug("–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "BotUpdate");
            }
            await this._users.upsertFromContext(ctx);
            await this._menu.sendMainMenu(ctx);
            this._logger.debug("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Hears", "BotUpdate");
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error}`, undefined, "BotUpdate");
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
        }
    }
    async onMainMenuAction(ctx) {
        this._logger.log(`üè† [@Action] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}`, "BotUpdate");
        try {
            await ctx.answerCbQuery();
            const sceneContext = ctx;
            if (sceneContext.scene?.current) {
                this._logger.log(`üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã "${sceneContext.scene.current.id}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, "BotUpdate");
                await sceneContext.scene.leave();
                this._logger.debug("–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ @Action", "BotUpdate");
            }
            await this._menu.sendMainMenu(ctx);
            this._logger.debug("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Action", "BotUpdate");
        }
        catch (error) {
            this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ @Action: ${error}`, undefined, "BotUpdate");
            await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }
    async onMyId(ctx) {
        if (!ctx.from) {
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        const userId = ctx.from.id;
        const username = ctx.from.username || "–Ω–µ –∑–∞–¥–∞–Ω";
        const firstName = ctx.from.first_name || "";
        const lastName = ctx.from.last_name || "";
        const message = `üÜî –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` +
            `üì± Chat ID: \`${userId}\`\n` +
            `üë§ Username: @${username}\n` +
            `üìù –ò–º—è: ${firstName} ${lastName}\n\n` +
            `üí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Chat ID –≤—ã–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ`;
        await ctx.reply(message, { parse_mode: "Markdown" });
    }
    async onMyIdHears(ctx) {
        return this.onMyId(ctx);
    }
    async onCreateVideo(ctx) {
        await ctx.answerCbQuery();
        await ctx.scene.enter("video-generation");
    }
};
exports.BotUpdate = BotUpdate;
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onStart", null);
__decorate([
    (0, nestjs_telegraf_1.On)("text"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onText", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMainMenu", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("main_menu"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMainMenuAction", null);
__decorate([
    (0, nestjs_telegraf_1.Command)("myid"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMyId", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)(/^myid$/i),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onMyIdHears", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("create_video"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "onCreateVideo", null);
exports.BotUpdate = BotUpdate = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    __metadata("design:paramtypes", [users_service_1.UsersService,
        menu_service_1.MenuService,
        logger_service_1.CustomLoggerService])
], BotUpdate);
//# sourceMappingURL=bot.update.js.map