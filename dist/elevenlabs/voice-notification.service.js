"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VoiceNotificationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceNotificationService = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const common_2 = require("@nestjs/common");
let VoiceNotificationService = VoiceNotificationService_1 = class VoiceNotificationService {
    constructor(bot) {
        this.bot = bot;
        this.logger = new common_1.Logger(VoiceNotificationService_1.name);
        this.pendingNotifications = new Map();
    }
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
     */
    registerVoiceNotification(userId, chatId, voiceId, voiceName) {
        const notificationData = {
            userId,
            chatId,
            voiceId,
            voiceName,
            status: "processing"
        };
        this.pendingNotifications.set(voiceId, notificationData);
        this.logger.log(`Registered voice notification for user ${userId}, voice ${voiceId}`);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
     */
    async notifyVoiceReady(voiceId) {
        const notification = this.pendingNotifications.get(voiceId);
        if (!notification) {
            this.logger.warn(`No pending notification found for voice ${voiceId}`);
            return;
        }
        try {
            await this.bot.telegram.sendMessage(notification.chatId, `üéâ –í–∞—à –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≥–æ—Ç–æ–≤!\n\n` +
                `üé§ –ì–æ–ª–æ—Å: ${notification.voiceName}\n` +
                `üÜî ID: ${voiceId.substring(0, 8)}...\n\n` +
                `‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º!\n\n` +
                `üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`);
            this.pendingNotifications.delete(voiceId);
            this.logger.log(`Voice ready notification sent to user ${notification.userId}`);
        }
        catch (error) {
            this.logger.error(`Failed to send voice ready notification to user ${notification.userId}:`, error);
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
     */
    async notifyVoiceError(voiceId, error) {
        const notification = this.pendingNotifications.get(voiceId);
        if (!notification) {
            this.logger.warn(`No pending notification found for voice ${voiceId}`);
            return;
        }
        try {
            await this.bot.telegram.sendMessage(notification.chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞\n\n` +
                `üé§ –ì–æ–ª–æ—Å: ${notification.voiceName}\n` +
                `üÜî ID: ${voiceId.substring(0, 8)}...\n\n` +
                `‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: ${error}\n\n` +
                `üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å.`);
            this.pendingNotifications.delete(voiceId);
            this.logger.log(`Voice error notification sent to user ${notification.userId}`);
        }
        catch (error) {
            this.logger.error(`Failed to send voice error notification to user ${notification.userId}:`, error);
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getPendingNotifications() {
        return Array.from(this.pendingNotifications.values());
    }
    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
     */
    cleanupOldNotifications() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        this.logger.debug(`Current pending notifications: ${this.pendingNotifications.size}`);
    }
};
exports.VoiceNotificationService = VoiceNotificationService;
exports.VoiceNotificationService = VoiceNotificationService = VoiceNotificationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_2.Inject)((0, nestjs_telegraf_1.getBotToken)("airshorts1_bot"))),
    __metadata("design:paramtypes", [telegraf_1.Telegraf])
], VoiceNotificationService);
