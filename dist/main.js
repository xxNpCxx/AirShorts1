"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const core_1 = require("@nestjs/core");
const app_module_1 = require("./app.module");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const logger_service_1 = require("./logger/logger.service");
async function bootstrap() {
    const app = await core_1.NestFactory.create(app_module_1.AppModule, {
        logger: ['error', 'warn', 'log', 'debug', 'verbose'],
    });
    let logger;
    try {
        logger = app.get(logger_service_1.CustomLoggerService);
    }
    catch (error) {
        console.log('‚ö†Ô∏è CustomLoggerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.log');
        logger = {
            log: (message, context) => console.log(`[LOG] [${context || 'App'}] ${message}`),
            error: (message, trace, context) => console.error(`[ERROR] [${context || 'App'}] ${message}`, trace || ''),
            warn: (message, context) => console.warn(`[WARN] [${context || 'App'}] ${message}`),
            debug: (message, context) => console.log(`[DEBUG] [${context || 'App'}] ${message}`),
            verbose: (message, context) => console.log(`[VERBOSE] [${context || 'App'}] ${message}`),
            telegramUpdate: (update, context) => {
                const type = update.message ? 'message' : (update.callback_query ? 'callback_query' : 'other');
                const userId = update.message?.from?.id || update.callback_query?.from?.id;
                const username = update.message?.from?.username || update.callback_query?.from?.username;
                const text = update.message?.text;
                const callback = update.callback_query?.data;
                console.log(`[DEBUG] [${context || 'Webhook'}] Telegram Update: type=${type}, userId=${userId}, username=${username}, text="${text}", callback="${callback}"`);
            }
        };
    }
    logger.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...', 'Bootstrap');
    logger.debug(`–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${process.env.DEBUG || 'false'}`, 'Bootstrap');
    logger.debug(`Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`, 'Bootstrap');
    logger.debug(`NODE_ENV: ${process.env.NODE_ENV || 'development'}`, 'Bootstrap');
    const bot = app.get((0, nestjs_telegraf_1.getBotToken)());
    const webhookUrl = process.env.RENDER_EXTERNAL_URL || process.env.WEBHOOK_URL;
    if (webhookUrl) {
        logger.log(`üåê Webhook URL: ${webhookUrl}`, 'Bootstrap');
        logger.log(`üîó Webhook –ø—É—Ç—å: ${webhookUrl}/webhook`, 'Bootstrap');
        logger.log(`üö™ –ü–æ—Ä—Ç: ${process.env.PORT || 3000}`, 'Bootstrap');
    }
    else {
        logger.warn('‚ö†Ô∏è WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ polling —Ä–µ–∂–∏–º–µ', 'Bootstrap');
    }
    bot.use(async (ctx, next) => {
        if (ctx.message && typeof ctx.message.text === 'string' && ctx.message.text.startsWith('/start')) {
            logger.debug(`Middleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'StartCommand');
            if (ctx.scene && ctx.scene.current) {
                try {
                    await ctx.scene.leave();
                    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start', 'StartCommand');
                }
                catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã: ${error}`, undefined, 'StartCommand');
                }
            }
            if (ctx.session) {
                ctx.session = {};
                logger.debug('–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start', 'StartCommand');
            }
        }
        if (ctx.message && ctx.message.text) {
            logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'MessageHandler');
        }
        logger.debug(`Middleware: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É`, 'MessageHandler');
        return next();
    });
    const port = Number(process.env.PORT) || 3000;
    await app.listen(port);
    logger.log(`‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, 'Bootstrap');
    if (webhookUrl) {
        try {
            logger.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é webhook –≤—Ä—É—á–Ω—É—é...', 'Bootstrap');
            await bot.telegram.setWebhook(`${webhookUrl}/webhook`);
            logger.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'Bootstrap');
            const webhookInfo = await bot.telegram.getWebhookInfo();
            logger.log(`üì° Webhook URL: ${webhookInfo.url}`, 'Bootstrap');
            logger.log(`üìä –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`, 'Bootstrap');
            if (webhookInfo.last_error_message) {
                logger.warn(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook: ${webhookInfo.last_error_message}`, 'Bootstrap');
            }
        }
        catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: ${error}`, undefined, 'Bootstrap');
            logger.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ polling —Ä–µ–∂–∏–º', 'Bootstrap');
            bot.launch();
            logger.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ', 'Bootstrap');
        }
    }
    else {
        logger.log('‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ polling —Ä–µ–∂–∏–º–µ', 'Bootstrap');
        bot.launch();
    }
    logger.debug(`Webhook URL: ${webhookUrl || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'Bootstrap');
    logger.debug(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`, 'Bootstrap');
    logger.debug(`Redis: ${process.env.REDIS_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'Bootstrap');
}
bootstrap();
//# sourceMappingURL=main.js.map