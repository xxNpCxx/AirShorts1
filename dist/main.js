"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const core_1 = require("@nestjs/core");
const app_module_1 = require("./app.module");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const logger_service_1 = require("./logger/logger.service");
const express_1 = require("express");
async function bootstrap() {
    const app = await core_1.NestFactory.create(app_module_1.AppModule, {
        logger: ["error", "warn", "log", "debug", "verbose"],
    });
    app.use((0, express_1.json)({ limit: "10mb" }));
    let logger;
    try {
        logger = app.get(logger_service_1.CustomLoggerService);
    }
    catch {
        console.log("‚ö†Ô∏è CustomLoggerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.log");
        logger = {
            log: (message, context) => console.log(`[LOG] [${context || "App"}] ${message}`),
            error: (message, trace, context) => console.error(`[ERROR] [${context || "App"}] ${message}`, trace || ""),
            warn: (message, context) => console.warn(`[WARN] [${context || "App"}] ${message}`),
            debug: (message, context) => console.log(`[DEBUG] [${context || "App"}] ${message}`),
            verbose: (message, context) => console.log(`[VERBOSE] [${context || "App"}] ${message}`),
            telegramUpdate: (update, context) => {
                const message = update.message;
                const callbackQuery = update.callback_query;
                const type = message
                    ? "message"
                    : callbackQuery
                        ? "callback_query"
                        : "other";
                const userId = message?.from?.id ||
                    callbackQuery?.from?.id;
                const username = message?.from?.username ||
                    callbackQuery?.from?.username;
                const text = message?.text;
                const callback = callbackQuery?.data;
                console.log(`[DEBUG] [${context || "Webhook"}] Telegram Update: type=${type}, userId=${userId}, username=${username}, text="${text}", callback="${callback}"`);
            },
        };
    }
    logger.log("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...", "Bootstrap");
    logger.debug(`Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`, "Bootstrap");
    logger.debug(`NODE_ENV: ${process.env.NODE_ENV || "development"}`, "Bootstrap");
    const bot = app.get((0, nestjs_telegraf_1.getBotToken)());
    const port = Number(process.env.PORT) || 3000;
    logger.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, "Bootstrap");
    await app.listen(port);
    logger.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, "Bootstrap");
    try {
        const webhookUrl = process.env.WEBHOOK_URL || "https://airshorts1.onrender.com";
        const webhookPath = `${webhookUrl}/webhook`;
        logger.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: ${webhookPath}`, "Bootstrap");
        const currentWebhookInfo = await bot.telegram.getWebhookInfo();
        logger.log(`üì° –¢–µ–∫—É—â–∏–π webhook —Å—Ç–∞—Ç—É—Å: ${currentWebhookInfo.url || "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}`, "Bootstrap");
        if (currentWebhookInfo.url && currentWebhookInfo.url !== webhookPath) {
            logger.log(`üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook: ${currentWebhookInfo.url}`, "Bootstrap");
            logger.log(`   –ù–æ–≤—ã–π webhook –±—É–¥–µ—Ç: ${webhookPath}`, "Bootstrap");
            await bot.telegram.deleteWebhook();
            logger.log(`‚úÖ –°—Ç–∞—Ä—ã–π webhook —Å–±—Ä–æ—à–µ–Ω`, "Bootstrap");
            await new Promise((resolve) => setTimeout(resolve, 2000));
        }
        if (currentWebhookInfo.url === webhookPath &&
            currentWebhookInfo.last_error_message) {
            logger.log(`‚ö†Ô∏è Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏: ${currentWebhookInfo.last_error_message}`, "Bootstrap");
            logger.log(`üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫`, "Bootstrap");
            await bot.telegram.deleteWebhook();
            logger.log(`‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏`, "Bootstrap");
            await new Promise((resolve) => setTimeout(resolve, 2000));
        }
        if (currentWebhookInfo.pending_update_count > 0) {
            logger.log(`üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${currentWebhookInfo.pending_update_count}`, "Bootstrap");
            logger.log(`‚ÑπÔ∏è Pending updates –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ webhook`, "Bootstrap");
        }
        logger.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook: ${webhookPath}`, "Bootstrap");
        let webhookInfo;
        let retryCount = 0;
        const maxRetries = 3;
        while (retryCount < maxRetries) {
            try {
                await bot.telegram.setWebhook(webhookPath);
                webhookInfo = await bot.telegram.getWebhookInfo();
                break;
            }
            catch (setWebhookError) {
                retryCount++;
                const errorMessage = setWebhookError instanceof Error
                    ? setWebhookError.message
                    : String(setWebhookError);
                if (errorMessage.includes("429")) {
                    const retryAfter = parseInt(errorMessage.match(/retry after (\d+)/)?.[1] || "5");
                    logger.warn(`‚ö†Ô∏è Rate limit (429): –∂–¥–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π ${retryCount}/${maxRetries}`, "Bootstrap");
                    await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));
                }
                else if (retryCount < maxRetries) {
                    logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${errorMessage}, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}`, "Bootstrap");
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                }
                else {
                    throw setWebhookError;
                }
            }
        }
        if (!webhookInfo) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫");
        }
        logger.log(`üì° Webhook —Å—Ç–∞—Ç—É—Å: ${webhookInfo.url}`, "Bootstrap");
        logger.log(`‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`, "Bootstrap");
        logger.debug(`Webhook –¥–µ—Ç–∞–ª–∏: ${JSON.stringify(webhookInfo)}`, "Bootstrap");
        if (webhookInfo.url !== webhookPath) {
            logger.warn(`‚ö†Ô∏è Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å ${webhookPath}, –ø–æ–ª—É—á–µ–Ω–æ ${webhookInfo.url}`, "Bootstrap");
        }
        logger.log(`üìä Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, "Bootstrap");
        logger.log(`   - URL: ${webhookInfo.url}`, "Bootstrap");
        logger.log(`   - Pending updates: ${webhookInfo.pending_update_count}`, "Bootstrap");
        logger.log(`   - Last error: ${webhookInfo.last_error_message || "–Ω–µ—Ç"}`, "Bootstrap");
        logger.log(`   - Last error date: ${webhookInfo.last_error_date || "–Ω–µ—Ç"}`, "Bootstrap");
        if (webhookInfo.pending_update_count > 0) {
            logger.log(`üì• –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`, "Bootstrap");
        }
        if (webhookInfo.url === webhookPath) {
            logger.log(`üéØ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, "Bootstrap");
        }
        else {
            logger.error(`‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!`, "Bootstrap");
            logger.error(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${webhookPath}`, "Bootstrap");
            logger.error(`   –ü–æ–ª—É—á–µ–Ω–æ: ${webhookInfo.url}`, "Bootstrap");
        }
    }
    catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${error}`, undefined, "Bootstrap");
        try {
            const webhookInfo = await bot.telegram.getWebhookInfo();
            logger.warn(`‚ö†Ô∏è –¢–µ–∫—É—â–∏–π webhook —Å—Ç–∞—Ç—É—Å: ${JSON.stringify(webhookInfo)}`, "Bootstrap");
        }
        catch (webhookError) {
            logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook: ${webhookError}`, undefined, "Bootstrap");
        }
    }
}
void bootstrap();
//# sourceMappingURL=main.js.map