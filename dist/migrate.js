"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.runMigrations = runMigrations;
const fs_1 = require("fs");
const path_1 = require("path");
const pg_1 = require("pg");
const dotenv = __importStar(require("dotenv"));
dotenv.config();
async function runMigrations() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    console.log(`üìÅ NODE_ENV: ${process.env.NODE_ENV}`);
    console.log(`üìÅ process.cwd(): ${process.cwd()}`);
    console.log(`üìÅ __dirname: ${__dirname}`);
    console.log(`üìÅ DATABASE_URL: ${process.env.DATABASE_URL ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}`);
    const client = new pg_1.Client({
        connectionString: process.env.DATABASE_URL,
    });
    try {
        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
        await client.connect();
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
        let tableExists = false;
        let hasNameColumn = false;
        let hasFilenameColumn = false;
        try {
            const tableCheck = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'migrations' 
        AND column_name = 'name'
      `);
            hasNameColumn = tableCheck.rows.length > 0;
            const filenameCheck = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'migrations' 
        AND column_name = 'filename'
      `);
            hasFilenameColumn = filenameCheck.rows.length > 0;
            tableExists = true;
            console.log("üèóÔ∏è –¢–∞–±–ª–∏—Ü–∞ migrations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        catch {
            console.log("üèóÔ∏è –¢–∞–±–ª–∏—Ü–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é");
        }
        if (!tableExists) {
            console.log("üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É migrations...");
            await client.query(`
        CREATE TABLE migrations (
          id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL UNIQUE,
          executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
            console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —Å–æ–∑–¥–∞–Ω–∞");
        }
        else if (!hasNameColumn && !hasFilenameColumn) {
            console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É migrations...");
            try {
                await client.query(`
          ALTER TABLE migrations 
          ADD COLUMN name VARCHAR(255) UNIQUE
        `);
                await client.query(`
          ALTER TABLE migrations 
          ADD COLUMN executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        `);
                console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
            }
            catch {
                console.log("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
            }
        }
        else if (hasFilenameColumn && !hasNameColumn) {
            console.log("üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º filename –≤ name...");
            try {
                await client.query(`
          ALTER TABLE migrations 
          RENAME COLUMN filename TO name
        `);
                console.log("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ filename –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ name");
            }
            catch {
                console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏");
            }
        }
        else {
            console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É");
        }
        const migrationsDir = process.cwd().includes('/opt/render/project')
            ? (0, path_1.join)(process.cwd(), "..", "migrations")
            : (0, path_1.join)(__dirname, "../../migrations");
        console.log(`üìÅ –ò—â–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤: ${migrationsDir}`);
        if (!(0, fs_1.existsSync)(migrationsDir)) {
            console.log(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${migrationsDir}`);
            console.log(`üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
            console.log(`üìÅ __dirname: ${__dirname}`);
            console.log(`üìÅ NODE_ENV: ${process.env.NODE_ENV}`);
            return;
        }
        const migrationFiles = (0, fs_1.readdirSync)(migrationsDir)
            .filter((file) => file.endsWith(".sql"))
            .sort();
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${migrationFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
        let failuresCount = 0;
        for (const filename of migrationFiles) {
            try {
                const { rows } = await client.query("SELECT id FROM migrations WHERE name = $1", [filename]);
                if (rows.length > 0) {
                    console.log(`‚è≠Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                console.log(`üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${filename}`);
                const sqlPath = (0, path_1.join)(migrationsDir, filename);
                const sql = (0, fs_1.readFileSync)(sqlPath, "utf8");
                await client.query("BEGIN");
                await client.query(sql);
                await client.query("INSERT INTO migrations (name) VALUES ($1)", [
                    filename,
                ]);
                await client.query("COMMIT");
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            }
            catch (error) {
                failuresCount += 1;
                try {
                    await client.query("ROLLBACK");
                }
                catch {
                }
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, error);
                continue;
            }
        }
        if (failuresCount === 0) {
            console.log("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        }
        else {
            console.log(`üèÅ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏. –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: ${failuresCount}`);
        }
    }
    catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
        throw error;
    }
    finally {
        await client.end();
    }
}
if (require.main === module) {
    runMigrations()
        .then(() => {
        console.log("üèÅ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
        process.exit(0);
    })
        .catch((error) => {
        console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
        process.exit(1);
    });
}
//# sourceMappingURL=migrate.js.map