"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VideoGenerationScene_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoGenerationScene = void 0;
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const did_service_1 = require("../d-id/did.service");
const common_1 = require("@nestjs/common");
let VideoGenerationScene = VideoGenerationScene_1 = class VideoGenerationScene {
    constructor(didService) {
        this.didService = didService;
        this.logger = new common_1.Logger(VideoGenerationScene_1.name);
    }
    async onSceneEnter(ctx) {
        await ctx.reply("üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ!\n\n" +
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:\n" +
            "1. üì∏ –§–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º\n" +
            "2. üéµ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã)\n" +
            "3. üìù –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞\n" +
            "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ\n\n" +
            "–ù–∞—á–Ω–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º:");
    }
    async onPhoto(ctx) {
        try {
            const photo = ctx.message?.photo;
            if (!photo || photo.length === 0) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            const photoFileId = photo[photo.length - 1].file_id;
            ctx.session.photoFileId = photoFileId;
            await ctx.reply("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã):");
        }
        catch (error) {
            this.logger.error("Error processing photo:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async onVoice(ctx) {
        try {
            const voice = ctx.message?.voice;
            if (!voice) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            if (voice.duration > 60) {
                await ctx.reply("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.");
                return;
            }
            ctx.session.audioFileId = voice.file_id;
            await ctx.reply("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º:");
        }
        catch (error) {
            this.logger.error("Error processing voice:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async onText(ctx) {
        try {
            const text = ctx.message?.text;
            if (!text) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            const session = ctx.session;
            if (!session.script) {
                session.script = text;
                await this.showPlatformSelection(ctx);
            }
            else if (!session.duration) {
                const duration = parseInt(text);
                if (isNaN(duration) || duration < 15 || duration > 60) {
                    await ctx.reply("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                    return;
                }
                session.duration = duration;
                await this.showQualitySelection(ctx);
            }
            else if (!session.quality) {
                if (text.toLowerCase().includes("720") ||
                    text.toLowerCase().includes("720p")) {
                    session.quality = "720p";
                }
                else if (text.toLowerCase().includes("1080") ||
                    text.toLowerCase().includes("1080p")) {
                    session.quality = "720p";
                }
                else {
                    await ctx.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: 720p –∏–ª–∏ 1080p");
                    return;
                }
                await this.showTextPromptInput(ctx);
            }
            else if (!session.textPrompt) {
                session.textPrompt = text;
                await this.startVideoGeneration(ctx);
            }
        }
        catch (error) {
            this.logger.error("Error processing text:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async showPlatformSelection(ctx) {
        await ctx.reply("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üì± YouTube Shorts", callback_data: "platform_youtube_shorts" }
                    ],
                    [
                        { text: "üì∫ TikTok", callback_data: "platform_tiktok" }
                    ],
                    [
                        { text: "üì∏ Instagram Reels", callback_data: "platform_instagram_reels" }
                    ],
                    [
                        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_video_generation" }
                    ]
                ]
            }
        });
    }
    async showDurationSelection(ctx) {
        await ctx.reply("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:\n\n" +
            "üìè –û—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-30 –¥–ª—è Shorts)\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥:");
    }
    async showQualitySelection(ctx) {
        await ctx.reply("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:\n\n" +
            "üé• 720p - –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞\n" +
            "üé• 1080p - –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞\n\n" +
            '–ù–∞–ø–∏—à–∏—Ç–µ "720p" –∏–ª–∏ "1080p":');
    }
    async showTextPromptInput(ctx) {
        await ctx.reply("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n" +
            'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ YouTube Shorts —Å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏"\n\n' +
            '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω—É–∂–µ–Ω:');
    }
    async startVideoGeneration(ctx) {
        try {
            const session = ctx.session;
            await ctx.reply("üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...\n\n" +
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
            const request = {
                photoUrl: session.photoFileId || "",
                audioUrl: session.audioFileId || "",
                script: session.script || "",
                platform: session.platform || "youtube-shorts",
                duration: session.duration || 30,
                quality: session.quality || "720p",
                textPrompt: session.textPrompt,
            };
            const result = await this.didService.generateVideo(request);
            await ctx.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n" +
                `üÜî ID: ${result.id}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${result.status}\n\n` +
                "–í–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. " +
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.");
            await ctx.scene?.leave();
        }
        catch (error) {
            this.logger.error("Error starting video generation:", error);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n${error.message}\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        }
    }
    async onYouTubeShortsSelected(ctx) {
        try {
            await ctx.answerCbQuery();
            const session = ctx.session;
            session.platform = "youtube-shorts";
            await ctx.editMessageText("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±—Ä–∞–Ω–∞: YouTube Shorts");
            await this.showDurationSelection(ctx);
        }
        catch (error) {
            this.logger.error("Error selecting YouTube Shorts:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");
        }
    }
    async onTikTokSelected(ctx) {
        try {
            await ctx.answerCbQuery("‚ùå TikTok –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        }
        catch (error) {
            this.logger.error("Error selecting TikTok:", error);
        }
    }
    async onInstagramReelsSelected(ctx) {
        try {
            await ctx.answerCbQuery("‚ùå Instagram Reels –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        }
        catch (error) {
            this.logger.error("Error selecting Instagram Reels:", error);
        }
    }
    async onCancelVideoGeneration(ctx) {
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            await ctx.scene?.leave();
        }
        catch (error) {
            this.logger.error("Error canceling video generation:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã");
        }
    }
    async onCancel(ctx) {
        await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        await ctx.scene?.leave();
    }
};
exports.VideoGenerationScene = VideoGenerationScene;
__decorate([
    (0, nestjs_telegraf_1.SceneEnter)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onSceneEnter", null);
__decorate([
    (0, nestjs_telegraf_1.On)("photo"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onPhoto", null);
__decorate([
    (0, nestjs_telegraf_1.On)("voice"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onVoice", null);
__decorate([
    (0, nestjs_telegraf_1.On)("text"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onText", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showPlatformSelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showDurationSelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showQualitySelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showTextPromptInput", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "startVideoGeneration", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_youtube_shorts"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onYouTubeShortsSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_tiktok"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onTikTokSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_instagram_reels"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onInstagramReelsSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("cancel_video_generation"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onCancelVideoGeneration", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("cancel"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onCancel", null);
exports.VideoGenerationScene = VideoGenerationScene = VideoGenerationScene_1 = __decorate([
    (0, nestjs_telegraf_1.Scene)("video-generation"),
    __metadata("design:paramtypes", [did_service_1.DidService])
], VideoGenerationScene);
//# sourceMappingURL=video-generation.scene.js.map