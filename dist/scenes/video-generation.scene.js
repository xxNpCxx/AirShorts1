"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VideoGenerationScene_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoGenerationScene = void 0;
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const did_service_1 = require("../d-id/did.service");
const common_1 = require("@nestjs/common");
let VideoGenerationScene = VideoGenerationScene_1 = class VideoGenerationScene {
    constructor(didService) {
        this.didService = didService;
        this.logger = new common_1.Logger(VideoGenerationScene_1.name);
    }
    async onSceneEnter(ctx) {
        await ctx.reply("üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ!\n\n" +
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:\n" +
            "1. üì∏ –§–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º\n" +
            "2. üéµ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã)\n" +
            "3. üìù –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞\n" +
            "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ\n\n" +
            "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**\n" +
            "‚Ä¢ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –∫–∞–¥—Ä–µ (–ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ)\n" +
            "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n" +
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, WebP\n" +
            "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –º–∏–Ω–∏–º—É–º 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n" +
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —á–µ—Ç–∫–æ—Å—Ç—å\n" +
            "‚Ä¢ –õ–∏—Ü–æ —Å–º–æ—Ç—Ä–∏—Ç –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É\n" +
            "‚Ä¢ ‚ö†Ô∏è –í–ê–ñ–ù–û: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –§–û–¢–û, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª!\n\n" +
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n" +
            "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (9:16)\n" +
            "‚Ä¢ –õ–∏—Ü–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-50% –∫–∞–¥—Ä–∞\n" +
            "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n" +
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º —Ñ–æ–Ω–∞ –∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n" +
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:");
    }
    async onPhoto(ctx) {
        try {
            const photo = ctx.message?.photo;
            if (!photo || photo.length === 0) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            const bestPhoto = photo[photo.length - 1];
            const photoFileId = bestPhoto.file_id;
            if (bestPhoto.file_size && bestPhoto.file_size > 10 * 1024 * 1024) {
                await ctx.reply("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n\n" +
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                    "‚Ä¢ –°–∂–∞—Ç—å —Ñ–æ—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–º–µ—Ä—ã\n" +
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n" +
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª –∏ –≤—ã–±—Ä–∞—Ç—å —Å–∂–∞—Ç–∏–µ");
                return;
            }
            if (bestPhoto.width && bestPhoto.height) {
                if (bestPhoto.width < 512 || bestPhoto.height < 512) {
                    await ctx.reply("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ!\n" +
                        `–¢–µ–∫—É—â–µ–µ: ${bestPhoto.width}x${bestPhoto.height}\n` +
                        "–ú–∏–Ω–∏–º—É–º: 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n\n" +
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.");
                    return;
                }
                const aspectRatio = bestPhoto.height / bestPhoto.width;
                if (aspectRatio < 1.5) {
                    await ctx.reply("‚ö†Ô∏è –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è!\n\n" +
                        `–¢–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${bestPhoto.width}x${bestPhoto.height}\n` +
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 9:16 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1080x1920)\n\n" +
                        "–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.");
                }
            }
            try {
                const file = await ctx.telegram.getFile(photoFileId);
                if (file.file_path) {
                    const fileExtension = file.file_path.split('.').pop()?.toLowerCase();
                    const allowedFormats = ['jpg', 'jpeg', 'png', 'webp'];
                    if (!fileExtension || !allowedFormats.includes(fileExtension)) {
                        await ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n" +
                            `–û–±–Ω–∞—Ä—É–∂–µ–Ω: ${fileExtension || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n` +
                            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WebP\n\n" +
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.");
                        return;
                    }
                }
            }
            catch (fileError) {
                this.logger.warn("Could not validate file format:", fileError);
            }
            ctx.session.photoFileId = photoFileId;
            await ctx.reply("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∏ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é!\n\n" +
                `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                `‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${bestPhoto.width || '?'}x${bestPhoto.height || '?'}\n` +
                `‚Ä¢ –†–∞–∑–º–µ—Ä: ${bestPhoto.file_size ? Math.round(bestPhoto.file_size / 1024) + ' –ö–ë' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n` +
                "üéµ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã):");
        }
        catch (error) {
            this.logger.error("Error processing photo:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async onDocument(ctx) {
        try {
            const message = ctx.message;
            if (message && "document" in message && message.document) {
                const document = message.document;
                const isImage = document.mime_type && (document.mime_type.startsWith("image/") ||
                    ["image/jpeg", "image/jpg", "image/png", "image/webp"].includes(document.mime_type));
                if (isImage) {
                    await ctx.reply("üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∫ —Ñ–∞–π–ª!\n\n" +
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.\n\n" +
                        "üí° –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n" +
                        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üìé (—Å–∫—Ä–µ–ø–∫–∞)\n" +
                        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ '–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ'\n" +
                        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏\n" +
                        "‚Ä¢ –ù–ï –Ω–∞–∂–∏–º–∞–π—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª'\n\n" +
                        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ:");
                }
                else {
                    await ctx.reply("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n" +
                        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.");
                }
            }
        }
        catch (error) {
            this.logger.error("Error processing document:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
        }
    }
    async onVideo(ctx) {
        await ctx.reply("üé• –í–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n" +
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).");
    }
    async onAudio(ctx) {
        await ctx.reply("üéµ –û–±—ã—á–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n" +
            "üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞).");
    }
    async onVoice(ctx) {
        try {
            const voice = ctx.message?.voice;
            if (!voice) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            if (voice.duration > 60) {
                await ctx.reply("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.");
                return;
            }
            ctx.session.audioFileId = voice.file_id;
            await ctx.reply("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º:");
        }
        catch (error) {
            this.logger.error("Error processing voice:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async onText(ctx) {
        try {
            const text = ctx.message?.text;
            if (!text) {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            const session = ctx.session;
            if (!session.script) {
                session.script = text;
                await this.showPlatformSelection(ctx);
            }
            else if (!session.duration) {
                const duration = parseInt(text);
                if (isNaN(duration) || duration < 15 || duration > 60) {
                    await ctx.reply("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                    return;
                }
                session.duration = duration;
                await this.showQualitySelection(ctx);
            }
            else if (!session.textPrompt) {
                session.textPrompt = text;
                await this.startVideoGeneration(ctx);
            }
        }
        catch (error) {
            this.logger.error("Error processing text:", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    async showPlatformSelection(ctx) {
        await ctx.reply("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üì± –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ", callback_data: "platform_youtube_shorts" }
                    ],
                    [
                        { text: "üì∫ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (—Å–∫–æ—Ä–æ)", callback_data: "platform_tiktok" }
                    ],
                    [
                        { text: "üì∏ –ò—Å—Ç–æ—Ä–∏–∏ –∏ —Ä–∏–ª—Å (—Å–∫–æ—Ä–æ)", callback_data: "platform_instagram_reels" }
                    ],
                    [
                        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_video_generation" }
                    ]
                ]
            }
        });
    }
    async showDurationSelection(ctx) {
        await ctx.reply("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:\n\n" +
            "üìè –û—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-30 –¥–ª—è Shorts)\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥:");
    }
    async showQualitySelection(ctx) {
        await ctx.reply("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üé• 720p (–±—ã—Å—Ç—Ä–µ–µ)", callback_data: "quality_720p" },
                        { text: "üèÜ 1080p (–ª—É—á—à–µ)", callback_data: "quality_1080p" }
                    ],
                    [
                        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_video_generation" }
                    ]
                ]
            }
        });
    }
    async showTextPromptInput(ctx) {
        await ctx.reply("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n" +
            'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π –≤–∏–¥–µ–æ —Å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ –∏ —è—Ä–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏"\n\n' +
            '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω—É–∂–µ–Ω:');
    }
    async startVideoGeneration(ctx) {
        try {
            const session = ctx.session;
            await ctx.reply("üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...\n\n" +
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
            let photoUrl = "";
            let audioUrl = "";
            if (session.photoFileId) {
                try {
                    const photoFile = await ctx.telegram.getFile(session.photoFileId);
                    if (photoFile.file_path) {
                        photoUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${photoFile.file_path}`;
                    }
                }
                catch (error) {
                    this.logger.error("Error getting photo URL:", error);
                    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.");
                    return;
                }
            }
            if (session.audioFileId) {
                try {
                    const audioFile = await ctx.telegram.getFile(session.audioFileId);
                    if (audioFile.file_path) {
                        audioUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${audioFile.file_path}`;
                    }
                }
                catch (error) {
                    this.logger.error("Error getting audio URL:", error);
                    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –∑–∞–Ω–æ–≤–æ.");
                    return;
                }
            }
            const request = {
                photoUrl: photoUrl,
                audioUrl: audioUrl,
                script: session.script || "",
                platform: session.platform || "youtube-shorts",
                duration: session.duration || 30,
                quality: session.quality || "720p",
                textPrompt: session.textPrompt,
            };
            this.logger.log(`Starting D-ID generation with photoUrl: ${photoUrl ? 'PROVIDED' : 'MISSING'}, audioUrl: ${audioUrl ? 'PROVIDED' : 'MISSING'}`);
            const result = await this.didService.generateVideo(request);
            await ctx.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n" +
                `üÜî ID: ${result.id}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${result.status}\n\n` +
                "–í–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. " +
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.");
            await ctx.scene?.leave();
        }
        catch (error) {
            this.logger.error("Error starting video generation:", error);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n${error.message}\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        }
    }
    async onYouTubeShortsSelected(ctx) {
        try {
            await ctx.answerCbQuery();
            const session = ctx.session;
            session.platform = "youtube-shorts";
            await ctx.editMessageText("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±—Ä–∞–Ω–∞: –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ");
            await this.showDurationSelection(ctx);
        }
        catch (error) {
            this.logger.error("Error selecting YouTube Shorts:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");
        }
    }
    async onTikTokSelected(ctx) {
        try {
            await ctx.answerCbQuery("‚ùå –≠—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        }
        catch (error) {
            this.logger.error("Error selecting TikTok:", error);
        }
    }
    async onInstagramReelsSelected(ctx) {
        try {
            await ctx.answerCbQuery("‚ùå –≠—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        }
        catch (error) {
            this.logger.error("Error selecting Instagram Reels:", error);
        }
    }
    async onQuality720Selected(ctx) {
        try {
            await ctx.answerCbQuery();
            const session = ctx.session;
            session.quality = "720p";
            await ctx.editMessageText("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: 720p (–±—ã—Å—Ç—Ä–µ–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞)");
            await this.showTextPromptInput(ctx);
        }
        catch (error) {
            this.logger.error("Error selecting 720p quality:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞");
        }
    }
    async onQuality1080Selected(ctx) {
        try {
            await ctx.answerCbQuery();
            const session = ctx.session;
            session.quality = "1080p";
            await ctx.editMessageText("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: 1080p (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞)");
            await this.showTextPromptInput(ctx);
        }
        catch (error) {
            this.logger.error("Error selecting 1080p quality:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞");
        }
    }
    async onCancelVideoGeneration(ctx) {
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            await ctx.scene?.leave();
        }
        catch (error) {
            this.logger.error("Error canceling video generation:", error);
            await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã");
        }
    }
    async onCancel(ctx) {
        await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        await ctx.scene?.leave();
    }
};
exports.VideoGenerationScene = VideoGenerationScene;
__decorate([
    (0, nestjs_telegraf_1.SceneEnter)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onSceneEnter", null);
__decorate([
    (0, nestjs_telegraf_1.On)("photo"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onPhoto", null);
__decorate([
    (0, nestjs_telegraf_1.On)("document"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onDocument", null);
__decorate([
    (0, nestjs_telegraf_1.On)("video"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onVideo", null);
__decorate([
    (0, nestjs_telegraf_1.On)("audio"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onAudio", null);
__decorate([
    (0, nestjs_telegraf_1.On)("voice"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onVoice", null);
__decorate([
    (0, nestjs_telegraf_1.On)("text"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onText", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showPlatformSelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showDurationSelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showQualitySelection", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "showTextPromptInput", null);
__decorate([
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "startVideoGeneration", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_youtube_shorts"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onYouTubeShortsSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_tiktok"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onTikTokSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("platform_instagram_reels"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onInstagramReelsSelected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("quality_720p"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onQuality720Selected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("quality_1080p"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onQuality1080Selected", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("cancel_video_generation"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onCancelVideoGeneration", null);
__decorate([
    (0, nestjs_telegraf_1.Action)("cancel"),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], VideoGenerationScene.prototype, "onCancel", null);
exports.VideoGenerationScene = VideoGenerationScene = VideoGenerationScene_1 = __decorate([
    (0, nestjs_telegraf_1.Scene)("video-generation"),
    __metadata("design:paramtypes", [did_service_1.DidService])
], VideoGenerationScene);
//# sourceMappingURL=video-generation.scene.js.map