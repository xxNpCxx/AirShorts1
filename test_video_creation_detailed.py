#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AKOOL + ELEVENLABS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞
"""

import os
import sys
import json
import time
import base64
import requests
import argparse
from typing import Optional, Dict, Any
from pathlib import Path
import tempfile
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('test_video_creation.log')
    ]
)
logger = logging.getLogger(__name__)

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    BLUE = '\033[0;34m'
    YELLOW = '\033[1;33m'
    PURPLE = '\033[0;35m'
    NC = '\033[0m'  # No Color

class VideoCreationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞"""
    
    def __init__(self):
        # AKOOL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.akool_client_id = "mrj0kTxsc6LoKCEJX2oyyA=="
        self.akool_client_secret = "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF"
        self.akool_base_url = "https://openapi.akool.com/api/open/v3"
        self.akool_access_token = None
        
        # ElevenLabs –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.elevenlabs_api_key = os.getenv('ELEVENLABS_API_KEY', '')
        self.elevenlabs_base_url = "https://api.elevenlabs.io/v1"
        self.elevenlabs_voice_id = None
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞."
        self.test_photo_path = None
        self.test_audio_path = None
        self.generated_audio_path = None
        self.akool_task_id = None
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.temp_dir = tempfile.mkdtemp(prefix='video_test_')
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_dir}")
    
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        color_map = {
            "INFO": Colors.BLUE,
            "SUCCESS": Colors.GREEN,
            "ERROR": Colors.RED,
            "WARNING": Colors.YELLOW,
            "INFO_SPECIAL": Colors.PURPLE
        }
        color = color_map.get(level, Colors.NC)
        print(f"{color}[{level}]{Colors.NC} {message}")
        logger.info(f"[{level}] {message}")
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        try:
            import requests
            import json
            self.log("‚úÖ –í—Å–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã", "SUCCESS")
            return True
        except ImportError as e:
            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}", "ERROR")
            return False
    
    def get_akool_token(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL"""
        self.log("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL...")
        
        try:
            response = requests.post(
                f"{self.akool_base_url}/getToken",
                json={
                    "clientId": self.akool_client_id,
                    "clientSecret": self.akool_client_secret
                },
                timeout=10
            )
            
            self.log(f"–û—Ç–≤–µ—Ç getToken: {response.text}")
            
            data = response.json()
            if data.get('code') == 1000 and data.get('token'):
                self.akool_access_token = data['token']
                self.log("‚úÖ API —Ç–æ–∫–µ–Ω AKOOL –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ö–æ–¥: {data.get('code')}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}", "ERROR")
            return False
    
    def check_elevenlabs_key(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API –∫–ª—é—á–∞"""
        self.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API –∫–ª—é—á–∞...")
        
        if not self.elevenlabs_api_key:
            self.log("‚ö†Ô∏è ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "WARNING")
            return False
        
        try:
            response = requests.get(
                f"{self.elevenlabs_base_url}/voices",
                headers={"xi-api-key": self.elevenlabs_api_key},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'voices' in data:
                    self.log("‚úÖ ElevenLabs API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω", "SUCCESS")
                    return True
            
            self.log(f"‚ùå ElevenLabs API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}", "ERROR")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ElevenLabs API: {e}", "ERROR")
            return False
    
    def create_test_audio(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        self.log("üéµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª
            self.test_audio_path = os.path.join(self.temp_dir, "test_audio.wav")
            
            # –ü—Ä–æ—Å—Ç–æ–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–∏—à–∏–Ω–∞
            wav_header = bytearray([
                0x52, 0x49, 0x46, 0x46,  # "RIFF"
                0x24, 0x00, 0x00, 0x00,  # File size - 8
                0x57, 0x41, 0x56, 0x45,  # "WAVE"
                0x66, 0x6D, 0x74, 0x20,  # "fmt "
                0x10, 0x00, 0x00, 0x00,  # fmt chunk size
                0x01, 0x00,              # Audio format (PCM)
                0x01, 0x00,              # Number of channels
                0x44, 0xAC, 0x00, 0x00,  # Sample rate (44100)
                0x88, 0x58, 0x01, 0x00,  # Byte rate
                0x02, 0x00,              # Block align
                0x10, 0x00,              # Bits per sample
                0x64, 0x61, 0x74, 0x61,  # "data"
                0x00, 0x00, 0x00, 0x00   # Data size
            ])
            
            with open(self.test_audio_path, 'wb') as f:
                f.write(wav_header)
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ç–∏—à–∏–Ω—ã
                f.write(b'\x00' * 1000)
            
            self.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {e}", "ERROR")
            return False
    
    def create_test_image(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.log("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            self.test_photo_path = os.path.join(self.temp_dir, "test_image.jpg")
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JPEG —Ñ–∞–π–ª
            jpeg_data = bytes([
                0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
                0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
                0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
                0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
                0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
                0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
                0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x14,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x08, 0xFF, 0xC4, 0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02,
                0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xAA, 0xFF, 0xD9
            ])
            
            with open(self.test_photo_path, 'wb') as f:
                f.write(jpeg_data)
            
            self.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def clone_voice_elevenlabs(self) -> bool:
        """–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs"""
        if not self.elevenlabs_api_key:
            self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ - API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "WARNING")
            return False
        
        self.log("üé§ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs...")
        
        try:
            with open(self.test_audio_path, 'rb') as audio_file:
                files = {
                    'files': ('voice_sample.wav', audio_file, 'audio/wav')
                }
                data = {
                    'name': f'TestVoice_{int(time.time())}',
                    'description': 'Test voice for integration testing'
                }
                
                response = requests.post(
                    f"{self.elevenlabs_base_url}/voices/add",
                    headers={"xi-api-key": self.elevenlabs_api_key},
                    files=files,
                    data=data,
                    timeout=30
                )
            
            self.log(f"–û—Ç–≤–µ—Ç ElevenLabs voice clone: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                if 'voice_id' in data:
                    self.elevenlabs_voice_id = data['voice_id']
                    self.log(f"‚úÖ –ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. Voice ID: {self.elevenlabs_voice_id}", "SUCCESS")
                    return True
            
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}", "ERROR")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}", "ERROR")
            return False
    
    def create_audio_with_voice(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º"""
        if not self.elevenlabs_api_key or not self.elevenlabs_voice_id:
            self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ - API –∫–ª—é—á –∏–ª–∏ Voice ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "WARNING")
            return False
        
        self.log("üó£Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º...")
        
        try:
            payload = {
                "text": self.test_text,
                "model_id": "eleven_multilingual_v2",
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.75,
                    "style": 0.0,
                    "use_speaker_boost": True
                }
            }
            
            response = requests.post(
                f"{self.elevenlabs_base_url}/text-to-speech/{self.elevenlabs_voice_id}",
                headers={
                    "xi-api-key": self.elevenlabs_api_key,
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                self.generated_audio_path = os.path.join(self.temp_dir, "generated_audio.mp3")
                with open(self.generated_audio_path, 'wb') as f:
                    f.write(response.content)
                
                self.log("‚úÖ –ê—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ. –°—Ç–∞—Ç—É—Å: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}", "ERROR")
            return False
    
    def create_talking_photo_akool(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —á–µ—Ä–µ–∑ AKOOL"""
        if not self.akool_access_token:
            self.log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω AKOOL", "ERROR")
            return False
        
        self.log("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —á–µ—Ä–µ–∑ AKOOL...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∏ –±—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ URL)
            talking_photo_url = "https://example.com/test_photo.jpg"
            audio_url = "https://example.com/test_audio.mp3"
            webhook_url = "https://webhook.site/your-unique-id"
            
            payload = {
                "talking_photo_url": talking_photo_url,
                "audio_url": audio_url,
                "webhookUrl": webhook_url
            }
            
            response = requests.post(
                f"{self.akool_base_url}/content/video/createbytalkingphoto",
                headers={
                    "Authorization": f"Bearer {self.akool_access_token}",
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=30
            )
            
            self.log(f"–û—Ç–≤–µ—Ç AKOOL create talking photo: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('code') == 1000 and data.get('data', {}).get('task_id'):
                    self.akool_task_id = data['data']['task_id']
                    self.log(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Talking Photo –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Task ID: {self.akool_task_id}", "SUCCESS")
                    return True
            
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo. –ö–æ–¥: {data.get('code')}", "ERROR")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo: {e}", "ERROR")
            return False
    
    def check_akool_video_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ AKOOL"""
        if not self.akool_access_token or not self.akool_task_id:
            self.log("‚ùå –ù—É–∂–Ω—ã —Ç–æ–∫–µ–Ω AKOOL –∏ Task ID", "ERROR")
            return False
        
        self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ AKOOL (Task ID: {self.akool_task_id})...")
        
        try:
            response = requests.get(
                f"{self.akool_base_url}/content/video/getvideostatus?task_id={self.akool_task_id}",
                headers={"Authorization": f"Bearer {self.akool_access_token}"},
                timeout=10
            )
            
            self.log(f"–û—Ç–≤–µ—Ç AKOOL video status: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('code') == 1000:
                    status = data.get('data', {}).get('status')
                    video_url = data.get('data', {}).get('video_url')
                    
                    self.log(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: {status}", "SUCCESS")
                    
                    if status == 3:  # completed
                        self.log(f"üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! URL: {video_url}", "SUCCESS")
                    elif status == 2:  # processing
                        self.log("‚è≥ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", "INFO")
                    elif status == 4:  # error
                        self.log("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ", "ERROR")
                    
                    return True
            
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ. –ö–æ–¥: {data.get('code')}", "ERROR")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ: {e}", "ERROR")
            return False
    
    def test_full_process(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.log("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞", "INFO_SPECIAL")
        
        steps = [
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ AKOOL", self.get_akool_token),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API", self.check_elevenlabs_key),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ", self.create_test_audio),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", self.create_test_image),
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
        for step_name, step_func in steps:
            self.log(f"=== {step_name} ===", "INFO_SPECIAL")
            if not step_func():
                if "AKOOL" in step_name:
                    self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {step_name}", "ERROR")
                    return False
                else:
                    self.log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —à–∞–≥: {step_name}", "WARNING")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
        if self.elevenlabs_api_key:
            self.log("=== –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ ===", "INFO_SPECIAL")
            if self.clone_voice_elevenlabs():
                self.log("=== –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º ===", "INFO_SPECIAL")
                self.create_audio_with_voice()
            else:
                self.log("‚ö†Ô∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ", "WARNING")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo
        self.log("=== –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —á–µ—Ä–µ–∑ AKOOL ===", "INFO_SPECIAL")
        if self.create_talking_photo_akool():
            self.log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ ===", "INFO_SPECIAL")
            self.check_akool_video_status()
        else:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Talking Photo", "ERROR")
            return False
        
        self.log("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "SUCCESS")
        return True
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üßπ –û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        try:
            import shutil
            shutil.rmtree(self.temp_dir, ignore_errors=True)
            self.log("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã", "SUCCESS")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}", "WARNING")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL + ELEVENLABS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('-k', '--elevenlabs-key', help='ElevenLabs API –∫–ª—é—á')
    parser.add_argument('--akool-only', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ AKOOL')
    parser.add_argument('--elevenlabs-only', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ElevenLabs')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    tester = VideoCreationTester()
    
    if args.elevenlabs_key:
        tester.elevenlabs_api_key = args.elevenlabs_key
    
    try:
        if args.elevenlabs_only:
            tester.log("=== –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ ElevenLabs ===", "INFO_SPECIAL")
            if not tester.check_elevenlabs_key():
                sys.exit(1)
            if not tester.create_test_audio():
                sys.exit(1)
            if not tester.clone_voice_elevenlabs():
                sys.exit(1)
            if not tester.create_audio_with_voice():
                sys.exit(1)
            tester.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
            
        elif args.akool_only:
            tester.log("=== –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ AKOOL ===", "INFO_SPECIAL")
            if not tester.get_akool_token():
                sys.exit(1)
            if not tester.create_test_audio():
                sys.exit(1)
            if not tester.create_test_image():
                sys.exit(1)
            if not tester.create_talking_photo_akool():
                sys.exit(1)
            tester.check_akool_video_status()
            tester.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
            
        else:
            if not tester.test_full_process():
                sys.exit(1)
                
    finally:
        tester.cleanup()

if __name__ == "__main__":
    main()
