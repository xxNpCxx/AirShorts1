#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º crypto-js
 * –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Akool
 */

const CryptoJS = require('crypto-js');
const crypto = require('crypto');

// –ü—Ä–∏–º–µ—Ä –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Akool
const officialExample = {
  signature: "04e30dd43d9d8f95dd7c127dad617f0929d61c1d",
  dataEncrypt: "LuG1OVSVIwOO/xpW00eSYo77Ncxa9h4VKmOJRjwoyoAmCIS/8FdJRJ+BpZn90BVAAg8xpU1bMmcDlAYDT010Wa9tNi1jivX25Ld03iA4EKs=",
  timestamp: 1710757981609,
  nonce: "1529"
};

// –ö–ª—é—á–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const exampleClientId = "AKDt8rWEczpYPzCGur2xE=";
const exampleClientSecret = "nmwUjMAK0PJpl0MOiXLOOOwZADm0gkLo";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å crypto-js (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)");
console.log("=====================================================");
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
function generateMsgSignature(clientId, timestamp, nonce, msgEncrypt) {
  const sortedStr = [clientId, timestamp, nonce, msgEncrypt].sort().join('');
  const hash = crypto.createHash('sha1').update(sortedStr).digest('hex');
  return hash;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
function generateAesDecrypt(dataEncrypt, clientId, clientSecret) {
  const aesKey = clientSecret;
  const key = CryptoJS.enc.Utf8.parse(aesKey);
  const iv = CryptoJS.enc.Utf8.parse(clientId);
  
  console.log(`  –ö–ª—é—á (UTF-8): ${key.toString(CryptoJS.enc.Hex)} (${key.sigBytes} –±–∞–π—Ç)`);
  console.log(`  IV (UTF-8): ${iv.toString(CryptoJS.enc.Hex)} (${iv.sigBytes} –±–∞–π—Ç)`);
  
  const decrypted = CryptoJS.AES.decrypt(dataEncrypt, key, {
    iv: iv,
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.Pkcs7
  });
  
  return decrypted.toString(CryptoJS.enc.Utf8);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testWithCryptoJS() {
  try {
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const calculatedSignature = generateMsgSignature(
      exampleClientId,
      officialExample.timestamp,
      officialExample.nonce,
      officialExample.dataEncrypt
    );
    
    console.log(`  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å: ${officialExample.signature}`);
    console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: ${calculatedSignature}`);
    console.log(`  –ü–æ–¥–ø–∏—Å—å: ${calculatedSignature === officialExample.signature ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (calculatedSignature !== officialExample.signature) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===");
    
    try {
      const decryptedData = generateAesDecrypt(
        officialExample.dataEncrypt,
        exampleClientId,
        exampleClientSecret
      );
      
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`üéâ –£–°–ü–ï–•! –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å crypto-js!`);
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${decryptError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testWithCryptoJS();
