#!/bin/bash

# AKOOL Webhook Decryption Script
# –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç AKOOL

echo "üîì AKOOL Webhook Decryption Script"
echo "=================================="

# –î–∞–Ω–Ω—ã–µ –∏–∑ webhook (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
DATA_ENCRYPT="VzUJ0xiILQxxcGD1BC3dEBstjHTCfB8oLTi/JKe0DQBMHiYOX8K7utv1c5z3gIh/SFw/10oYoy1b2HDNEiB3ErogTUi1p+LgZm2CLPmd9RL/puYDQ02CaP+e72+2PhI7S5upOSHW3rNz6g9Alfng4903lNGdPDtwF+1m0LHt9yIfuao7cvJL+PXVQWumSUqj/g0H2B1C4GIEEwEJxroYtQ=="
SIGNATURE="fd9af605124f0d2b386bc80fac11ea0420911142"
TIMESTAMP="1757189387922"
NONCE="3243"

echo "üìä Webhook Data:"
echo "  Data Encrypt: $DATA_ENCRYPT"
echo "  Signature: $SIGNATURE"
echo "  Timestamp: $TIMESTAMP"
echo "  Nonce: $NONCE"
echo ""

# –ú–µ—Ç–æ–¥ 1: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
echo "üîç –ú–µ—Ç–æ–¥ 1: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo "================================"
echo "$DATA_ENCRYPT" | base64 -d 2>/dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    echo ""
else
    echo "‚ùå Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
    echo ""
fi

# –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
echo "üîç –ú–µ—Ç–æ–¥ 2: JSON –ø–∞—Ä—Å–∏–Ω–≥ Base64"
echo "==============================="
DECODED_BASE64=$(echo "$DATA_ENCRYPT" | base64 -d 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "Decoded: $DECODED_BASE64"
    echo "$DECODED_BASE64" | jq . 2>/dev/null
    if [ $? -eq 0 ]; then
        echo "‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω"
    else
        echo "‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è"
    fi
else
    echo "‚ùå Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
fi
echo ""

# –ú–µ—Ç–æ–¥ 3: XOR —Å nonce
echo "üîç –ú–µ—Ç–æ–¥ 3: XOR —Å nonce"
echo "======================="
python3 -c "
import base64
import binascii

data_encrypt = '$DATA_ENCRYPT'
nonce = '$NONCE'

try:
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    data_bytes = base64.b64decode(data_encrypt)
    print(f'Data length: {len(data_bytes)} bytes')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º nonce –≤ hex
    nonce_bytes = bytes.fromhex(nonce)
    print(f'Nonce length: {len(nonce_bytes)} bytes')
    
    # XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    decrypted = bytearray()
    for i in range(len(data_bytes)):
        decrypted.append(data_bytes[i] ^ nonce_bytes[i % len(nonce_bytes)])
    
    result = decrypted.decode('utf-8', errors='ignore')
    print(f'XOR Result: {result}')
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥
    import json
    try:
        json_data = json.loads(result)
        print('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ XOR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—à–µ–Ω:')
        print(json.dumps(json_data, indent=2))
    except:
        print('‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ XOR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è')
        
except Exception as e:
    print(f'‚ùå XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}')
"
echo ""

# –ú–µ—Ç–æ–¥ 4: –ü–æ–ø—ã—Ç–∫–∞ —Å signature –∫–∞–∫ –∫–ª—é—á
echo "üîç –ú–µ—Ç–æ–¥ 4: Signature –∫–∞–∫ –∫–ª—é—á"
echo "=============================="
python3 -c "
import base64
import binascii
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

data_encrypt = '$DATA_ENCRYPT'
signature = '$SIGNATURE'
nonce = '$NONCE'

try:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º signature –≤ –∫–ª—é—á
    key = bytes.fromhex(signature)
    print(f'Key length: {len(key)} bytes')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º nonce –≤ IV
    iv = bytes.fromhex(nonce)
    print(f'IV length: {len(iv)} bytes')
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data_bytes = base64.b64decode(data_encrypt)
    print(f'Data length: {len(data_bytes)} bytes')
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(data_bytes) + decryptor.finalize()
    
    result = decrypted.decode('utf-8', errors='ignore')
    print(f'AES Result: {result}')
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥
    import json
    try:
        json_data = json.loads(result)
        print('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ AES —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—à–µ–Ω:')
        print(json.dumps(json_data, indent=2))
    except:
        print('‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ AES —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è')
        
except Exception as e:
    print(f'‚ùå AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}')
"
echo ""

# –ú–µ—Ç–æ–¥ 5: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
echo "üîç –ú–µ—Ç–æ–¥ 5: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤"
echo "=================================="
python3 -c "
import base64
import string

data_encrypt = '$DATA_ENCRYPT'

try:
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    data_bytes = base64.b64decode(data_encrypt)
    print(f'Data length: {len(data_bytes)} bytes')
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    encodings = ['utf-8', 'latin-1', 'cp1252', 'ascii']
    
    for encoding in encodings:
        try:
            result = data_bytes.decode(encoding, errors='ignore')
            print(f'{encoding}: {result[:100]}...')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ JSON
            import json
            try:
                json_data = json.loads(result)
                print(f'‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ {encoding} —É—Å–ø–µ—à–µ–Ω:')
                print(json.dumps(json_data, indent=2))
                break
            except:
                pass
        except:
            pass
            
except Exception as e:
    print(f'‚ùå –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}')
"
echo ""

echo "üéØ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é AKOOL –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏."
