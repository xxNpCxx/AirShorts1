# üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram –±–æ—Ç–æ–≤

## üéØ –û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:

### 1. –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
src/
‚îú‚îÄ‚îÄ users/           # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚îú‚îÄ‚îÄ deals/           # –°–∏—Å—Ç–µ–º–∞ —Å–¥–µ–ª–æ–∫
‚îú‚îÄ‚îÄ referrals/       # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚îú‚îÄ‚îÄ pricing/         # –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
‚îú‚îÄ‚îÄ settings/        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚îú‚îÄ‚îÄ analytics/       # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
‚îî‚îÄ‚îÄ shared/          # –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
```

### 2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
```typescript
// ‚úÖ –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å
@Module({
  imports: [DatabaseModule, RedisModule],
  providers: [UsersService, UsersRepository],
  controllers: [UsersController],
  exports: [UsersService]
})
export class UsersModule {}
```

### 3. Dependency Injection
```typescript
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π DI –¥–ª—è —Å–ª–∞–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
@Injectable()
export class UsersService {
  constructor(
    private readonly usersRepository: UsersRepository,
    private readonly logger: LoggerService
  ) {}
}
```

## üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. Webhook vs Long Polling
```typescript
// ‚úÖ Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if (process.env.NODE_ENV === 'production') {
  await bot.setWebhook(`${process.env.WEBHOOK_URL}/webhook`);
} else {
  // Long polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  bot.launch();
}
```

### 2. Middleware –ø–æ—Ä—è–¥–æ–∫
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ middleware
bot.use(session());           // 1. –°–µ—Å—Å–∏–∏
bot.use(Stage.middleware());  // 2. FSM —Å—Ü–µ–Ω—ã
bot.use(adminMiddleware);     // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
bot.use(loggingMiddleware);   // 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```

### 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
```typescript
// ‚úÖ –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
bot.command('start', handleStart);
bot.command('help', handleHelp);
bot.command('settings', handleSettings);

// ‚ùå –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
```

## üì± UX –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:

### 1. FSM (Finite State Machine)
```typescript
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ü–µ–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
const exchangeScene = new Scene('exchange');
exchangeScene.enter((ctx) => {
  ctx.reply('üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:', currencyKeyboard);
});

exchangeScene.on('callback_query', async (ctx) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
});
```

### 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
```typescript
// ‚úÖ –†–∞–∑–¥–µ–ª—è–π —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
export class KeyboardService {
  // Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
  createInlineKeyboard(buttons: Button[]): InlineKeyboardMarkup {
    return { inline_keyboard: buttons };
  }

  // Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  createReplyKeyboard(buttons: string[]): ReplyKeyboardMarkup {
    return { keyboard: buttons.map(text => [{ text }]) };
  }
}
```

### 3. –ù–∞–≤–∏–≥–∞—Ü–∏—è
```typescript
// ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
export class NavigationService {
  async goToMainMenu(ctx: Context) {
    await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenuKeyboard);
  }

  async goBack(ctx: Context) {
    // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
  }
}
```

## üóÑÔ∏è –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò:

### 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
```typescript
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
@Injectable()
export class UsersRepository {
  async findByTelegramId(telegramId: number): Promise<User> {
    return this.db.query(
      'SELECT * FROM users WHERE telegram_id = $1',
      [telegramId]
    );
  }
}
```

### 2. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
```typescript
// ‚úÖ –ö–µ—à–∏—Ä—É–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
@Injectable()
export class PricingService {
  async getCurrentPrice(currency: string): Promise<number> {
    const cached = await this.redis.get(`price:${currency}`);
    if (cached) return parseFloat(cached);

    const price = await this.fetchPrice(currency);
    await this.redis.setex(`price:${currency}`, 300, price.toString());
    return price;
  }
}
```

### 3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
```typescript
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async createDeal(userId: number, amount: number): Promise<Deal> {
  const client = await this.db.connect();
  try {
    await client.query('BEGIN');
    
    const deal = await this.dealsRepository.create(client, { userId, amount });
    await this.usersRepository.updateBalance(client, userId, -amount);
    
    await client.query('COMMIT');
    return deal;
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}
```

## üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:

### 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
```typescript
// ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–π –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
export class ValidationService {
  validateAmount(amount: string): number {
    const num = parseFloat(amount);
    if (isNaN(num) || num <= 0 || num > 1000000) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
    }
    return num;
  }
}
```

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
```typescript
// ‚úÖ Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
export const adminMiddleware = async (ctx: Context, next: NextFunction) => {
  const isAdmin = ctx.from?.id.toString() === process.env.ADMIN_USER_ID;
  if (!isAdmin) {
    return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
  }
  return next();
};
```

### 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```typescript
// ‚úÖ –õ–æ–≥–∏—Ä—É–π –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
export class LoggingService {
  logUserAction(userId: number, action: string, details?: any) {
    this.logger.info(`[User ${userId}] ${action}`, details);
  }

  logError(error: Error, context: string) {
    this.logger.error(`[${context}] –û—à–∏–±–∫–∞:`, error);
  }
}
```

## üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê:

### 1. –ú–µ—Ç—Ä–∏–∫–∏
```typescript
// ‚úÖ –°–æ–±–∏—Ä–∞–π –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export class MetricsService {
  async incrementMetric(name: string, value: number = 1) {
    await this.redis.incrby(`metric:${name}`, value);
  }

  async getMetric(name: string): Promise<number> {
    const value = await this.redis.get(`metric:${name}`);
    return value ? parseInt(value) : 0;
  }
}
```

### 2. Health checks
```typescript
// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
@Controller('health')
export class HealthController {
  @Get()
  async check() {
    const dbStatus = await this.checkDatabase();
    const redisStatus = await this.checkRedis();
    
    return {
      status: dbStatus && redisStatus ? 'healthy' : 'unhealthy',
      timestamp: new Date().toISOString(),
      services: { database: dbStatus, redis: redisStatus }
    };
  }
}
```

## üìã –ß–ï–ö-–õ–ò–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:
- [ ] –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- [ ] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- [ ] Dependency Injection
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ middleware
- [ ] –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
- [ ] FSM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
- [ ] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
- [ ] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
- [ ] –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- [ ] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- [ ] –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
- [ ] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
- [ ] –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- [ ] Health checks

---

**–ü–æ–º–Ω–∏: –•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –∑–∞–ª–æ–≥ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏!**
description:
globs:
alwaysApply: false
---
