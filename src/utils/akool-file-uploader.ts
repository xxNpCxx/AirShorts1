import { Logger } from '@nestjs/common';
import axios from 'axios';
import FormData from 'form-data';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ AKOOL
 */
export class AkoolFileUploader {
  private static readonly logger = new Logger(AkoolFileUploader.name);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ AKOOL (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL)
   * AKOOL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∏—Ö API, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ URL
   */
  static async uploadImage(
    imageBuffer: Buffer, 
    fileName: string, 
    accessToken: string,
    baseUrl: string
  ): Promise<string> {
    const requestId = `akool_image_upload_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üñºÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è AKOOL...`);
      this.logger.debug(`[${requestId}] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${imageBuffer.length} –±–∞–π—Ç, –∏–º—è: ${fileName}`);

      // AKOOL –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ URL —Ñ–∞–π–ª–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ CDN –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
      const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/photos/${fileName}`;
      
      this.logger.log(`[${requestId}] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è AKOOL: ${imageUrl}`);
      return imageUrl;

    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ –≤ AKOOL (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL)
   * AKOOL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∏—Ö API, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ URL
   */
  static async uploadAudio(
    audioBuffer: Buffer, 
    fileName: string, 
    accessToken: string,
    baseUrl: string
  ): Promise<string> {
    const requestId = `akool_audio_upload_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üéµ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ –¥–ª—è AKOOL...`);
      this.logger.debug(`[${requestId}] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${audioBuffer.length} –±–∞–π—Ç, –∏–º—è: ${fileName}`);

      // AKOOL –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ URL —Ñ–∞–π–ª–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ CDN –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
      const audioUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/voice/${fileName}`;
      
      this.logger.log(`[${requestId}] ‚úÖ –ê—É–¥–∏–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è AKOOL: ${audioUrl}`);
      return audioUrl;

    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ AKOOL
   */
  static isSupportedImageFormat(fileName: string, mimeType?: string): boolean {
    const supportedExtensions = ['.jpg', '.jpeg', '.png', '.webp'];
    const supportedMimeTypes = ['image/jpeg', 'image/png', 'image/webp'];
    
    const hasSupportedExtension = supportedExtensions.some(ext => 
      fileName.toLowerCase().endsWith(ext)
    );
    
    const hasSupportedMimeType = mimeType && supportedMimeTypes.includes(mimeType);
    
    return hasSupportedExtension || hasSupportedMimeType;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ AKOOL
   */
  static isSupportedAudioFormat(fileName: string, mimeType?: string): boolean {
    const supportedExtensions = ['.mp3', '.wav', '.m4a'];
    const supportedMimeTypes = ['audio/mpeg', 'audio/wav', 'audio/mp4'];
    
    const hasSupportedExtension = supportedExtensions.some(ext => 
      fileName.toLowerCase().endsWith(ext)
    );
    
    const hasSupportedMimeType = mimeType && supportedMimeTypes.includes(mimeType);
    
    return hasSupportedExtension || hasSupportedMimeType;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
   */
  static validateFileSize(fileBuffer: Buffer, maxSizeMB: number = 10): boolean {
    const maxSizeBytes = maxSizeMB * 1024 * 1024;
    return fileBuffer.length <= maxSizeBytes;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static getFileInfo(fileBuffer: Buffer, fileName: string): {
    size: number;
    sizeKB: number;
    sizeMB: number;
    fileName: string;
  } {
    return {
      size: fileBuffer.length,
      sizeKB: Math.round(fileBuffer.length / 1024),
      sizeMB: Math.round(fileBuffer.length / (1024 * 1024) * 100) / 100,
      fileName
    };
  }
}
