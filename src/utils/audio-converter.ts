import { Logger } from '@nestjs/common';
import ffmpeg from 'fluent-ffmpeg';
import { promisify } from 'util';
import { writeFile, unlink } from 'fs/promises';
import { join } from 'path';
import { tmpdir } from 'os';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
 */
export class AudioConverter {
  private static readonly logger = new Logger(AudioConverter.name);

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç OGA/OGG —Ñ–∞–π–ª –≤ MP3
   */
  static async convertOgaToMp3(audioBuffer: Buffer, originalFileName?: string): Promise<Buffer> {
    const requestId = `audio_convert_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;

    try {
      this.logger.log(`[${requestId}] üîÑ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é OGA –≤ MP3...`);
      this.logger.debug(`[${requestId}] –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${audioBuffer.length} –±–∞–π—Ç`);

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const tempDir = tmpdir();
      const inputFile = join(tempDir, `input_${requestId}.oga`);
      const outputFile = join(tempDir, `output_${requestId}.mp3`);

      try {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        await writeFile(inputFile, audioBuffer);
        this.logger.debug(`[${requestId}] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${inputFile}`);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é ffmpeg
        await this.convertWithFfmpeg(inputFile, outputFile, requestId);

        // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultBuffer = await import('fs').then(fs => fs.promises.readFile(outputFile));

        this.logger.log(`[${requestId}] ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        this.logger.debug(`[${requestId}] –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${resultBuffer.length} –±–∞–π—Ç`);

        return resultBuffer;
      } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try {
          await unlink(inputFile).catch(() => {
            this.logger.debug(`[${requestId}] –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω: ${inputFile}`);
          });
          await unlink(outputFile).catch(() => {
            this.logger.debug(`[${requestId}] –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω: ${outputFile}`);
          });
          this.logger.debug(`[${requestId}] –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        } catch (cleanupError) {
          this.logger.warn(`[${requestId}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:`, cleanupError);
        }
      }
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, error);
      throw new Error(
        `Failed to convert audio: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
   */
  private static async convertWithFfmpeg(
    inputFile: string,
    outputFile: string,
    requestId: string
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      ffmpeg(inputFile)
        .toFormat('mp3')
        .audioCodec('libmp3lame')
        .audioBitrate(128)
        .audioChannels(1)
        .audioFrequency(22050)
        .on('start', commandLine => {
          this.logger.debug(`[${requestId}] FFmpeg –∫–æ–º–∞–Ω–¥–∞: ${commandLine}`);
        })
        .on('progress', progress => {
          this.logger.debug(`[${requestId}] –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.percent}%`);
        })
        .on('end', () => {
          this.logger.debug(`[${requestId}] FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          resolve();
        })
        .on('error', error => {
          this.logger.error(`[${requestId}] FFmpeg –æ—à–∏–±–∫–∞:`, error);
          reject(error);
        })
        .save(outputFile);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
   */
  static needsConversion(fileName: string, mimeType?: string): boolean {
    const ogaExtensions = ['.oga', '.ogg'];
    const ogaMimeTypes = ['audio/ogg', 'audio/oga'];

    const hasOgaExtension = ogaExtensions.some(ext => fileName.toLowerCase().endsWith(ext));

    const hasOgaMimeType = mimeType && ogaMimeTypes.includes(mimeType);

    return hasOgaExtension || hasOgaMimeType;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç MIME —Ç–∏–ø –¥–ª—è MP3
   */
  static getMp3MimeType(): string {
    return 'audio/mpeg';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è MP3
   */
  static getMp3Extension(): string {
    return '.mp3';
  }
}
