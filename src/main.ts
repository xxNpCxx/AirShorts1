import 'reflect-metadata';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { CustomLoggerService } from './logger/logger.service';
import { json } from 'express';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
  app.use(json({ limit: '10mb' }));
  
  // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
  let logger: CustomLoggerService;
  try {
    logger = app.get(CustomLoggerService);
  } catch (error) {
    console.log('‚ö†Ô∏è CustomLoggerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.log');
    logger = {
      log: (message: string, context?: string) => console.log(`[LOG] [${context || 'App'}] ${message}`),
      error: (message: string, trace?: string, context?: string) => console.error(`[ERROR] [${context || 'App'}] ${message}`, trace || ''),
      warn: (message: string, context?: string) => console.warn(`[WARN] [${context || 'App'}] ${message}`),
      debug: (message: string, context?: string) => console.log(`[DEBUG] [${context || 'App'}] ${message}`),
      verbose: (message: string, context?: string) => console.log(`[VERBOSE] [${context || 'App'}] ${message}`),
      telegramUpdate: (update: any, context?: string) => {
        const type = update.message ? 'message' : (update.callback_query ? 'callback_query' : 'other');
        const userId = update.message?.from?.id || update.callback_query?.from?.id;
        const username = update.message?.from?.username || update.callback_query?.from?.username;
        const text = update.message?.text;
        const callback = update.callback_query?.data;
        console.log(`[DEBUG] [${context || 'Webhook'}] Telegram Update: type=${type}, userId=${userId}, username=${username}, text="${text}", callback="${callback}"`);
      }
    } as CustomLoggerService;
  }
  
  logger.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...', 'Bootstrap');
  logger.debug(`Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`, 'Bootstrap');
  logger.debug(`NODE_ENV: ${process.env.NODE_ENV || 'development'}`, 'Bootstrap');

  // Middleware –¥–ª—è –±–æ—Ç–∞
  const bot = app.get<Telegraf>(getBotToken());
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  bot.use(async (ctx: any, next) => {
    logger.telegramUpdate(ctx.update, 'BotMiddleware');
    return next();
  });
  
  // Middleware –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
  bot.use(async (ctx: any, next) => {
    if (ctx.message && typeof ctx.message.text === 'string' && ctx.message.text.startsWith('/start')) {
      logger.debug(`Middleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'StartCommand');
      if (ctx.scene && ctx.scene.current) {
        try { await ctx.scene.leave(); } catch {}
      }
      if (ctx.session) { ctx.session = {}; }
    }
    if (ctx.message?.text) {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'MessageHandler');
    }
    return next();
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const port = Number(process.env.PORT) || 3000;
  await app.listen(port);
  logger.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, 'Bootstrap');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
  try {
    const webhookUrl = process.env.WEBHOOK_URL || 'https://airshorts1.onrender.com';
    const webhookPath = `${webhookUrl}/webhook`;
    
    logger.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: ${webhookPath}`, 'Bootstrap');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å webhook
    const currentWebhookInfo = await bot.telegram.getWebhookInfo();
    logger.log(`üì° –¢–µ–∫—É—â–∏–π webhook —Å—Ç–∞—Ç—É—Å: ${currentWebhookInfo.url || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'Bootstrap');
    
    // –ï—Å–ª–∏ webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π URL, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if (currentWebhookInfo.url && currentWebhookInfo.url !== webhookPath) {
      logger.log(`üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook: ${currentWebhookInfo.url}`, 'Bootstrap');
      logger.log(`   –ù–æ–≤—ã–π webhook –±—É–¥–µ—Ç: ${webhookPath}`, 'Bootstrap');
      await bot.telegram.deleteWebhook();
      logger.log(`‚úÖ –°—Ç–∞—Ä—ã–π webhook —Å–±—Ä–æ—à–µ–Ω`, 'Bootstrap');
    }
    
    // –ï—Å–ª–∏ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (currentWebhookInfo.url === webhookPath && currentWebhookInfo.last_error_message) {
      logger.log(`‚ö†Ô∏è Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏: ${currentWebhookInfo.last_error_message}`, 'Bootstrap');
      logger.log(`üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫`, 'Bootstrap');
      await bot.telegram.deleteWebhook();
      logger.log(`‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏`, 'Bootstrap');
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å pending updates, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (currentWebhookInfo.pending_update_count > 0) {
      logger.log(`üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${currentWebhookInfo.pending_update_count}`, 'Bootstrap');
      logger.log(`‚ÑπÔ∏è Pending updates –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ webhook`, 'Bootstrap');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    logger.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook: ${webhookPath}`, 'Bootstrap');
    await bot.telegram.setWebhook(webhookPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const webhookInfo = await bot.telegram.getWebhookInfo();
    logger.log(`üì° Webhook —Å—Ç–∞—Ç—É—Å: ${webhookInfo.url}`, 'Bootstrap');
    logger.log(`‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`, 'Bootstrap');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ webhook
    logger.debug(`Webhook –¥–µ—Ç–∞–ª–∏: ${JSON.stringify(webhookInfo)}`, 'Bootstrap');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (webhookInfo.url !== webhookPath) {
      logger.warn(`‚ö†Ô∏è Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å ${webhookPath}, –ø–æ–ª—É—á–µ–Ω–æ ${webhookInfo.url}`, 'Bootstrap');
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    logger.log(`üìä Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, 'Bootstrap');
    logger.log(`   - URL: ${webhookInfo.url}`, 'Bootstrap');
    logger.log(`   - Pending updates: ${webhookInfo.pending_update_count}`, 'Bootstrap');
    logger.log(`   - Last error: ${webhookInfo.last_error_message || '–Ω–µ—Ç'}`, 'Bootstrap');
    logger.log(`   - Last error date: ${webhookInfo.last_error_date || '–Ω–µ—Ç'}`, 'Bootstrap');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å pending updates, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (webhookInfo.pending_update_count > 0) {
      logger.log(`üì• –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`, 'Bootstrap');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (webhookInfo.url === webhookPath) {
      logger.log(`üéØ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, 'Bootstrap');
    } else {
      logger.error(`‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!`, 'Bootstrap');
      logger.error(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${webhookPath}`, 'Bootstrap');
      logger.error(`   –ü–æ–ª—É—á–µ–Ω–æ: ${webhookInfo.url}`, 'Bootstrap');
    }
    
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${error}`, undefined, 'Bootstrap');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    try {
      const webhookInfo = await bot.telegram.getWebhookInfo();
      logger.warn(`‚ö†Ô∏è –¢–µ–∫—É—â–∏–π webhook —Å—Ç–∞—Ç—É—Å: ${JSON.stringify(webhookInfo)}`, 'Bootstrap');
    } catch (webhookError) {
      logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook: ${webhookError}`, undefined, 'Bootstrap');
    }
  }
}

bootstrap();
