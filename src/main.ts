import "reflect-metadata";
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";
import { CustomLoggerService } from "./logger/logger.service";
import { json } from "express";

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: ["error", "warn", "log", "debug", "verbose"],
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
  app.use(json({ limit: "10mb" }));

  // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
  let logger: CustomLoggerService;
  try {
    logger = app.get(CustomLoggerService);
  } catch {
    console.log("‚ö†Ô∏è CustomLoggerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.log");
    logger = {
      log: (message: string, context?: string) =>
        console.log(`[LOG] [${context || "App"}] ${message}`),
      error: (message: string, trace?: string, context?: string) =>
        console.error(`[ERROR] [${context || "App"}] ${message}`, trace || ""),
      warn: (message: string, context?: string) =>
        console.warn(`[WARN] [${context || "App"}] ${message}`),
      debug: (message: string, context?: string) =>
        console.log(`[DEBUG] [${context || "App"}] ${message}`),
      verbose: (message: string, context?: string) =>
        console.log(`[VERBOSE] [${context || "App"}] ${message}`),
      telegramUpdate: (update: Record<string, unknown>, context?: string) => {
        const message = update.message as Record<string, unknown> | undefined;
        const callbackQuery = update.callback_query as
          | Record<string, unknown>
          | undefined;

        const type = message
          ? "message"
          : callbackQuery
            ? "callback_query"
            : "other";
        const userId =
          (message?.from as Record<string, unknown>)?.id ||
          (callbackQuery?.from as Record<string, unknown>)?.id;
        const username =
          (message?.from as Record<string, unknown>)?.username ||
          (callbackQuery?.from as Record<string, unknown>)?.username;
        const text = message?.text;
        const callback = callbackQuery?.data;
        console.log(
          `[DEBUG] [${context || "Webhook"}] Telegram Update: type=${type}, userId=${userId}, username=${username}, text="${text}", callback="${callback}"`,
        );
      },
    } as CustomLoggerService;
  }

  logger.log("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...", "Bootstrap");
  logger.debug(`Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`, "Bootstrap");
  logger.debug(
    `NODE_ENV: ${process.env.NODE_ENV || "development"}`,
    "Bootstrap",
  );
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  logger.debug(`BOT_TOKEN: ${process.env.BOT_TOKEN ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}`, "Bootstrap");
  logger.debug(`WEBHOOK_URL: ${process.env.WEBHOOK_URL || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}`, "Bootstrap");
  logger.debug(`PORT: ${process.env.PORT || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 3000"}`, "Bootstrap");

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const port = Number(process.env.PORT) || 3000;
  logger.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, "Bootstrap");
  await app.listen(port);
  logger.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, "Bootstrap");

  // Webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TelegrafModule
  logger.log(`üîß Webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TelegrafModule`, "Bootstrap");
  logger.log(`üì° Webhook URL: ${process.env.WEBHOOK_URL || "https://airshorts1.onrender.com"}/webhook`, "Bootstrap");
  logger.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`, "Bootstrap");
}

void bootstrap();
