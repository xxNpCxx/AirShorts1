import 'reflect-metadata';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { Telegraf } from 'telegraf';
import express from 'express';
import { getBotToken } from 'nestjs-telegraf';
import { CustomLoggerService } from './logger/logger.service';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });

  // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
  let logger: CustomLoggerService;
  try {
    logger = app.get(CustomLoggerService);
  } catch (error) {
    // Fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('‚ö†Ô∏è CustomLoggerService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.log');
    logger = {
      log: (message: string, context?: string) => console.log(`[LOG] [${context || 'App'}] ${message}`),
      error: (message: string, trace?: string, context?: string) => console.error(`[ERROR] [${context || 'App'}] ${message}`, trace || ''),
      warn: (message: string, context?: string) => console.warn(`[WARN] [${context || 'App'}] ${message}`),
      debug: (message: string, context?: string) => console.log(`[DEBUG] [${context || 'App'}] ${message}`),
      verbose: (message: string, context?: string) => console.log(`[VERBOSE] [${context || 'App'}] ${message}`),
      telegramUpdate: (update: any, context?: string) => {
        const type = update.message ? 'message' : (update.callback_query ? 'callback_query' : 'other');
        const userId = update.message?.from?.id || update.callback_query?.from?.id;
        const username = update.message?.from?.username || update.callback_query?.from?.username;
        const text = update.message?.text;
        const callback = update.callback_query?.data;
        console.log(`[DEBUG] [${context || 'Webhook'}] Telegram Update: type=${type}, userId=${userId}, username=${username}, text="${text}", callback="${callback}"`);
      }
    } as CustomLoggerService;
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
  logger.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...', 'Bootstrap');
  logger.debug(`–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${process.env.DEBUG || 'false'}`, 'Bootstrap');
  logger.debug(`Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`, 'Bootstrap');
  logger.debug(`NODE_ENV: ${process.env.NODE_ENV || 'development'}`, 'Bootstrap');

  // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
  const bot = app.get<Telegraf>(getBotToken());
  

  
  // Middleware –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ FSM –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
  bot.use(async (ctx: any, next) => {
    if (ctx.message && typeof ctx.message.text === 'string' && ctx.message.text.startsWith('/start')) {
      logger.debug(`Middleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'StartCommand');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤—Å–µ—Ö —Å—Ü–µ–Ω –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
      if (ctx.scene && ctx.scene.current) {
        try {
          await ctx.scene.leave();
          logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start', 'StartCommand');
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã: ${error}`, undefined, 'StartCommand');
        }
      }
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      if (ctx.session) {
        ctx.session = {};
        logger.debug('–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start', 'StartCommand');
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (ctx.message && ctx.message.text) {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'MessageHandler');
    }
    
    logger.debug(`Middleware: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É`, 'MessageHandler');
    return next();
  });
  
  // Webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ NestJS TelegrafModule
  // –ù–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
  logger.debug('Webhook –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ NestJS', 'Bootstrap');
  
  // Webhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ NestJS TelegrafModule
  // –ù–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  logger.debug('Webhook –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ NestJS', 'Bootstrap');
  
  const port = Number(process.env.PORT) || 3000;
  await app.listen(port);
  
  logger.log(`‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, 'Bootstrap');
  logger.debug(`Webhook –ø—É—Ç—å: ${process.env.WEBHOOK_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'Bootstrap');
  logger.debug(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`, 'Bootstrap');
  logger.debug(`Redis: ${process.env.REDIS_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'Bootstrap');
}

bootstrap();
