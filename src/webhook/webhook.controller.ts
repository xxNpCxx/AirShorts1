import { Controller, Post, Body, Res, HttpStatus, Inject } from '@nestjs/common';
import { Response } from 'express';
import { CustomLoggerService } from '../logger/logger.service';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { TelegramUpdate } from '../types';
import { isTelegramUpdate } from '../utils/type-guards';
import { UsersService } from '../users/users.service';

@Controller('webhook')
export class WebhookController {
  constructor(
    private readonly logger: CustomLoggerService,
    @Inject(getBotToken('airshorts1_bot')) private readonly bot: Telegraf,
    private readonly usersService: UsersService
  ) {}

  @Post()
  async handleWebhook(@Body() update: unknown, @Res() res: Response) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
      const isUpdateIsNull = update === null;
      const isUpdateIsUndefined = update === undefined;
      const isUpdateIsObject = typeof update === 'object';
      const isUpdateIsEmptyObject =
        isUpdateIsObject === true && Object.keys(update as object).length === 0;
      const isUpdateEmpty =
        isUpdateIsNull === true || isUpdateIsUndefined === true || isUpdateIsEmptyObject === true;
      if (isUpdateEmpty === true) {
        this.logger.warn('‚ö†Ô∏è Empty webhook received', 'WebhookController');
        res.status(HttpStatus.BAD_REQUEST).json({
          ok: false,
          error: 'Empty webhook data',
        });
        return;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.logger.debug(
        `üì• Webhook received: ${JSON.stringify(update, null, 2)}`,
        'WebhookController'
      );

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const isTelegramUpdateValid = isTelegramUpdate(update) === true;
      if (isTelegramUpdateValid === false) {
        // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        console.log('=== WEBHOOK VALIDATION ERROR ===');
        console.log('Received data:', JSON.stringify(update, null, 2));
        console.log('Data type:', typeof update);
        console.log('Is object:', typeof update === 'object');
        console.log('Is null:', update === null);
        console.log(
          'Has update_id:',
          update && typeof update === 'object' && 'update_id' in update
        );
        console.log(
          'update_id type:',
          update && typeof update === 'object' ? typeof (update as any).update_id : 'N/A'
        );
        console.log(
          'update_id value:',
          update && typeof update === 'object' ? (update as any).update_id : 'N/A'
        );
        console.log('================================');

        this.logger.error(
          `‚ùå Invalid Telegram update received. Data: ${JSON.stringify(update, null, 2)}`,
          undefined,
          'WebhookController'
        );
        res.status(HttpStatus.BAD_REQUEST).json({
          ok: false,
          error: 'Invalid Telegram update format',
        });
        return;
      }

      this.logger.log(`üì• Webhook –ø–æ–ª—É—á–µ–Ω: update_id=${update.update_id}`, 'WebhookController');

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateType = this.getUpdateType(update);
      this.logger.log(`üìã –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateType}`, 'WebhookController');

      const isHasMessageText =
        update.message !== undefined &&
        update.message !== null &&
        update.message.text !== undefined &&
        update.message.text !== null;
      const isHasCallbackData =
        update.callback_query !== undefined &&
        update.callback_query !== null &&
        update.callback_query.data !== undefined &&
        update.callback_query.data !== null;
      const isHasInlineQuery =
        update.inline_query !== undefined &&
        update.inline_query !== null &&
        update.inline_query.query !== undefined &&
        update.inline_query.query !== null;

      if (isHasMessageText === true) {
        this.logger.log(
          `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${update.message.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${update.message.from?.id}`,
          'WebhookController'
        );
      } else if (isHasCallbackData === true) {
        this.logger.log(
          `üîò Callback query: "${update.callback_query.data}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${update.callback_query.from?.id}`,
          'WebhookController'
        );
      } else if (isHasInlineQuery === true) {
        this.logger.log(
          `üîç Inline query: "${update.inline_query.query}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${update.inline_query.from?.id}`,
          'WebhookController'
        );
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.ensureUserInDatabase(update);

      // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Telegraf –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É Update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegraf API
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      await this.bot.handleUpdate(update as any);

      this.logger.log(`‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`, 'WebhookController');

      res.status(HttpStatus.OK).json({ ok: true });
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error}`,
        error instanceof Error ? error.stack : undefined,
        'WebhookController'
      );

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        ok: false,
        error: 'Internal server error',
      });
    }
  }

  private getUpdateType(update: TelegramUpdate): string {
    if (update.message) return 'message';
    if (update.callback_query) return 'callback_query';
    if (update.inline_query) return 'inline_query';
    if (update.chosen_inline_result) return 'chosen_inline_result';
    if (update.channel_post) return 'channel_post';
    if (update.edited_message) return 'edited_message';
    if (update.edited_channel_post) return 'edited_channel_post';
    if (update.shipping_query) return 'shipping_query';
    if (update.pre_checkout_query) return 'pre_checkout_query';
    if (update.poll) return 'poll';
    if (update.poll_answer) return 'poll_answer';
    if (update.my_chat_member) return 'my_chat_member';
    if (update.chat_member) return 'chat_member';
    if (update.chat_join_request) return 'chat_join_request';
    return 'unknown';
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook'–∞
   * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
   */
  private async ensureUserInDatabase(update: TelegramUpdate): Promise<void> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      let user = null;

      if (update.message?.from) {
        user = update.message.from;
      } else if (update.callback_query?.from) {
        user = update.callback_query.from;
      } else if (update.inline_query?.from) {
        user = update.inline_query.from;
      } else if (update.chosen_inline_result?.from) {
        user = update.chosen_inline_result.from;
      } else if (update.shipping_query?.from) {
        user = update.shipping_query.from;
      } else if (update.pre_checkout_query?.from) {
        user = update.pre_checkout_query.from;
      } else if (update.poll_answer?.user) {
        user = update.poll_answer.user;
      } else if (update.my_chat_member?.from) {
        user = update.my_chat_member.from;
      } else if (update.chat_member?.from) {
        user = update.chat_member.from;
      } else if (update.chat_join_request?.from) {
        user = update.chat_join_request.from;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (user) {
        const isNewUser = await this.usersService.upsertFromContext({
          from: user,
        } as any);

        if (isNewUser) {
          this.logger.log(
            `üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: ${user.id} (@${user.username || '–±–µ–∑ username'})`,
            'WebhookController'
          );
        } else {
          this.logger.debug(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ: ${user.id}`, 'WebhookController');
        }
      } else {
        this.logger.debug('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webhook', 'WebhookController');
      }
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É: ${error}`,
        error instanceof Error ? error.stack : undefined,
        'WebhookController'
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook'–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }
}
