import { Inject, Injectable, Logger } from '@nestjs/common';
import { Pool } from 'pg';
import { PG_POOL } from '../database/database.module';
import {
  ReferralsTable,
  ReferralPaymentsTable,
  ReferralStatsTable,
  CreateReferralData,
  CreateReferralPaymentData,
  CreateReferralStatsData,
  ReferralQueryResult,
  ReferralPaymentQueryResult,
  ReferralStatsQueryResult,
  ReferralStats,
  REFERRAL_BONUS_RATES,
} from '../types/database.types';

@Injectable()
export class ReferralsService {
  private readonly logger = new Logger(ReferralsService.name);

  constructor(@Inject(PG_POOL) private readonly pool: Pool) {}

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateReferralCode(userId: number): Promise<string> {
    try {
      const result = await this.pool.query('SELECT generate_referral_code($1) as code', [userId]);
      return result.rows[0].code;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getOrCreateReferralCode(userId: number): Promise<string> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingCode = await this.pool.query(
        'SELECT referral_code FROM users WHERE id = $1 AND referral_code IS NOT NULL',
        [userId]
      );

      if (existingCode.rows.length > 0) {
        return existingCode.rows[0].referral_code;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
      const code = await this.generateReferralCode(userId);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.pool.query('UPDATE users SET referral_code = $1 WHERE id = $2', [code, userId]);

      return code;
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
        error
      );
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
   */
  async createReferral(data: CreateReferralData): Promise<ReferralQueryResult> {
    try {
      const result = await this.pool.query(
        `INSERT INTO referrals (referrer_id, referred_id, referral_code, level)
         VALUES ($1, $2, $3, $4)
         RETURNING *`,
        [data.referrer_id, data.referred_id, data.referral_code, data.level]
      );

      const referral = result.rows[0] as ReferralsTable;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateReferralStats(data.referrer_id);

      return { referral };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
      return { referral: null, error: error.message };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
   */
  async processReferralRegistration(
    referrerCode: string,
    newUserId: number
  ): Promise<ReferralQueryResult> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      const referrerResult = await this.pool.query(
        'SELECT id FROM users WHERE referral_code = $1',
        [referrerCode]
      );

      if (referrerResult.rows.length === 0) {
        return { referral: null, error: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const referrerId = referrerResult.rows[0].id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å–∞–º –Ω–∞ —Å–µ–±—è
      if (referrerId === newUserId) {
        return { referral: null, error: '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' };
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
      const referralData: CreateReferralData = {
        referrer_id: referrerId,
        referred_id: newUserId,
        referral_code: referrerCode,
        level: 1,
      };

      return await this.createReferral(referralData);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:', error);
      return { referral: null, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getReferralStats(userId: number): Promise<ReferralStatsQueryResult> {
    try {
      this.logger.log(
        `üîç [ReferralsService] getReferralStats called for user ${userId}`,
        'ReferralsService'
      );

      const result = await this.pool.query('SELECT * FROM referral_stats WHERE user_id = $1', [
        userId,
      ]);
      this.logger.log(
        `üîç [ReferralsService] Query result: ${result.rows.length} rows found`,
        'ReferralsService'
      );

      if (result.rows.length === 0) {
        this.logger.log(
          `üîç [ReferralsService] No stats found, creating new stats for user ${userId}`,
          'ReferralsService'
        );
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await this.updateReferralStats(userId);
        const newResult = await this.pool.query('SELECT * FROM referral_stats WHERE user_id = $1', [
          userId,
        ]);
        this.logger.log(
          `üîç [ReferralsService] New stats created: ${newResult.rows.length} rows`,
          'ReferralsService'
        );
        return { referralStats: newResult.rows[0] as ReferralStatsTable };
      }

      this.logger.log(`‚úÖ [ReferralsService] Stats found for user ${userId}`, 'ReferralsService');
      return { referralStats: result.rows[0] as ReferralStatsTable };
    } catch (error) {
      this.logger.error(
        `‚ùå [ReferralsService] Error getting referral stats for user ${userId}:`,
        error
      );
      return { referralStats: null, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–≤–Ω—è–º
   */
  async getUserReferrals(userId: number, level?: number): Promise<ReferralsTable[]> {
    try {
      let query = `
        SELECT r.*, u.username, u.first_name, u.last_name
        FROM referrals r
        JOIN users u ON r.referred_id = u.id
        WHERE r.referrer_id = $1
      `;
      const params = [userId];

      if (level) {
        query += ' AND r.level = $2';
        params.push(level);
      }

      query += ' ORDER BY r.created_at DESC';

      const result = await this.pool.query(query, params);
      return result.rows as ReferralsTable[];
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserPayments(userId: number): Promise<ReferralPaymentsTable[]> {
    try {
      const result = await this.pool.query(
        `SELECT rp.*, u.username, u.first_name, u.last_name
         FROM referral_payments rp
         JOIN referrals r ON rp.referral_id = r.id
         JOIN users u ON rp.payer_id = u.id
         WHERE r.referrer_id = $1
         ORDER BY rp.created_at DESC`,
        [userId]
      );

      return result.rows as ReferralPaymentsTable[];
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return [];
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
   */
  async processPayment(
    payerUserId: number,
    amount: number,
    paymentReference?: string
  ): Promise<boolean> {
    try {
      await this.pool.query('SELECT process_referral_payment($1, $2, $3)', [
        payerUserId,
        amount,
        paymentReference,
      ]);

      this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ ${amount} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payerUserId}`);
      return true;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payerUserId}:`, error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateReferralStats(userId: number): Promise<void> {
    try {
      this.logger.log(
        `üîç [ReferralsService] updateReferralStats called for user ${userId}`,
        'ReferralsService'
      );
      await this.pool.query('SELECT update_referral_stats($1)', [userId]);
      this.logger.log(
        `‚úÖ [ReferralsService] updateReferralStats completed for user ${userId}`,
        'ReferralsService'
      );
    } catch (error) {
      this.logger.error(`‚ùå [ReferralsService] Error updating stats for user ${userId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async getSystemStats(): Promise<ReferralStats> {
    try {
      const result = await this.pool.query(`
        SELECT 
          COUNT(DISTINCT r.referrer_id) as active_referrers,
          COUNT(r.id) as total_referrals,
          COALESCE(SUM(rp.amount), 0) as total_earned,
          json_object_agg(
            r.level, 
            level_counts.count
          ) as referrals_by_level
        FROM referrals r
        LEFT JOIN referral_payments rp ON r.id = rp.referral_id AND rp.status = 'paid'
        LEFT JOIN (
          SELECT level, COUNT(*) as count
          FROM referrals
          GROUP BY level
        ) level_counts ON r.level = level_counts.level
      `);

      const topReferrersResult = await this.pool.query(`
        SELECT 
          u.id as user_id,
          u.username,
          u.first_name,
          rs.total_referrals,
          rs.total_earned
        FROM referral_stats rs
        JOIN users u ON rs.user_id = u.id
        ORDER BY rs.total_earned DESC
        LIMIT 10
      `);

      const stats = result.rows[0];
      return {
        total_referrals: parseInt(stats.total_referrals) || 0,
        active_referrers: parseInt(stats.active_referrers) || 0,
        total_earned: parseFloat(stats.total_earned) || 0,
        referrals_by_level: stats.referrals_by_level || {},
        top_referrers: topReferrersResult.rows,
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        total_referrals: 0,
        active_referrers: 0,
        total_earned: 0,
        referrals_by_level: {},
        top_referrers: [],
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async getAllPayments(limit: number = 100, offset: number = 0): Promise<ReferralPaymentsTable[]> {
    try {
      const result = await this.pool.query(
        `SELECT rp.*, 
                u1.username as referrer_username, u1.first_name as referrer_first_name,
                u2.username as payer_username, u2.first_name as payer_first_name
         FROM referral_payments rp
         JOIN referrals r ON rp.referral_id = r.id
         JOIN users u1 ON r.referrer_id = u1.id
         JOIN users u2 ON rp.payer_id = u2.id
         ORDER BY rp.created_at DESC
         LIMIT $1 OFFSET $2`,
        [limit, offset]
      );

      return result.rows as ReferralPaymentsTable[];
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createReferralLink(userId: number, botUsername: string): Promise<string> {
    try {
      const code = await this.getOrCreateReferralCode(userId);
      return `https://t.me/${botUsername}?start=ref_${code}`;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
   */
  async isReferral(userId: number): Promise<boolean> {
    try {
      const result = await this.pool.query(
        'SELECT COUNT(*) as count FROM referrals WHERE referred_id = $1',
        [userId]
      );
      return parseInt(result.rows[0].count) > 0;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getReferrer(userId: number): Promise<{ referrer_id: number; level: number } | null> {
    try {
      const result = await this.pool.query(
        'SELECT referrer_id, level FROM referrals WHERE referred_id = $1 ORDER BY level ASC LIMIT 1',
        [userId]
      );

      if (result.rows.length === 0) {
        return null;
      }

      return {
        referrer_id: result.rows[0].referrer_id,
        level: result.rows[0].level,
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å
   */
  async getDailyReferralStats(date?: string): Promise<{
    totalReferrals: number;
    totalEarnings: number;
    level1Referrals: number;
    level2Referrals: number;
    level3Referrals: number;
    level1Earnings: number;
    level2Earnings: number;
    level3Earnings: number;
    topReferrers: Array<{
      user_id: number;
      total_referrals: number;
      total_earned: number;
    }>;
  }> {
    try {
      const targetDate = date || new Date().toISOString().split('T')[0];
      const startOfDay = `${targetDate} 00:00:00`;
      const endOfDay = `${targetDate} 23:59:59`;

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
      const statsResult = await this.pool.query(
        `
        SELECT 
          COUNT(DISTINCT r.id) as total_referrals,
          COALESCE(SUM(rp.amount), 0) as total_earnings,
          COUNT(DISTINCT CASE WHEN r.level = 1 THEN r.id END) as level1_referrals,
          COUNT(DISTINCT CASE WHEN r.level = 2 THEN r.id END) as level2_referrals,
          COUNT(DISTINCT CASE WHEN r.level = 3 THEN r.id END) as level3_referrals,
          COALESCE(SUM(CASE WHEN r.level = 1 THEN rp.amount ELSE 0 END), 0) as level1_earnings,
          COALESCE(SUM(CASE WHEN r.level = 2 THEN rp.amount ELSE 0 END), 0) as level2_earnings,
          COALESCE(SUM(CASE WHEN r.level = 3 THEN rp.amount ELSE 0 END), 0) as level3_earnings
        FROM referrals r
        LEFT JOIN referral_payments rp ON r.id = rp.referral_id 
          AND rp.created_at >= $1 AND rp.created_at <= $2
        WHERE r.created_at >= $1 AND r.created_at <= $2
      `,
        [startOfDay, endOfDay]
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å
      const topReferrersResult = await this.pool.query(
        `
        SELECT 
          r.referrer_id as user_id,
          COUNT(DISTINCT r.id) as total_referrals,
          COALESCE(SUM(rp.amount), 0) as total_earned
        FROM referrals r
        LEFT JOIN referral_payments rp ON r.id = rp.referral_id 
          AND rp.created_at >= $1 AND rp.created_at <= $2
        WHERE r.created_at >= $1 AND r.created_at <= $2
        GROUP BY r.referrer_id
        ORDER BY total_earned DESC, total_referrals DESC
        LIMIT 10
      `,
        [startOfDay, endOfDay]
      );

      const stats = statsResult.rows[0];
      const topReferrers = topReferrersResult.rows;

      return {
        totalReferrals: parseInt(stats.total_referrals) || 0,
        totalEarnings: parseFloat(stats.total_earnings) || 0,
        level1Referrals: parseInt(stats.level1_referrals) || 0,
        level2Referrals: parseInt(stats.level2_referrals) || 0,
        level3Referrals: parseInt(stats.level3_referrals) || 0,
        level1Earnings: parseFloat(stats.level1_earnings) || 0,
        level2Earnings: parseFloat(stats.level2_earnings) || 0,
        level3Earnings: parseFloat(stats.level3_earnings) || 0,
        topReferrers: topReferrers.map(row => ({
          user_id: row.user_id,
          total_referrals: parseInt(row.total_referrals) || 0,
          total_earned: parseFloat(row.total_earned) || 0,
        })),
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:`, error);
      return {
        totalReferrals: 0,
        totalEarnings: 0,
        level1Referrals: 0,
        level2Referrals: 0,
        level3Referrals: 0,
        level1Earnings: 0,
        level2Earnings: 0,
        level3Earnings: 0,
        topReferrers: [],
      };
    }
  }
}
