import { Injectable, Logger } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { Inject } from '@nestjs/common';

interface VoiceNotificationData {
  userId: number;
  chatId: number;
  voiceId: string;
  voiceName: string;
  status: string;
}

@Injectable()
export class VoiceNotificationService {
  private readonly logger = new Logger(VoiceNotificationService.name);
  private readonly pendingNotifications = new Map<string, VoiceNotificationData>();

  constructor(@Inject(getBotToken('airshorts1_bot')) private readonly bot: Telegraf) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
   */
  registerVoiceNotification(
    userId: number,
    chatId: number,
    voiceId: string,
    voiceName: string
  ): void {
    const notificationData: VoiceNotificationData = {
      userId,
      chatId,
      voiceId,
      voiceName,
      status: 'processing',
    };

    this.pendingNotifications.set(voiceId, notificationData);
    this.logger.log(`Registered voice notification for user ${userId}, voice ${voiceId}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
   */
  async notifyVoiceReady(voiceId: string): Promise<void> {
    const notification = this.pendingNotifications.get(voiceId);
    if (!notification) {
      this.logger.warn(`No pending notification found for voice ${voiceId}`);
      return;
    }

    try {
      await this.bot.telegram.sendMessage(
        notification.chatId,
        `üéâ –í–∞—à –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≥–æ—Ç–æ–≤!\n\n` +
          `üé§ –ì–æ–ª–æ—Å: ${notification.voiceName}\n` +
          `üÜî ID: ${voiceId.substring(0, 8)}...\n\n` +
          `‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º!\n\n` +
          `üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
      );

      this.pendingNotifications.delete(voiceId);
      this.logger.log(`Voice ready notification sent to user ${notification.userId}`);
    } catch (error) {
      this.logger.error(
        `Failed to send voice ready notification to user ${notification.userId}:`,
        error
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
   */
  async notifyVoiceError(voiceId: string, error: string): Promise<void> {
    const notification = this.pendingNotifications.get(voiceId);
    if (!notification) {
      this.logger.warn(`No pending notification found for voice ${voiceId}`);
      return;
    }

    try {
      await this.bot.telegram.sendMessage(
        notification.chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞\n\n` +
          `üé§ –ì–æ–ª–æ—Å: ${notification.voiceName}\n` +
          `üÜî ID: ${voiceId.substring(0, 8)}...\n\n` +
          `‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: ${error}\n\n` +
          `üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å.`
      );

      this.pendingNotifications.delete(voiceId);
      this.logger.log(`Voice error notification sent to user ${notification.userId}`);
    } catch (error) {
      this.logger.error(
        `Failed to send voice error notification to user ${notification.userId}:`,
        error
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getPendingNotifications(): VoiceNotificationData[] {
    return Array.from(this.pendingNotifications.values());
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
   */
  cleanupOldNotifications(): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    this.logger.debug(`Current pending notifications: ${this.pendingNotifications.size}`);
  }
}
