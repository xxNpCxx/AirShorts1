import { Update, Start, Ctx, Hears, Action, Command, On } from 'nestjs-telegraf';
import { UsersService } from '../users/users.service';
import { MenuService } from '../menu/menu.service';
import { KeyboardsService } from '../keyboards/keyboards.service';
import { ReferralsService } from '../referrals/referrals.service';
import { CustomLoggerService } from '../logger/logger.service';
import { Context } from 'telegraf';

@Update()
export class BotUpdate {
  constructor(
    private readonly _users: UsersService,
    private readonly _menu: MenuService,
    private readonly _kb: KeyboardsService,
    private readonly _referrals: ReferralsService,
    private readonly _logger: CustomLoggerService
  ) {
    this._logger.debug('BotUpdate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'BotUpdate');
    this._logger.log('üöÄ BotUpdate —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'BotUpdate');
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';

    this._logger.log(
      `üöÄ [@Start] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`,
      'BotUpdate'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ /start
    const referralMatch = messageText?.match(/\/start ref_(.+)/);
    const isReferralMatch = referralMatch !== null && referralMatch !== undefined;
    if (isReferralMatch === true) {
      const referrerCode = referralMatch[1];
      this._logger.log(
        `üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∫–æ–¥ ${referrerCode} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`,
        'BotUpdate'
      );

      try {
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await this._users.upsertFromContext(ctx);

        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userResult = await this.getUserFromDatabase(ctx.from.id);
        const isUserResultAbsent = userResult === null || userResult === undefined;
        if (isUserResultAbsent === true) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        const result = await this._referrals.processReferralRegistration(
          referrerCode,
          userResult.id
        );

        const isReferralCreated = result.referral !== null && result.referral !== undefined;
        if (isReferralCreated === true) {
          await ctx.reply(
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
              '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n' +
              'üí∞ –¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã —Å –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫.'
          );
        } else {
          await ctx.reply(
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
              '‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.'
          );
        }
      } catch (error) {
        this._logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      await ctx.reply('üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!');
      this._logger.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
    } catch (error) {
      this._logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`,
        undefined,
        'BotUpdate'
      );
    }

    try {
      await this._users.upsertFromContext(ctx);
      this._logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'BotUpdate');
      await this._menu.sendMainMenu(ctx);
      this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
    } catch (error) {
      this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error}`, undefined, 'BotUpdate');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
  @On('text')
  async onText(@Ctx() ctx: Context) {
    const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start
    if (messageText === '/start') {
      this._logger.log(
        `üöÄ [@On text] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`,
        'BotUpdate'
      );
      this._logger.log(`üìù [@On text] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${messageText}"`, 'BotUpdate');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        await ctx.reply('üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ @On text!');
        this._logger.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @On text', 'BotUpdate');
      } catch (error) {
        this._logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ @On text: ${error}`,
          undefined,
          'BotUpdate'
        );
      }

      try {
        await this._users.upsertFromContext(ctx);
        this._logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'BotUpdate');
        await this._menu.sendMainMenu(ctx);
        this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
      } catch (error) {
        this._logger.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ @On text: ${error}`,
          undefined,
          'BotUpdate'
        );
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      return;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
    const isCommand =
      messageText !== undefined && messageText !== null && messageText.startsWith('/') === true;
    if (isCommand === true) {
      this._logger.debug(`[@On text] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: "${messageText}"`, 'BotUpdate');
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞–ø—Ä—è–º—É—é - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤—Å–µ—Ö —Å—Ü–µ–Ω
    const { MainMenuHandler } = await import('../utils/main-menu-handler');
    const isMainMenuMessage = MainMenuHandler.isMainMenuMessage(messageText) === true;
    if (isMainMenuMessage === true) {
      this._logger.debug(
        `[@On text] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: "${messageText}" - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`,
        'BotUpdate'
      );

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const sceneContext = ctx as unknown as {
        scene: {
          current?: { id: string };
          leave: () => Promise<void>;
        };
      };

      const isInScene =
        sceneContext.scene !== undefined &&
        sceneContext.scene !== null &&
        sceneContext.scene.current !== undefined &&
        sceneContext.scene.current !== null;
      if (isInScene === true) {
        this._logger.debug(
          `[@On text] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã: "${sceneContext.scene.current.id}"`,
          'BotUpdate'
        );
        await sceneContext.scene.leave();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await this._users.upsertFromContext(ctx);
      await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate-OnText-ForceExit');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
    const sceneContext = ctx as unknown as {
      scene: {
        current?: { id: string };
      };
    };

    const isInSceneOnText =
      sceneContext.scene !== undefined &&
      sceneContext.scene !== null &&
      sceneContext.scene.current !== undefined &&
      sceneContext.scene.current !== null;
    if (isInSceneOnText === true) {
      this._logger.debug(
        `[@On text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`,
        'BotUpdate'
      );
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      return;
    }

    this._logger.debug(
      `[@On text] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: "${messageText}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id} (–≤–Ω–µ —Å—Ü–µ–Ω—ã)`,
      'BotUpdate'
    );

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    this._logger.debug(`[@On text] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"`, 'BotUpdate');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
  @On('photo')
  async onPhoto(@Ctx() ctx: Context) {
    this._logger.log(`üì∏ [@On photo] –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
    const sceneContext = ctx as unknown as {
      scene: {
        current?: { id: string };
      };
    };

    const isInSceneOnPhoto =
      sceneContext.scene !== undefined &&
      sceneContext.scene !== null &&
      sceneContext.scene.current !== undefined &&
      sceneContext.scene.current !== null;
    if (isInSceneOnPhoto === true) {
      this._logger.debug(
        `[@On photo] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`,
        'BotUpdate'
      );
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    await ctx.reply(
      'üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n' +
        "üé¨ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  @On('voice')
  async onVoice(@Ctx() ctx: Context) {
    this._logger.log(
      `üé§ [@On voice] –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`,
      'BotUpdate'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ
    const sceneContext = ctx as unknown as {
      scene: {
        current?: { id: string };
      };
    };

    const isInSceneOnVoice =
      sceneContext.scene !== undefined &&
      sceneContext.scene !== null &&
      sceneContext.scene.current !== undefined &&
      sceneContext.scene.current !== null;
    if (isInSceneOnVoice === true) {
      this._logger.debug(
        `[@On voice] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ "${sceneContext.scene.current.id}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotUpdate`,
        'BotUpdate'
      );
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ü–µ–Ω–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    await ctx.reply(
      'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n' +
        'üì∏ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n' +
        "üé¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    );
  }

  @Hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
  async onMainMenu(@Ctx() ctx: Context) {
    const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
    this._logger.log(
      `üè† [@Hears] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}, —Ç–µ–∫—Å—Ç: "${messageText}"`,
      'BotUpdate'
    );

    try {
      await this._users.upsertFromContext(ctx);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      const { MainMenuHandler } = await import('../utils/main-menu-handler');
      await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate');

      this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Hears', 'BotUpdate');
    } catch (error) {
      this._logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error}`, undefined, 'BotUpdate');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
    }
  }

  @Action('main_menu')
  async onMainMenuAction(@Ctx() ctx: Context) {
    this._logger.log(
      `üè† [@Action] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—Ä–æ—à–µ–Ω–æ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.id}`,
      'BotUpdate'
    );

    try {
      await ctx.answerCbQuery();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      const { MainMenuHandler } = await import('../utils/main-menu-handler');
      await MainMenuHandler.handleMainMenuRequest(ctx, 'BotUpdate-Action');

      this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @Action', 'BotUpdate');
    } catch (error) {
      this._logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ @Action: ${error}`,
        undefined,
        'BotUpdate'
      );
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É operator - –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ OperatorModule
  // @Command('operator') - –£–î–ê–õ–ï–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

  @Command('myid')
  async onMyId(@Ctx() ctx: Context) {
    const isCtxFromMissing = ctx.from === undefined || ctx.from === null;
    if (isCtxFromMissing === true) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    const userId = ctx.from.id;
    const username = ctx.from.username || '–Ω–µ –∑–∞–¥–∞–Ω';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';
    const message =
      `üÜî –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` +
      `üì± Chat ID: \`${userId}\`\n` +
      `üë§ Username: @${username}\n` +
      `üìù –ò–º—è: ${firstName} ${lastName}\n\n` +
      `üí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Chat ID –≤—ã–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ`;
    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  @Command('admin')
  async onAdmin(@Ctx() ctx: Context) {
    const isCtxFromMissingForAdmin = ctx.from === undefined || ctx.from === null;
    if (isCtxFromMissingForAdmin === true) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = await this.checkAdminStatus(ctx.from.id);
    const isNotAdmin = isAdmin === false;
    if (isNotAdmin === true) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    await ctx.reply('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', {
      reply_markup: this._kb.adminMainMenu().reply_markup,
    });
  }

  // –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å @Command('myid')
  @Hears(/^myid$/i)
  async onMyIdHears(@Ctx() ctx: Context) {
    return this.onMyId(ctx);
  }

  @Action('create_video')
  async onCreateVideo(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await (
      ctx as unknown as {
        scene: { enter: (sceneName: string) => Promise<void> };
      }
    ).scene.enter('video-generation');
  }

  @Action('referral_system')
  async onReferralSystem(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await (
      ctx as unknown as {
        scene: { enter: (sceneName: string) => Promise<void> };
      }
    ).scene.enter('referral');
  }

  @Action('payment_menu')
  async onPaymentMenu(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await (
      ctx as unknown as {
        scene: { enter: (sceneName: string) => Promise<void> };
      }
    ).scene.enter('payment');
  }

  @Action('admin_referral_menu')
  async onAdminReferralMenu(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await (
      ctx as unknown as {
        scene: { enter: (sceneName: string) => Promise<void> };
      }
    ).scene.enter('admin-referral');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
   */
  private async getUserFromDatabase(telegramId: number): Promise<{ id: number } | null> {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return { id: telegramId };
    } catch (error) {
      this._logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
   */
  private async checkAdminStatus(telegramId: number): Promise<boolean> {
    let isAdmin = true;
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      isAdmin = true;
    } catch (error) {
      this._logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞:', error);
      isAdmin = false;
    }
    return isAdmin;
  }
}
