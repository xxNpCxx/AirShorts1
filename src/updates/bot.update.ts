import { Update, Start, Ctx, Hears, Action, Command, On } from 'nestjs-telegraf';
import { UsersService } from '../users/users.service';
import { MenuService } from '../menu/menu.service';
import { SettingsService } from '../settings/settings.service';
import { CustomLoggerService } from '../logger/logger.service';

@Update()
export class BotUpdate {
  constructor(
    private readonly _users: UsersService, 
    private readonly _menu: MenuService, 
    private readonly _settings: SettingsService,
    private readonly _logger: CustomLoggerService
  ) {
    this._logger.debug('BotUpdate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'BotUpdate');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è webhook)
  @On('message')
  async onMessage(@Ctx() ctx: any) {
    this._logger.debug(`[@On message] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ webhook
    if (ctx.message) {
      this._logger.debug(`[@On message] –¢–∏–ø: ${ctx.message.text ? 'text' : 'other'}, –¢–µ–∫—Å—Ç: "${ctx.message.text || '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'}"`, 'BotUpdate');
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    return;
  }

  @Start()
  async onStart(@Ctx() ctx: any) {
    this._logger.debug(`[@Start] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
    try {
      await this._users.upsertFromContext(ctx);
      this._logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'BotUpdate');
      await this._menu.sendMainMenu(ctx);
      this._logger.debug('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'BotUpdate');
    } catch (error) {
      this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error}`, undefined, 'BotUpdate');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ @Start –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  @Hears('/start')
  async onStartHears(@Ctx() ctx: any) {
    this._logger.debug(`[@Hears] –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ @Hears –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
    return this.onStart(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  @On('text')
  async onText(@Ctx() ctx: any) {
    this._logger.debug(`[@On text] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: "${ctx.message?.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`, 'BotUpdate');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
    if (ctx.message?.text === '/start') {
      this._logger.debug(`[@On text] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start`, 'BotUpdate');
      return this.onStart(ctx);
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    this._logger.debug(`[@On text] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message?.text}"`, 'BotUpdate');
  }

  @Hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
  async onMainMenu(@Ctx() ctx: any) {
    await this._users.upsertFromContext(ctx);
    await this._menu.sendMainMenu(ctx);
  }

  @Action('main_menu')
  async onMainMenuAction(@Ctx() ctx: any) {
    await ctx.answerCbQuery();
    await this._menu.sendMainMenu(ctx);
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É operator - –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ OperatorModule
  // @Command('operator') - –£–î–ê–õ–ï–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

  @Command('myid')
  async onMyId(@Ctx() ctx: any) {
    const userId = ctx.from.id;
    const username = ctx.from.username || '–Ω–µ –∑–∞–¥–∞–Ω';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';
    const message =
      `üÜî –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` +
      `üì± Chat ID: \`${userId}\`\n` +
      `üë§ Username: @${username}\n` +
      `üìù –ò–º—è: ${firstName} ${lastName}\n\n` +
      `üí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Chat ID –≤—ã–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ`;
    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  // –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å @Command('myid')
  @Hears(/^myid$/i)
  async onMyIdHears(@Ctx() ctx: any) {
    return this.onMyId(ctx);
  }

  @Action('create_video')
  async onCreateVideo(@Ctx() ctx: any) {
    await ctx.answerCbQuery();
    await ctx.scene.enter('video-generation');
  }
}
