#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π (JavaScript –≤–µ—Ä—Å–∏—è)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node dist/migrate.js
 */

const { NestFactory } = require('@nestjs/core');
const { AppModule } = require('./app.module');
const { MigrationsService } = require('./migrations/migrations.service');

async function runMigrations() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');

  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
    const app = await NestFactory.createApplicationContext(AppModule, {
      logger: ['log', 'error', 'warn'],
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsService = app.get(MigrationsService);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const status = await migrationsService.getStatus();
    console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:');
    console.log(`   –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${status.total}`);
    console.log(`   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${status.executed}`);
    console.log(`   –û–∂–∏–¥–∞–µ—Ç: ${status.pending}`);

    if (status.pending > 0) {
      console.log('‚è≥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', status.pendingMigrations.join(', '));
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await migrationsService.forceRunMigrations();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const finalStatus = await migrationsService.getStatus();
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:');
    console.log(`   –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${finalStatus.total}`);
    console.log(`   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${finalStatus.executed}`);
    console.log(`   –û–∂–∏–¥–∞–µ—Ç: ${finalStatus.pending}`);

    await app.close();
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMigrations();
}

module.exports = { runMigrations };
