import { readFileSync, readdirSync, existsSync } from "fs";
import { join } from "path";
import { Client } from "pg";
import * as dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function runMigrations() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    await client.connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã migrations
    let tableExists = false;
    let hasNameColumn = false;
    let hasFilenameColumn = false;

    try {
      const tableCheck = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'migrations' 
        AND column_name = 'name'
      `);
      hasNameColumn = tableCheck.rows.length > 0;

      const filenameCheck = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'migrations' 
        AND column_name = 'filename'
      `);
      hasFilenameColumn = filenameCheck.rows.length > 0;

      tableExists = true;
      console.log("üèóÔ∏è –¢–∞–±–ª–∏—Ü–∞ migrations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } catch {
      console.log("üèóÔ∏è –¢–∞–±–ª–∏—Ü–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é");
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É migrations
    if (!tableExists) {
      console.log("üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É migrations...");
      await client.query(`
        CREATE TABLE migrations (
          id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL UNIQUE,
          executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —Å–æ–∑–¥–∞–Ω–∞");
    } else if (!hasNameColumn && !hasFilenameColumn) {
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É migrations...");
      try {
        await client.query(`
          ALTER TABLE migrations 
          ADD COLUMN name VARCHAR(255) UNIQUE
        `);
        await client.query(`
          ALTER TABLE migrations 
          ADD COLUMN executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        `);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
      } catch {
        console.log("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
      }
    } else if (hasFilenameColumn && !hasNameColumn) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å filename, –Ω–æ –Ω–µ—Ç name, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
      console.log("üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º filename –≤ name...");
      try {
        await client.query(`
          ALTER TABLE migrations 
          RENAME COLUMN filename TO name
        `);
        console.log("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ filename –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ name");
      } catch {
        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏");
      }
    } else {
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É");
    }

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ SQL —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    // –í production (Render) –ø–∞–ø–∫–∞ migrations –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    // –í development –ø–∞–ø–∫–∞ migrations –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ src/
    const migrationsDir = process.env.NODE_ENV === 'production' 
      ? join(process.cwd(), "migrations")
      : join(__dirname, "../../migrations");
    
    console.log(`üìÅ –ò—â–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤: ${migrationsDir}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    if (!existsSync(migrationsDir)) {
      console.log(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${migrationsDir}`);
      console.log(`üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
      console.log(`üìÅ __dirname: ${__dirname}`);
      console.log(`üìÅ NODE_ENV: ${process.env.NODE_ENV}`);
      return; // –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç
    }
    
    const migrationFiles = readdirSync(migrationsDir)
      .filter((file) => file.endsWith(".sql"))
      .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${migrationFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);

    let failuresCount = 0;

    for (const filename of migrationFiles) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        const { rows } = await client.query(
          "SELECT id FROM migrations WHERE name = $1",
          [filename],
        );

        if (rows.length > 0) {
          console.log(`‚è≠Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        console.log(`üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${filename}`);
        const sqlPath = join(migrationsDir, filename);
        const sql = readFileSync(sqlPath, "utf8");

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ ';'
        await client.query("BEGIN");
        await client.query(sql);
        await client.query("INSERT INTO migrations (name) VALUES ($1)", [
          filename,
        ]);
        await client.query("COMMIT");

        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        failuresCount += 1;
        try {
          await client.query("ROLLBACK");
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É rollback
        }
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
        continue;
      }
    }

    if (failuresCount === 0) {
      console.log("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    } else {
      console.log(
        `üèÅ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏. –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: ${failuresCount}`,
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
    throw error;
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMigrations()
    .then(() => {
      console.log("üèÅ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

export { runMigrations };
