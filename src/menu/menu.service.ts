import { Injectable } from '@nestjs/common';
import { KeyboardsService } from '../keyboards/keyboards.service';
import { CustomLoggerService } from '../logger/logger.service';
import { Context } from 'telegraf';

type TelegramContext = Context;

@Injectable()
export class MenuService {
  constructor(
    private readonly _kb: KeyboardsService,
    private readonly _logger: CustomLoggerService
  ) {}

  async sendMainMenu(ctx: TelegramContext): Promise<void> {
    this._logger.debug(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from?.id}`, 'MenuService');

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–±–∞–Ω–Ω–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)
      await ctx.reply(
        'üé¨ –ì–ï–ù–ï–†–ê–¢–û–† –í–ò–î–ï–û\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ!\n\n‚ú® –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ\nüé≠ 3D –∞–≤–∞—Ç–∞—Ä—ã —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º\nüì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤\nüöÄ –ë—ã—Å—Ç—Ä–∞—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
        {
          reply_markup: this._kb.mainInline().reply_markup,
        }
      );

      // –ó–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ä–∞–∑–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
      await this.sendReplyKeyboard(ctx);

      this._logger.debug(
        `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from?.id}`,
        'MenuService'
      );
    } catch (error) {
      this._logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error}`, undefined, 'MenuService');
      throw error;
    }
  }

  // –®–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Ä–∞–Ω–æ–≤ –æ–±–º–µ–Ω–æ–≤; —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —É–¥–∞–ª–µ–Ω—ã

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
   * @param ctx Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  private async sendReplyKeyboard(ctx: TelegramContext): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –±–∞–Ω–Ω–µ—Ä–∞ (–±–∞–Ω–Ω–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)
      await ctx.reply('üé¨', {
        reply_markup: this._kb.mainReply().reply_markup,
      });

      this._logger.debug(`Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from?.id}`, 'MenuService');
    } catch (error) {
      this._logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ${error}`,
        undefined,
        'MenuService'
      );
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      try {
        await ctx.reply('üé¨', {
          reply_markup: this._kb.mainReply().reply_markup,
        });
      } catch (fallbackError) {
        this._logger.error(
          `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ${fallbackError}`,
          undefined,
          'MenuService'
        );
      }
    }
  }
}
