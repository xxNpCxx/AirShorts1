import { Controller, Post, Body, Res, HttpStatus } from '@nestjs/common';
import { Response } from 'express';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { CustomLoggerService } from '../logger/logger.service';

@Controller('webhook')
export class WebhookController {
  private readonly bot: Telegraf;
  private readonly logger: CustomLoggerService;

  constructor(logger: CustomLoggerService) {
    this.logger = logger;
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    this.bot = new Telegraf(process.env.BOT_TOKEN || '');
  }

  @Post()
  async handleWebhook(@Body() update: any, @Res() res: Response) {
    try {
      this.logger.debug(`üì• –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å: ${JSON.stringify(update)}`, 'WebhookController');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
      if (!update || !update.update_id) {
        this.logger.warn('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å', 'WebhookController');
        return res.status(HttpStatus.BAD_REQUEST).json({ error: 'Invalid update format' });
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      await this.bot.handleUpdate(update);
      
      this.logger.debug('‚úÖ Webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'WebhookController');
      return res.status(HttpStatus.OK).json({ ok: true });
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error}`, undefined, 'WebhookController');
      return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: 'Internal server error' });
    }
  }
}
