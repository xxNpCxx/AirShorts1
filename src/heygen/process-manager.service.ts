import { Injectable, Logger } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { Inject } from '@nestjs/common';
import { HeyGenService } from './heygen.service';

/**
 * –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
 */
export type ProcessStatus = 
  | 'photo_avatar_creating'
  | 'photo_avatar_completed'
  | 'photo_avatar_failed'
  | 'voice_cloning'
  | 'voice_clone_completed'
  | 'voice_clone_failed'
  | 'video_generating'
  | 'video_completed'
  | 'video_failed'
  | 'completed'
  | 'failed';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
 */
export interface DigitalTwinProcess {
  id: string;
  userId: number;
  status: ProcessStatus;
  photoUrl: string;
  audioUrl: string;
  script: string;
  videoTitle: string;
  platform: "youtube-shorts";
  quality: "720p" | "1080p";
  photoAvatarId?: string;
  voiceCloneId?: string;
  videoId?: string;
  videoUrl?: string;
  error?: string;
  createdAt: Date;
  updatedAt: Date;
  retryCount: number;
  maxRetries: number;
}

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: Photo Avatar ‚Üí Voice Clone ‚Üí Video Generation
 */
@Injectable()
export class ProcessManagerService {
  private readonly logger = new Logger(ProcessManagerService.name);
  private readonly processes = new Map<string, DigitalTwinProcess>();

  constructor(
    @Inject(getBotToken("airshorts1_bot")) private readonly bot: Telegraf,
    private readonly heygenService: HeyGenService,
  ) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
   */
  async createDigitalTwinProcess(
    userId: number,
    photoUrl: string,
    audioUrl: string,
    script: string,
    videoTitle: string,
    quality: "720p" | "1080p" = "720p"
  ): Promise<DigitalTwinProcess> {
    const processId = `dt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    this.logger.log(`üé¨ [DIGITAL_TWIN_CREATE] Starting new process creation`, {
      processId,
      userId,
      photoUrl: photoUrl.substring(0, 100) + '...',
      audioUrl: audioUrl.substring(0, 100) + '...',
      scriptLength: script.length,
      videoTitle,
      quality,
      timestamp: new Date().toISOString()
    });
    
    const process: DigitalTwinProcess = {
      id: processId,
      userId,
      status: 'photo_avatar_creating',
      photoUrl,
      audioUrl,
      script,
      videoTitle,
      platform: "youtube-shorts",
      quality,
      createdAt: new Date(),
      updatedAt: new Date(),
      retryCount: 0,
      maxRetries: 3
    };
    
    this.processes.set(processId, process);
    
    this.logger.log(`‚úÖ [DIGITAL_TWIN_CREATE] Process created successfully`, {
      processId,
      userId,
      status: process.status,
      totalProcesses: this.processes.size,
      timestamp: new Date().toISOString()
    });
    
    return process;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ ID
   */
  async getProcess(processId: string): Promise<DigitalTwinProcess | undefined> {
    return this.processes.get(processId);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async updateProcessStatus(
    processId: string, 
    status: ProcessStatus, 
    data?: Partial<Pick<DigitalTwinProcess, 'photoAvatarId' | 'voiceCloneId' | 'videoId' | 'videoUrl' | 'error'>>
  ): Promise<void> {
    const process = this.processes.get(processId);
    if (!process) {
      this.logger.error(`‚ùå [PROCESS_UPDATE] Process not found: ${processId}`);
      return;
    }

    const oldStatus = process.status;
    process.status = status;
    process.updatedAt = new Date();
    
    if (data) {
      if (data.photoAvatarId) process.photoAvatarId = data.photoAvatarId;
      if (data.voiceCloneId) process.voiceCloneId = data.voiceCloneId;
      if (data.videoId) process.videoId = data.videoId;
      if (data.videoUrl) process.videoUrl = data.videoUrl;
      if (data.error) process.error = data.error;
    }

    this.processes.set(processId, process);
    
    this.logger.log(`üìä [PROCESS_UPDATE] Status changed`, {
      processId,
      userId: process.userId,
      oldStatus,
      newStatus: status,
      updatedFields: data ? Object.keys(data) : [],
      photoAvatarId: process.photoAvatarId,
      voiceCloneId: process.voiceCloneId,
      videoId: process.videoId,
      error: process.error,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getNextStep(process: DigitalTwinProcess): 'photo_avatar' | 'voice_clone' | 'video' | 'completed' | null {
    switch (process.status) {
      case 'photo_avatar_creating':
        return 'photo_avatar';
      case 'photo_avatar_completed':
        return 'voice_clone';
      case 'voice_clone_completed':
        return 'video';
      case 'video_completed':
        return 'completed';
      default:
        return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async executeNextStep(processId: string): Promise<void> {
    const process = this.processes.get(processId);
    if (!process) {
      this.logger.error(`Process not found: ${processId}`);
      return;
    }

    const nextStep = this.getNextStep(process);
    if (!nextStep) {
      this.logger.warn(`No next step for process ${processId} with status ${process.status}`);
      return;
    }

    this.logger.log(`üöÄ Executing next step for process ${processId}: ${nextStep}`);

    switch (nextStep) {
      case 'photo_avatar':
        await this.startPhotoAvatarCreation(process);
        break;
      case 'voice_clone':
        await this.startVoiceCloning(process);
        break;
      case 'video':
        await this.startVideoGeneration(process);
        break;
      case 'completed':
        await this.completeProcess(process);
        break;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ Photo Avatar
   */
  private async startPhotoAvatarCreation(process: DigitalTwinProcess): Promise<void> {
    try {
      this.logger.log(`üì∏ [PHOTO_AVATAR_START] Starting Photo Avatar creation`, {
        processId: process.id,
        userId: process.userId,
        photoUrl: process.photoUrl.substring(0, 100) + '...',
        callbackId: process.id,
        timestamp: new Date().toISOString()
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º HeyGen Service –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Photo Avatar
      const avatarId = await this.heygenService.createPhotoAvatar(process.photoUrl, process.id);
      
      this.logger.log(`üì∏ [PHOTO_AVATAR_START] HeyGen API call successful`, {
        processId: process.id,
        userId: process.userId,
        avatarId,
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'photo_avatar_creating', { photoAvatarId: avatarId });
      
      this.logger.log(`‚úÖ [PHOTO_AVATAR_START] Photo Avatar creation initiated successfully`, {
        processId: process.id,
        userId: process.userId,
        avatarId,
        status: 'photo_avatar_creating',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      this.logger.error(`‚ùå [PHOTO_AVATAR_START] Error creating Photo Avatar`, {
        processId: process.id,
        userId: process.userId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        photoUrl: process.photoUrl.substring(0, 100) + '...',
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'photo_avatar_failed', { 
        error: error instanceof Error ? error.message : String(error) 
      });
      await this.notifyUserError(process, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Ñ–æ—Ç–æ');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
   */
  private async startVoiceCloning(process: DigitalTwinProcess): Promise<void> {
    try {
      this.logger.log(`üéµ [VOICE_CLONE_START] Starting Voice Cloning`, {
        processId: process.id,
        userId: process.userId,
        audioUrl: process.audioUrl.substring(0, 100) + '...',
        callbackId: process.id,
        timestamp: new Date().toISOString()
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º HeyGen Service –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
      const voiceId = await this.heygenService.createVoiceClone(process.audioUrl, process.id);
      
      this.logger.log(`üéµ [VOICE_CLONE_START] HeyGen API call successful`, {
        processId: process.id,
        userId: process.userId,
        voiceId,
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'voice_cloning', { voiceCloneId: voiceId });
      
      this.logger.log(`‚úÖ [VOICE_CLONE_START] Voice Cloning initiated successfully`, {
        processId: process.id,
        userId: process.userId,
        voiceId,
        status: 'voice_cloning',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      this.logger.error(`‚ùå [VOICE_CLONE_START] Error creating Voice Clone`, {
        processId: process.id,
        userId: process.userId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        audioUrl: process.audioUrl.substring(0, 100) + '...',
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'voice_clone_failed', { 
        error: error instanceof Error ? error.message : String(error) 
      });
      await this.notifyUserError(process, '–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
   */
  private async startVideoGeneration(process: DigitalTwinProcess): Promise<void> {
    try {
      this.logger.log(`üé¨ [VIDEO_GENERATION_START] Starting Video Generation`, {
        processId: process.id,
        userId: process.userId,
        photoAvatarId: process.photoAvatarId,
        voiceCloneId: process.voiceCloneId,
        scriptLength: process.script.length,
        videoTitle: process.videoTitle,
        quality: process.quality,
        callbackId: process.id,
        timestamp: new Date().toISOString()
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º HeyGen Service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
      const videoId = await this.heygenService.generateDigitalTwinVideo(
        process.photoAvatarId!,
        process.voiceCloneId!,
        process.script,
        process.videoTitle,
        process.id
      );
      
      this.logger.log(`üé¨ [VIDEO_GENERATION_START] HeyGen API call successful`, {
        processId: process.id,
        userId: process.userId,
        videoId,
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'video_generating', { videoId });
      
      this.logger.log(`‚úÖ [VIDEO_GENERATION_START] Video Generation initiated successfully`, {
        processId: process.id,
        userId: process.userId,
        videoId,
        status: 'video_generating',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      this.logger.error(`‚ùå [VIDEO_GENERATION_START] Error generating video`, {
        processId: process.id,
        userId: process.userId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        photoAvatarId: process.photoAvatarId,
        voiceCloneId: process.voiceCloneId,
        scriptLength: process.script.length,
        timestamp: new Date().toISOString()
      });
      
      await this.updateProcessStatus(process.id, 'video_failed', { 
        error: error instanceof Error ? error.message : String(error) 
      });
      await this.notifyUserError(process, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
   */
  private async completeProcess(process: DigitalTwinProcess): Promise<void> {
    this.logger.log(`‚úÖ Process ${process.id} completed successfully`);
    await this.updateProcessStatus(process.id, 'completed');
    await this.sendVideoToUser(process);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private async sendVideoToUser(process: DigitalTwinProcess): Promise<void> {
    try {
      if (!process.videoUrl) {
        throw new Error('Video URL not available');
      }

      await this.bot.telegram.sendVideo(process.userId, process.videoUrl, {
        caption: `üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º –≥–æ—Ç–æ–≤–æ!\n\n` +
                `üìù –°—Ü–µ–Ω–∞—Ä–∏–π: ${process.script.substring(0, 100)}...\n` +
                `üé• –ö–∞—á–µ—Å—Ç–≤–æ: ${process.quality}\n` +
                `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~${this.calculateVideoDuration(process.script)} —Å–µ–∫`
      });
      
      this.logger.log(`üì§ Video sent to user ${process.userId} for process ${process.id}`);
    } catch (error) {
      this.logger.error(`Error sending video to user ${process.userId}:`, error);
      await this.notifyUserError(process, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ');
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
   */
  private async notifyUserError(process: DigitalTwinProcess, errorMessage: string): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(
        process.userId, 
        `‚ùå ${errorMessage}\n\n` +
        `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n` +
        `üìã ID –ø—Ä–æ—Ü–µ—Å—Å–∞: ${process.id}`
      );
      
      this.logger.log(`üì§ Error notification sent to user ${process.userId}: ${errorMessage}`);
    } catch (error) {
      this.logger.error(`Error notifying user ${process.userId}:`, error);
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
   */
  private calculateVideoDuration(text: string): number {
    if (!text || text.trim().length === 0) {
      return 30;
    }

    const wordCount = text.trim().split(/\s+/).length;
    const wordsPerSecond = 2.5; // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    let duration = Math.ceil(wordCount / wordsPerSecond);
    duration = Math.ceil(duration * 1.25); // –ë—É—Ñ–µ—Ä –¥–ª—è –ø–∞—É–∑ –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
    duration = Math.max(15, Math.min(60, duration));
    
    return duration;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
   */
  getActiveProcesses(): DigitalTwinProcess[] {
    return Array.from(this.processes.values()).filter(
      process => !['completed', 'failed'].includes(process.status)
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ callback ID (–¥–ª—è webhook)
   */
  getProcessByCallbackId(callbackId: string): DigitalTwinProcess | undefined {
    return this.processes.get(callbackId);
  }
}
