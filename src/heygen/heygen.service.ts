import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import axios from 'axios';

/**
 * HeyGen Video Request Interface
 * @see https://docs.heygen.com/reference/create-an-avatar-video-v2
 */
export interface HeyGenVideoRequest {
  photoUrl: string;
  audioUrl: string;
  script: string;
  platform: "youtube-shorts";
  duration: number;
  quality: "720p" | "1080p";
  textPrompt?: string;
  imageUrl?: string; // URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

/**
 * Digital Twin Request Interface
 * –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å Photo Avatar –∏ Voice Clone
 */
export interface DigitalTwinRequest {
  photoUrl: string;
  audioUrl: string;
  script: string;
  videoTitle: string;
  platform: "youtube-shorts";
  quality: "720p" | "1080p";
  callbackId: string;
}

/**
 * Photo Avatar Request Interface
 * @see https://docs.heygen.com/reference/create-photo-avatar
 */
export interface PhotoAvatarRequest {
  name: string;
  photo_url: string;
  callback_url?: string;
  callback_id?: string;
}

/**
 * Voice Cloning Request Interface
 * @see https://docs.heygen.com/reference/create-voice-cloning
 */
export interface VoiceCloningRequest {
  name: string;
  audio_url: string;
  callback_url?: string;
  callback_id?: string;
}

/**
 * Upload Asset Response Interface
 * @see https://docs.heygen.com/reference/upload-asset
 */
export interface UploadAssetResponse {
  data?: {
    asset_key?: string;
    asset_id?: string;
  };
  asset_key?: string;
  asset_id?: string;
  error?: {
    code: number;
    message: string;
  };
}
export interface VoiceCloningRequest {
  name: string;
  audio_url: string;
  callback_url?: string;
  callback_id?: string;
}

export interface HeyGenVideoResponse {
  id: string;
  status: string;
  result_url?: string;
  error?: string;
}

/**
 * Standard Avatar API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * @see https://docs.heygen.com/reference/create-an-avatar-video-v2
 * @endpoint POST /v2/video/generate
 */
export interface StandardVideoPayload {
  video_inputs: VideoInput[];
  dimension: {
    width: number;
    height: number;
  };
  caption?: boolean;
  title?: string;
  callback_id?: string;
  folder_id?: string;
  callback_url?: string;
}

export interface VideoInput {
  character: {
    type: "avatar" | "talking_photo";
    avatar_id?: string;
    talking_photo_id?: string;
    avatar_style?: string;
    talking_photo_style?: string;
    talking_style?: string;        // For talking_photo
    expression?: string;           // For talking_photo
    super_resolution?: boolean;    // For talking_photo
    scale?: number;
  };
  voice: {
    type: "text" | "audio";
    input_text?: string;
    voice_id?: string;
    speed?: number;
    audio_asset_id?: string;
  };
  background?: {
    type: "color" | "image" | "video";
    value?: string;
    image_asset_id?: string;
    fit?: string;
  };
}

/**
 * Avatar IV API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * @see https://docs.heygen.com/reference/create-avatar-iv-video
 * @endpoint POST /v2/video/av4/generate
 * @requires image_key from Upload Asset API
 * @requires video_title (string, required)
 * @requires script (string, required) - NOT input_text!
 * @requires voice_id (string, required)
 * @optional video_orientation ("portrait" | "landscape")
 * @optional fit ("cover" | "contain")
 */
export interface AvatarIVPayload {
  image_key: string;                    // Required
  video_title: string;                  // Required  
  script: string;                       // Required (NOT input_text!)
  voice_id: string;                     // Required
  video_orientation?: 'portrait' | 'landscape'; // Optional enum
  fit?: 'cover' | 'contain';           // Optional enum
}

/**
 * Validates Standard Video API payload against API specification
 * @param payload - Object to validate
 * @returns true if valid, false otherwise
 */
export function validateStandardVideoPayload(payload: any): payload is StandardVideoPayload {
  return (
    Array.isArray(payload.video_inputs) &&
    payload.video_inputs.length > 0 &&
    payload.dimension &&
    typeof payload.dimension.width === 'number' &&
    typeof payload.dimension.height === 'number' &&
    payload.video_inputs.every((input: any) => 
      input.character && 
      ['avatar', 'talking_photo'].includes(input.character.type) &&
      input.voice &&
      ['text', 'audio'].includes(input.voice.type)
    )
  );
}

/**
 * Validates Avatar IV payload against API specification
 * @param payload - Object to validate
 * @returns true if valid, false otherwise
 */
export function validateAvatarIVPayload(payload: any): payload is AvatarIVPayload {
  return (
    typeof payload.image_key === 'string' &&
    typeof payload.video_title === 'string' &&
    typeof payload.script === 'string' &&
    typeof payload.voice_id === 'string' &&
    (!payload.video_orientation || ['portrait', 'landscape'].includes(payload.video_orientation)) &&
    (!payload.fit || ['cover', 'contain'].includes(payload.fit))
  );
}

interface HeyGenApiResponse {
  error: null | string;
  data?: {
    video_id: string;
  };
}

interface HeyGenStatusResponse {
  code: number;
  data?: {
    id: string;
    status: string;
    video_url?: string;
    error?: any;
    duration?: number;
    thumbnail_url?: string;
    gif_url?: string;
    caption_url?: string;
  };
  message: string;
}

/**
 * HeyGen API Configuration
 * 
 * @version Avatar IV API v2 (current)
 * @baseUrl https://api.heygen.com
 * @uploadUrl https://upload.heygen.com
 * @endpoints
 *   - POST /v2/video/av4/generate (Avatar IV)
 *   - POST /v2/video/generate (Standard Avatar)
 *   - POST /v1/asset (Asset Upload)
 *   - GET /v1/avatar.list (List Avatars)
 *   - GET /v1/video_status.get (Video Status)
 * @lastUpdated 2025-09-06
 * @documentation https://docs.heygen.com/reference/create-avatar-iv-video
 */
const HEYGEN_API = {
  baseUrl: 'https://api.heygen.com',
  uploadUrl: 'https://upload.heygen.com',
  version: 'v2',
  endpoints: {
    avatarIV: '/v2/video/av4/generate',
    standardAvatar: '/v2/video/generate',
    uploadAsset: '/v1/asset',
    listAvatars: '/v1/avatar.list',
    videoStatus: '/v1/video_status.get'
  }
} as const;

@Injectable()
export class HeyGenService {
  private readonly logger = new Logger(HeyGenService.name);
  private readonly apiKey: string;
  private readonly baseUrl = HEYGEN_API.baseUrl;

  constructor(private readonly configService: ConfigService) {
    this.apiKey = this.configService.get<string>("HEYGEN_API_KEY") || "";
    if (!this.apiKey) {
      this.logger.warn("HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    }
  }

  /**
   * Generate video using HeyGen API
   * 
   * @see https://docs.heygen.com/reference/create-an-avatar-video-v2
   * @see https://docs.heygen.com/reference/create-avatar-iv-video
   * @endpoint POST /v2/video/generate (Standard Avatar API)
   * @endpoint POST /v2/video/av4/generate (Avatar IV API)
   * @param request - Video generation parameters
   * @returns Promise with video generation response
   * @throws Error if API validation fails or request is invalid
   */
  async generateVideo(request: HeyGenVideoRequest): Promise<HeyGenVideoResponse> {
    const requestId = `heygen_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      this.logger.log(`[${requestId}] üöÄ Starting video generation with HeyGen API`);
      this.logger.debug(`[${requestId}] Request params: platform=${request.platform}, quality=${request.quality}, duration=${request.duration}`);
      this.logger.debug(`[${requestId}] Audio provided: ${!!request.audioUrl}, Script length: ${request.script?.length || 0} chars`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ –∏–ª–∏ TTS
      const useCustomAudio = request.audioUrl && 
                            request.audioUrl.trim() !== "" && 
                            request.audioUrl !== "undefined" && 
                            request.audioUrl !== "null" &&
                            !request.audioUrl.includes('heygen_tts_required');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      const availableAvatars = await this.getAvailableAvatars();
      const defaultAvatarId = availableAvatars[0] || "1bd001e7-c335-4a6a-9d1b-8f8b5b5b5b5b";

      // HeyGen API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      let payload: StandardVideoPayload = {
        video_inputs: [
          {
            character: {
              type: "avatar",
              avatar_id: defaultAvatarId, // –†–∞–±–æ—á–∏–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
              avatar_style: "normal"
            },
            voice: {
              type: "text",
              input_text: request.script,
              voice_id: "119caed25533477ba63822d5d1552d25", // –ì–æ–ª–æ—Å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
              speed: 1.0
            }
          }
        ],
        dimension: {
          width: 1280,
          height: 720
        }
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞–µ–º TalkingPhoto –≤ Standard API
      if (request.imageUrl && request.imageUrl.trim() !== "" && request.imageUrl !== "undefined" && request.imageUrl !== "null" && request.imageUrl !== "heygen_placeholder_image_url" && request.imageUrl !== "heygen_use_available_avatar") {
        this.logger.log(`[${requestId}] üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ –≤ Standard API: ${request.imageUrl}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (request.imageUrl.includes('photo_avatar_')) {
          // Photo Avatar - –∏—Å–ø–æ–ª—å–∑—É–µ–º TalkingPhoto
          this.logger.log(`[${requestId}] üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º Photo Avatar –∫–∞–∫ TalkingPhoto`);
          payload.video_inputs[0].character = {
            type: "talking_photo",
            talking_photo_id: request.imageUrl,
            talking_photo_style: "square",
            talking_style: "expressive",
            expression: "default",
            super_resolution: true,
            scale: 1.0
          };
        } else {
          // Asset –∏–ª–∏ image_key - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ Image Background
          this.logger.log(`[${requestId}] üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Background`);
          payload.video_inputs[0].background = {
            type: "image",
            image_asset_id: request.imageUrl,
            fit: "cover"
          };
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (useCustomAudio) {
        this.logger.log(`[${requestId}] üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ asset: ${request.audioUrl}`);
        payload.video_inputs[0].voice = {
          type: "audio",
          audio_asset_id: request.audioUrl
        };
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
      if (!request.imageUrl || request.imageUrl === "heygen_use_available_avatar" || request.imageUrl === "heygen_placeholder_image_url") {
        this.logger.log(`[${requestId}] üì∏ Using available avatar: ${defaultAvatarId}`);
        // defaultAvatarId —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ payload –≤—ã—à–µ
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞
      if (useCustomAudio) {
        this.logger.log(`[${requestId}] üéµ Using custom user audio from: ${request.audioUrl}`);
      } else {
        this.logger.log(`[${requestId}] üéµ Using TTS with script: ${request.script?.substring(0, 50)}...`);
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è payload —Å–æ–≥–ª–∞—Å–Ω–æ API —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
      if (!validateStandardVideoPayload(payload)) {
        this.logger.error(`[${requestId}] ‚ùå Invalid Standard Video API parameters:`, payload);
        throw new Error('Invalid Standard Video API parameters');
      }

      this.logger.log(`[${requestId}] üì§ Standard Video payload (validated):`, payload);
      this.logger.log(`[${requestId}] üì§ Sending request to ${this.baseUrl}${HEYGEN_API.endpoints.standardAvatar}`);

      const response = await fetch(`${this.baseUrl}${HEYGEN_API.endpoints.standardAvatar}`, {
        method: "POST",
        headers: {
          "X-API-KEY": this.apiKey,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      this.logger.log(`[${requestId}] üì• HeyGen API response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${requestId}] ‚ùå HeyGen API Error:`, {
          status: response.status,
          statusText: response.statusText,
          url: `${this.baseUrl}/v2/video/generate`,
          method: "POST",
          errorBody: errorText,
        });
        throw new Error(`HeyGen API error: ${response.status} - ${errorText}`);
      }

      const result = (await response.json()) as HeyGenApiResponse;
      this.logger.log(`[${requestId}] ‚úÖ Video generation started successfully with ID: ${result.data?.video_id}`);
      this.logger.log(`[${requestId}] Full HeyGen response:`, result);

      return {
        id: result.data?.video_id || "",
        status: "created",
      };
    } catch (error) {
      this.logger.error(`[${requestId}] üí• Critical error in generateVideo:`, {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        requestParams: {
          platform: request.platform,
          quality: request.quality,
          duration: request.duration,
          hasPhoto: !!request.photoUrl,
          hasAudio: !!request.audioUrl,
          scriptLength: request.script?.length || 0
        }
      });
      throw error;
    }
  }

  async getVideoStatus(videoId: string): Promise<HeyGenVideoResponse> {
    try {
      this.logger.debug(`üîç Checking status for HeyGen video: ${videoId}`);
      
      const response = await fetch(`${this.baseUrl}/v1/video_status.get?video_id=${videoId}`, {
        headers: {
          "X-API-KEY": this.apiKey,
        },
      });

      this.logger.debug(`üì• Status check response: ${response.status} ${response.statusText} for video ${videoId}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`‚ùå Failed to get video status for ${videoId}:`, {
          status: response.status,
          statusText: response.statusText,
          url: `${this.baseUrl}/v1/video_status.get?video_id=${videoId}`,
          errorBody: errorText
        });
        throw new Error(`Failed to get video status: ${response.status} - ${errorText}`);
      }

      const result = (await response.json()) as HeyGenStatusResponse;
      
      this.logger.debug(`üìä Video ${videoId} status: ${result.data?.status}`, {
        hasResultUrl: !!result.data?.video_url,
        hasError: !!result.data?.error,
        errorMessage: result.data?.error
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–æ–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      if (result.data?.status === 'completed' && result.data?.video_url) {
        this.logger.log(`‚úÖ Video ${videoId} completed successfully with URL: ${result.data.video_url}`);
      } else if (result.data?.status === 'failed' || result.data?.error) {
        this.logger.error(`‚ùå Video ${videoId} failed:`, {
          status: result.data?.status,
          error: result.data?.error,
          fullResponse: result
        });
      }

      return {
        id: result.data?.id || videoId,
        status: result.data?.status || "unknown",
        result_url: result.data?.video_url,
        error: result.data?.error,
      };
    } catch (error) {
      this.logger.error(`üí• Critical error getting video status for ${videoId}:`, {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      });
      throw error;
    }
  }

  /**
   * Upload audio to HeyGen Assets API for Standard Avatar API
   * 
   * @see https://docs.heygen.com/reference/upload-asset
   * @endpoint POST /v1/upload
   * @param audioBuffer - Audio file buffer
   * @returns Promise with audio asset ID
   * @throws Error if upload fails
   */
  /**
   * Upload audio asset to HeyGen API
   * 
   * @see https://docs.heygen.com/reference/upload-asset
   * @endpoint POST https://upload.heygen.com/v1/asset
   * @param audioBuffer - Audio file buffer
   * @returns Promise with audio asset ID
   * @throws Error if upload fails
   */
  async uploadAudio(audioBuffer: Buffer): Promise<string> {
    const uploadId = `heygen_audio_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${uploadId}] üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∞—É–¥–∏–æ –≤ HeyGen Assets (${audioBuffer.length} bytes)`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FormData –¥–ª—è Node.js
      const FormData = require('form-data');
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      formData.append('file', audioBuffer, {
        filename: 'user_audio.wav',
        contentType: 'audio/wav',
        knownLength: audioBuffer.length
      });
      
      this.logger.debug(`[${uploadId}] üì§ FormData prepared with ${audioBuffer.length} bytes`);
      
      const response = await fetch('https://upload.heygen.com/v1/asset', {
        method: 'POST',
        headers: {
          'X-Api-Key': this.apiKey,
          ...formData.getHeaders(),
        },
        body: formData,
      });

      this.logger.log(`[${uploadId}] üì• Upload Asset response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${uploadId}] ‚ùå Audio upload failed: ${response.status} ${response.statusText}`);
        this.logger.error(`[${uploadId}] Error details: ${errorText}`);
        throw new Error(`Audio upload failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json() as any;
      this.logger.log(`[${uploadId}] üìã Upload Asset response data:`, result);
      
      const audioAssetId = result.data?.asset_id || result.asset_id;
      
      if (!audioAssetId) {
        this.logger.error(`[${uploadId}] ‚ùå No asset_id in response:`, result);
        throw new Error('No asset_id returned from HeyGen Upload Asset API');
      }
      
      this.logger.log(`[${uploadId}] ‚úÖ Audio uploaded successfully: ${audioAssetId}`);
      return audioAssetId;
      
    } catch (error) {
      this.logger.error(`[${uploadId}] ‚ùå Error uploading audio:`, error);
      throw error;
    }
  }

  /**
   * Upload image asset to HeyGen API for Avatar IV
   * 
   * @see https://docs.heygen.com/reference/upload-asset
   * @endpoint POST https://upload.heygen.com/v1/asset
   * @param imageBuffer - Image file buffer  
   * @returns Promise with image_key for Avatar IV or asset_id for Standard API
   */
  async uploadImage(imageBuffer: Buffer): Promise<string> {
    const uploadId = `heygen_image_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${uploadId}] üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ –≤ HeyGen Assets (${imageBuffer.length} bytes)`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FormData –¥–ª—è Node.js
      const FormData = require('form-data');
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      formData.append('file', imageBuffer, {
        filename: 'user_photo.jpg',
        contentType: 'image/jpeg',
        knownLength: imageBuffer.length
      });
      
      this.logger.debug(`[${uploadId}] üì§ FormData prepared with ${imageBuffer.length} bytes`);
      
      const response = await fetch('https://upload.heygen.com/v1/asset', {
        method: 'POST',
        headers: {
          'X-Api-Key': this.apiKey,
          ...formData.getHeaders(),
        },
        body: formData,
      });

      this.logger.log(`[${uploadId}] üì• Upload Asset response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${uploadId}] ‚ùå Image upload failed: ${response.status} ${response.statusText}`);
        this.logger.error(`[${uploadId}] Error details: ${errorText}`);
        throw new Error(`Image upload failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json() as any;
      this.logger.log(`[${uploadId}] üìã Upload Asset response data:`, result);
      
      // –ò—â–µ–º image_key –¥–ª—è Avatar IV –∏–ª–∏ asset_id –¥–ª—è Standard API
      const imageKey = result.data?.image_key || result.image_key;
      const assetId = result.data?.asset_id || result.asset_id;
      
      if (imageKey) {
        this.logger.log(`[${uploadId}] ‚úÖ Image Key –¥–ª—è Avatar IV: ${imageKey}`);
        return imageKey;
      } else if (assetId) {
        this.logger.log(`[${uploadId}] ‚úÖ Asset ID –¥–ª—è Standard API: ${assetId}`);
        return assetId;
      } else {
        this.logger.error(`[${uploadId}] ‚ùå No image_key or asset_id in response:`, result);
        throw new Error('No image_key or asset_id returned from HeyGen Upload Asset API');
      }
      
    } catch (error) {
      this.logger.error(`[${uploadId}] ‚ùå Error uploading image:`, error);
      throw error;
    }
  }

  private async uploadImageFallback(imageBuffer: Buffer, uploadId: string): Promise<string> {
    try {
      this.logger.log(`[${uploadId}] üîÑ Fallback: trying direct image upload...`);
      
      const formData = new FormData();
      formData.append('image', new Blob([new Uint8Array(imageBuffer)]), 'user_photo.jpg');
      
      const response = await fetch(`${this.baseUrl}/v2/image/upload`, {
        method: 'POST',
        headers: {
          'X-API-KEY': this.apiKey,
        },
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${uploadId}] ‚ùå Fallback image upload failed: ${response.status} ${response.statusText}`);
        this.logger.error(`[${uploadId}] Error details: ${errorText}`);
        this.logger.warn(`[${uploadId}] ‚ö†Ô∏è Will use default avatar instead of custom photo`);
        return "heygen_placeholder_image_url";
      }

      const result = await response.json() as any;
      const imageUrl = result.data?.image_url || result.image_url || result.url;
      this.logger.log(`[${uploadId}] ‚úÖ Fallback image upload successful: ${imageUrl}`);
      
      return imageUrl;
    } catch (error) {
      this.logger.error(`[${uploadId}] ‚ùå Fallback image upload error:`, error);
      this.logger.warn(`[${uploadId}] ‚ö†Ô∏è Will use default avatar instead of custom photo`);
      return "heygen_placeholder_image_url";
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è fallback
  private async getAvailableAvatars(): Promise<string[]> {
    try {
      const response = await fetch(`${this.baseUrl}/v1/avatar.list`, {
        headers: {
          'X-API-KEY': this.apiKey,
        },
      });

      if (!response.ok) {
        this.logger.warn('Failed to get available avatars, using hardcoded fallback');
        return this.getHardcodedAvatars();
      }

      const result = await response.json() as any;
      const avatars = result.data?.avatars || [];
      const avatarIds = avatars.map((avatar: any) => avatar.avatar_id).filter(Boolean);
      
      if (avatarIds.length === 0) {
        this.logger.warn('No avatars found, using hardcoded fallback');
        return this.getHardcodedAvatars();
      }

      this.logger.log(`Found ${avatarIds.length} available avatars: ${avatarIds.slice(0, 3).join(', ')}...`);
      return avatarIds;
    } catch (error) {
      this.logger.error('Error getting available avatars:', error);
      return this.getHardcodedAvatars();
    }
  }

  // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å HeyGen API
  private getHardcodedAvatars(): string[] {
    return [
      "Abigail_expressive_2024112501",
      "Abigail_standing_office_front", 
      "Abigail_sitting_sofa_front",
      "1bd001e7-c335-4a6a-9d1b-8f8b5b5b5b5b", // Fallback ID
      "Abigail_standing_office_front_2024112501"
    ];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç Photo Avatar –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Avatar IV API —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   * 
   * @see https://docs.heygen.com/reference/create-avatar-iv-video
   * @endpoint POST /v2/video/av4/generate
   * @param photoUrl - URL —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param callbackId - ID –¥–ª—è webhook callback
   * @returns Promise —Å avatar_id (–≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
   * @throws Error –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
   */
  async createPhotoAvatar(photoUrl: string, callbackId: string): Promise<string> {
    const requestId = `photo_avatar_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`üì∏ [HEYGEN_PHOTO_AVATAR] Starting Photo Avatar creation via Avatar IV API`, {
        requestId,
        callbackId,
        photoUrl: photoUrl.substring(0, 100) + '...',
        webhookUrl: `${process.env.WEBHOOK_URL}/heygen/webhook`,
        timestamp: new Date().toISOString()
      });
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ asset
      const uploadResponse = await this.uploadAsset(photoUrl, 'image');
      
      this.logger.log(`üì§ [HEYGEN_PHOTO_AVATAR] Image uploaded successfully`, {
        requestId,
        callbackId,
        assetKey: uploadResponse.asset_key,
        timestamp: new Date().toISOString()
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º asset_key –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π avatar_id
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Avatar IV –≤–∏–¥–µ–æ
      return uploadResponse.asset_key;
      
    } catch (error) {
      this.logger.error(`‚ùå [HEYGEN_PHOTO_AVATAR] Error creating Photo Avatar`, {
        requestId,
        callbackId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        photoUrl: photoUrl.substring(0, 100) + '...',
        timestamp: new Date().toISOString()
      });
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ asset –≤ HeyGen
   * 
   * @see https://docs.heygen.com/reference/upload-asset
   * @endpoint POST /v1/upload
   * @param fileUrl - URL —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param fileType - –¢–∏–ø —Ñ–∞–π–ª–∞ ('image' –∏–ª–∏ 'audio')
   * @returns Promise —Å asset_key
   * @throws Error –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
   */
  private async uploadAsset(fileUrl: string, fileType: 'image' | 'audio'): Promise<{ asset_key: string }> {
    const requestId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`üì§ [HEYGEN_UPLOAD] Starting asset upload`, {
        requestId,
        fileUrl: fileUrl.substring(0, 100) + '...',
        fileType,
        endpoint: `${HEYGEN_API.uploadUrl}/v1/asset`,
        timestamp: new Date().toISOString()
      });

      // –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
      const fileResponse = await fetch(fileUrl);
      if (!fileResponse.ok) {
        throw new Error(`Failed to download file: ${fileResponse.status} ${fileResponse.statusText}`);
      }

      const fileBuffer = await fileResponse.arrayBuffer();
      const buffer = Buffer.from(fileBuffer);

      this.logger.log(`üì• [HEYGEN_UPLOAD] File downloaded successfully`, {
        requestId,
        fileSize: buffer.length,
        fileType,
        timestamp: new Date().toISOString()
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      const FormData = require('form-data');
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ HeyGen
      formData.append('file', buffer, {
        filename: fileType === 'image' ? 'user_photo.jpg' : 'user_audio.wav',
        contentType: fileType === 'image' ? 'image/jpeg' : 'audio/wav',
        knownLength: buffer.length
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      formData.append('type', fileType);

      this.logger.log(`üì§ [HEYGEN_UPLOAD] FormData prepared for HeyGen API`, {
        requestId,
        fileSize: buffer.length,
        formDataFields: formData.getHeaders(),
        timestamp: new Date().toISOString()
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ FormData –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.logger.debug(`[${requestId}] FormData details:`, {
        hasFile: formData.has('file'),
        hasType: formData.has('type'),
        contentType: formData.getHeaders()['content-type'],
        contentLength: formData.getHeaders()['content-length']
      });

      let response;
      try {
        response = await axios.post(`${HEYGEN_API.uploadUrl}/v1/asset`, formData, {
          headers: {
            'X-Api-Key': this.apiKey, // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è HeyGen
            ...formData.getHeaders()
          },
          maxBodyLength: Infinity,
          maxContentLength: Infinity,
          timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        this.logger.log(`üì• [HEYGEN_UPLOAD] Received response from HeyGen API`, {
          requestId,
          status: response.status,
          statusText: response.statusText,
          timestamp: new Date().toISOString()
        });

        const data = response.data as any;
        
        this.logger.log(`‚úÖ [HEYGEN_UPLOAD] Asset uploaded successfully`, {
          requestId,
          responseData: data,
          timestamp: new Date().toISOString()
        });

        // –ò—â–µ–º asset_key –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
        const assetKey = data.data?.asset_key || data.asset_key || data.data?.asset_id || data.asset_id;
        
        if (!assetKey) {
          this.logger.error(`‚ùå [HEYGEN_UPLOAD] No asset_key found in response`, {
            requestId,
            responseData: data,
            timestamp: new Date().toISOString()
          });
          throw new Error('No asset_key in response');
        }

        this.logger.log(`‚úÖ [HEYGEN_UPLOAD] Asset key extracted: ${assetKey}`, {
          requestId,
          assetKey,
          timestamp: new Date().toISOString()
        });

        return { asset_key: assetKey };
      } catch (axiosError) {
        if (axiosError.response) {
          // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
          const errorBody = axiosError.response.data;
          this.logger.error(`‚ùå [HEYGEN_UPLOAD] Upload failed`, {
            requestId,
            status: axiosError.response.status,
            statusText: axiosError.response.statusText,
            errorBody,
            timestamp: new Date().toISOString()
          });
          throw new Error(`Asset upload failed: ${axiosError.response.status} - ${JSON.stringify(errorBody)}`);
        } else {
          // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          this.logger.error(`‚ùå [HEYGEN_UPLOAD] Network error`, {
            requestId,
            error: axiosError.message,
            timestamp: new Date().toISOString()
          });
          throw new Error(`Asset upload network error: ${axiosError.message}`);
        }
      }
    } catch (error) {
      this.logger.error(`‚ùå [HEYGEN_UPLOAD] Error uploading asset`, {
        requestId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        fileUrl: fileUrl.substring(0, 100) + '...',
        fileType,
        timestamp: new Date().toISOString()
      });
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–æ–Ω –≥–æ–ª–æ—Å–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—É–¥–∏–æ
   * 
   * @see https://docs.heygen.com/reference/create-voice-cloning
   * @endpoint POST /v1/voice_cloning.create
   * @param audioUrl - URL –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param callbackId - ID –¥–ª—è webhook callback
   * @returns Promise —Å voice_id
   * @throws Error –µ—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
   */
  async createVoiceClone(audioUrl: string, callbackId: string): Promise<string> {
    const requestId = `voice_clone_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üéµ Creating Voice Clone from: ${audioUrl}`);
      
      const payload: VoiceCloningRequest = {
        name: `voice_${callbackId}`,
        audio_url: audioUrl,
        callback_url: `${process.env.WEBHOOK_URL}/heygen/webhook`,
        callback_id: callbackId
      };

      this.logger.debug(`[${requestId}] üì§ Voice Cloning payload:`, payload);

      const response = await fetch(`${this.baseUrl}/v1/voice_cloning.create`, {
        method: 'POST',
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      this.logger.log(`[${requestId}] üì• Voice Cloning response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${requestId}] ‚ùå Voice Cloning failed: ${response.status} - ${errorText}`);
        throw new Error(`Voice Cloning failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json() as any;
      const voiceId = result.data?.voice_id || result.voice_id;
      
      if (!voiceId) {
        this.logger.error(`[${requestId}] ‚ùå No voice_id in response:`, result);
        throw new Error('No voice_id returned from Voice Cloning API');
      }
      
      this.logger.log(`[${requestId}] ‚úÖ Voice Clone created successfully: ${voiceId}`);
      return voiceId;
      
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå Error creating Voice Clone:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É—è Avatar IV API
   * 
   * @see https://docs.heygen.com/reference/create-avatar-iv-video
   * @endpoint POST /v2/video/av4/generate
   * @param avatarId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Photo Avatar
   * @param voiceId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Voice Clone
   * @param script - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
   * @param videoTitle - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
   * @param callbackId - ID –¥–ª—è webhook callback
   * @returns Promise —Å video_id
   * @throws Error –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
   */
  async generateDigitalTwinVideo(
    avatarId: string,
    voiceId: string,
    script: string,
    videoTitle: string,
    callbackId: string
  ): Promise<string> {
    const requestId = `digital_twin_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üé¨ Generating Digital Twin Video`);
      this.logger.log(`[${requestId}] Avatar ID: ${avatarId}, Voice ID: ${voiceId}`);
      this.logger.log(`[${requestId}] Script length: ${script.length} chars`);
      
      const payload: AvatarIVPayload = {
        image_key: avatarId,
        video_title: videoTitle,
        script: script,
        voice_id: voiceId,
        video_orientation: "portrait",
        fit: "cover"
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
      if (!validateAvatarIVPayload(payload)) {
        this.logger.error(`[${requestId}] ‚ùå Invalid Avatar IV payload:`, payload);
        throw new Error('Invalid Avatar IV payload');
      }

      this.logger.debug(`[${requestId}] üì§ Avatar IV payload (validated):`, payload);

      const response = await fetch(`${this.baseUrl}${HEYGEN_API.endpoints.avatarIV}`, {
        method: 'POST',
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      this.logger.log(`[${requestId}] üì• Avatar IV response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`[${requestId}] ‚ùå Avatar IV generation failed: ${response.status} - ${errorText}`);
        throw new Error(`Avatar IV generation failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json() as any;
      const videoId = result.data?.video_id || result.video_id;
      
      if (!videoId) {
        this.logger.error(`[${requestId}] ‚ùå No video_id in response:`, result);
        throw new Error('No video_id returned from Avatar IV API');
      }
      
      this.logger.log(`[${requestId}] ‚úÖ Digital Twin Video generation started: ${videoId}`);
      return videoId;
      
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå Error generating Digital Twin Video:`, error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è HeyGen API
   * 
   * @see https://docs.heygen.com/reference/webhook-events
   * @endpoint POST /v1/webhook/endpoint.add
   */
  async setupWebhook(): Promise<void> {
    const webhookUrl = `${process.env.WEBHOOK_URL}/heygen/webhook`;
    
    try {
      this.logger.log(`üîó Setting up HeyGen webhook: ${webhookUrl}`);
      
      const response = await fetch(`${this.baseUrl}/v1/webhook/endpoint.add`, {
        method: 'POST',
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          url: webhookUrl,
          events: [
            'photo_avatar.success',
            'photo_avatar.failed',
            'voice_clone.success',
            'voice_clone.failed',
            'video.success',
            'video.failed'
          ]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        this.logger.error(`‚ùå Failed to setup webhook: ${response.status} - ${errorText}`);
        throw new Error(`Webhook setup failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      this.logger.log(`‚úÖ HeyGen webhook setup successfully:`, result);
      
    } catch (error) {
      this.logger.error(`‚ùå Error setting up HeyGen webhook:`, error);
      throw error;
    }
  }
}
