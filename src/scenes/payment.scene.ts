import { Injectable } from '@nestjs/common';
import { Scene, SceneEnter, Action, Ctx, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ReferralsService } from '../referrals/referrals.service';
import { ReferralPaymentHook } from '../referrals/referral-payment.hook';
import { KeyboardsService } from '../keyboards/keyboards.service';
import { CustomLoggerService } from '../logger/logger.service';

interface TelegramContext extends Context {}

interface PaymentSession {
  amount: number;
  service: string;
  requestId: string;
  userId: number;
}

@Injectable()
@Scene('payment')
export class PaymentScene {
  constructor(
    private readonly referralsService: ReferralsService,
    private readonly referralPaymentHook: ReferralPaymentHook,
    private readonly keyboardsService: KeyboardsService,
    private readonly logger: CustomLoggerService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegramContext): Promise<void> {
    await this.showPaymentMenu(ctx);
  }

  @Action('payment_menu')
  async showPaymentMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `üí≥ <b>–°–ò–°–¢–ï–ú–ê –û–ü–õ–ê–¢–´</b>

üé¨ <b>–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç:</b>
‚Ä¢ –ü–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ —Å –≥–æ–ª–æ—Å–æ–º: 75‚ÇΩ
  ‚îî –°–æ–∑–¥–∞–Ω–∏–µ 3D –∞–≤–∞—Ç–∞—Ä–∞ + —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏

üéµ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ: 25‚ÇΩ
  ‚îî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –ø–æ —Ç–µ–∫—Å—Ç—É

üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ 10% —Å –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 5% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ 2% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è

üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.paymentMenu().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã:', error);
    }
  }

  @Action('payment_full_video')
  async processFullVideoPayment(@Ctx() ctx: TelegramContext): Promise<void> {
    await this.processPayment(ctx, 'full_video', 75.0);
  }

  @Action('payment_audio_only')
  async processAudioOnlyPayment(@Ctx() ctx: TelegramContext): Promise<void> {
    await this.processPayment(ctx, 'audio_only', 25.0);
  }

  @Action('payment_custom')
  async processCustomPayment(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `üí≥ <b>–ö–ê–°–¢–û–ú–ù–ê–Ø –û–ü–õ–ê–¢–ê</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):

–ü—Ä–∏–º–µ—Ä: 100`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.paymentCustom().reply_markup,
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
      (ctx as any).session = { ...(ctx as any).session, waitingForAmount: true };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', error);
    }
  }

  @On('text')
  async onText(@Ctx() ctx: TelegramContext): Promise<void> {
    const session = (ctx as any).session;
    const text = ctx.message && 'text' in ctx.message ? ctx.message.text : '';

    if (session?.waitingForAmount) {
      await this.handleAmountInput(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã.');
  }

  private async handleAmountInput(@Ctx() ctx: TelegramContext, text: string): Promise<void> {
    try {
      const amount = parseFloat(text);
      
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
        return;
      }

      if (amount > 10000) {
        await ctx.reply('‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10,000‚ÇΩ');
        return;
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      (ctx as any).session = { ...(ctx as any).session, waitingForAmount: false };

      await this.processPayment(ctx, 'custom', amount);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async processPayment(
    @Ctx() ctx: TelegramContext,
    service: string,
    amount: number
  ): Promise<void> {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      if (!userResult) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const requestId = this.generateRequestId();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
      const message = `üí≥ <b>–û–ü–õ–ê–¢–ê</b>

üé¨ <b>–°–µ—Ä–≤–∏—Å:</b> ${this.getServiceName(service)}
üí∞ <b>–°—É–º–º–∞:</b> ${amount}‚ÇΩ
üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> ${requestId}

‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</b>

üí° <i>–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º</i>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.paymentProcessing().reply_markup,
      });

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
      await this.simulatePaymentProcessing(ctx, userResult.id, service, amount, requestId);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  private async simulatePaymentProcessing(
    @Ctx() ctx: TelegramContext,
    userId: number,
    service: string,
    amount: number,
    requestId: string
  ): Promise<void> {
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞)
      const paymentSuccess = Math.random() > 0.1; // 90% —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

      if (paymentSuccess) {
        // –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        await this.referralPaymentHook.onVideoRequestCompleted(
          userId,
          amount,
          requestId,
          service
        );

        const message = `‚úÖ <b>–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù</b>

üé¨ <b>–°–µ—Ä–≤–∏—Å:</b> ${this.getServiceName(service)}
üí∞ <b>–°—É–º–º–∞:</b> ${amount}‚ÇΩ
üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> ${requestId}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>
üí° <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>`;

        await ctx.editMessageText(message, {
          parse_mode: 'HTML',
          reply_markup: this.keyboardsService.paymentSuccess().reply_markup,
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
        await this.showReferralBonusNotification(ctx, userId, amount);

      } else {
        const message = `‚ùå <b>–û–®–ò–ë–ö–ê –û–ü–õ–ê–¢–´</b>

üé¨ <b>–°–µ—Ä–≤–∏—Å:</b> ${this.getServiceName(service)}
üí∞ <b>–°—É–º–º–∞:</b> ${amount}‚ÇΩ
üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> ${requestId}

‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>
üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>`;

        await ctx.editMessageText(message, {
          parse_mode: 'HTML',
          reply_markup: this.keyboardsService.paymentError().reply_markup,
        });
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  private async showReferralBonusNotification(
    @Ctx() ctx: TelegramContext,
    userId: number,
    amount: number
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const statsResult = await this.referralsService.getReferralStats(userId);
      
      if (statsResult.referralStats && statsResult.referralStats.total_referrals > 0) {
        const stats = statsResult.referralStats;
        const message = `üéâ <b>–†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ë–û–ù–£–°–´ –ù–ê–ß–ò–°–õ–ï–ù–´!</b>

üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> ${stats.total_referrals}
üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${stats.total_earned.toFixed(2)}‚ÇΩ

üìä <b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>
‚Ä¢ 1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_1_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_2_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_3_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí° <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞!</b>`;

        await ctx.reply(message, {
          parse_mode: 'HTML',
          reply_markup: this.keyboardsService.referralSystem().reply_markup,
        });
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö:', error);
    }
  }

  @Action('payment_back')
  async backToMainMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      await (ctx as any).scene.leave();
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      // await this.menuService.sendMainMenu(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    }
  }

  @Action('payment_retry')
  async retryPayment(@Ctx() ctx: TelegramContext): Promise<void> {
    await this.showPaymentMenu(ctx);
  }

  private getServiceName(service: string): string {
    const names: Record<string, string> = {
      'full_video': '–ü–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ —Å –≥–æ–ª–æ—Å–æ–º (AKOOL + ElevenLabs)',
      'audio_only': '–¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (ElevenLabs)',
      'custom': '–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
    };
    return names[service] || service;
  }

  private generateRequestId(): string {
    return `PAY_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
   */
  private async getUserFromDatabase(telegramId: number): Promise<{ id: number } | null> {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return { id: telegramId };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }
}
