import { Ctx, Scene, SceneEnter, On, Action } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { DidService } from '../d-id/did.service';
import { Logger } from '@nestjs/common';

interface SessionData {
  photoFileId?: string;
  audioFileId?: string;
  script?: string;
  platform?: 'youtube-shorts';
  duration?: number;
  quality?: '720p' | '1080p';
  textPrompt?: string;
}

@Scene('video-generation')
export class VideoGenerationScene {
  private readonly logger = new Logger(VideoGenerationScene.name);

  constructor(private readonly didService: DidService) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Context) {
    await ctx.reply(
      'üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ!\n\n' +
      '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:\n' +
      '1. üì∏ –§–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º\n' +
      '2. üéµ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã)\n' +
      '3. üìù –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞\n' +
      '4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ\n\n' +
      '–ù–∞—á–Ω–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º:'
    );
  }

  @On('photo')
  async onPhoto(@Ctx() ctx: any) {
    try {
      const photo = ctx.message?.photo;
      if (!photo || photo.length === 0) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      const photoFileId = photo[photo.length - 1].file_id;
      (ctx.session as SessionData).photoFileId = photoFileId;

      await ctx.reply(
        '‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å (–¥–æ 1 –º–∏–Ω—É—Ç—ã):'
      );
    } catch (error) {
      this.logger.error('Error processing photo:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  @On('voice')
  async onVoice(@Ctx() ctx: any) {
    try {
      const voice = ctx.message?.voice;
      if (!voice) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
      if (voice.duration > 60) {
        await ctx.reply('‚ùå –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.');
        return;
      }

      (ctx.session as SessionData).audioFileId = voice.file_id;

      await ctx.reply(
        '‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º:'
      );
    } catch (error) {
      this.logger.error('Error processing voice:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  @On('text')
  async onText(@Ctx() ctx: any) {
    try {
      const text = ctx.message?.text;
      if (!text) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      const session = (ctx as any).session as SessionData;

      if (!session.script) {
        // –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ - —ç—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π
        session.script = text;
        await this.showPlatformSelection(ctx);
      } else if (!session.platform) {
        // –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        if (text.toLowerCase().includes('youtube') || text.toLowerCase().includes('shorts')) {
          session.platform = 'youtube-shorts';
          await this.showDurationSelection(ctx);
        } else {
          await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube Shorts. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      } else if (!session.duration) {
        // –¢—Ä–µ—Ç–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ - —ç—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const duration = parseInt(text);
        if (isNaN(duration) || duration < 15 || duration > 60) {
          await ctx.reply('‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return;
        }
        session.duration = duration;
        await this.showQualitySelection(ctx);
      } else if (!session.quality) {
        // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ - —ç—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ
        if (text.toLowerCase().includes('720') || text.toLowerCase().includes('720p')) {
          session.quality = '720p';
        } else if (text.toLowerCase().includes('1080') || text.toLowerCase().includes('1080p')) {
          session.quality = '1080p';
        } else {
          await ctx.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: 720p –∏–ª–∏ 1080p');
          return;
        }

        await this.showTextPromptInput(ctx);
      } else if (!session.textPrompt) {
        // –ü—è—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        session.textPrompt = text;
        await this.startVideoGeneration(ctx);
      }
    } catch (error) {
      this.logger.error('Error processing text:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async showPlatformSelection(@Ctx() ctx: Context) {
    await ctx.reply(
      '‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n\n' +
      'üì± YouTube Shorts (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)\n\n' +
      '–ù–∞–ø–∏—à–∏—Ç–µ "YouTube Shorts" –∏–ª–∏ "shorts":'
    );
  }

  private async showDurationSelection(@Ctx() ctx: Context) {
    await ctx.reply(
      '‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:\n\n' +
      'üìè –û—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-30 –¥–ª—è Shorts)\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥:'
    );
  }

  private async showQualitySelection(@Ctx() ctx: Context) {
    await ctx.reply(
      '‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:\n\n' +
      'üé• 720p - –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞\n' +
      'üé• 1080p - –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞\n\n' +
      '–ù–∞–ø–∏—à–∏—Ç–µ "720p" –∏–ª–∏ "1080p":'
    );
  }

  private async showTextPromptInput(@Ctx() ctx: Context) {
    await ctx.reply(
      '‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n' +
      'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ YouTube Shorts —Å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏"\n\n' +
      '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω—É–∂–µ–Ω:'
    );
  }

  private async startVideoGeneration(@Ctx() ctx: Context) {
    try {
      const session = (ctx as any).session as SessionData;
      
      await ctx.reply(
        'üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...\n\n' +
        '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
      );

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
      // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const request = {
        photoUrl: session.photoFileId || '',
        audioUrl: session.audioFileId || '',
        script: session.script || '',
        platform: session.platform || 'youtube-shorts',
        duration: session.duration || 30,
        quality: session.quality || '720p',
        textPrompt: session.textPrompt,
      };

      const result = await this.didService.generateVideo(request);

      await ctx.reply(
        '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n' +
        `üÜî ID: ${result.id}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${result.status}\n\n` +
        '–í–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. ' +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.'
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await (ctx as any).scene.leave();
    } catch (error) {
      this.logger.error('Error starting video generation:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n' +
        (error as any).message + '\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    }
  }

  @Action('cancel')
  async onCancel(@Ctx() ctx: Context) {
    await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    await (ctx as any).scene.leave();
  }
}
