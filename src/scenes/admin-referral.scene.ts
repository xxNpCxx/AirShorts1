import { Injectable } from '@nestjs/common';
import { Scene, SceneEnter, Action, Ctx, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ReferralsService } from '../referrals/referrals.service';
import { KeyboardsService } from '../keyboards/keyboards.service';
import { CustomLoggerService } from '../logger/logger.service';

interface TelegramContext extends Context {}

@Injectable()
@Scene('admin-referral')
export class AdminReferralScene {
  constructor(
    private readonly referralsService: ReferralsService,
    private readonly keyboardsService: KeyboardsService,
    private readonly logger: CustomLoggerService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegramContext): Promise<void> {
    await this.showAdminMenu(ctx);
  }

  @Action('admin_referral_menu')
  async showAdminMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `üëë <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´</b>

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –í—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralMenu().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    }
  }

  @Action('admin_referral_stats')
  async showSystemStats(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const stats = await this.referralsService.getSystemStats();
      
      const message = `üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´</b>

üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—ã:</b> ${stats.active_referrers}
üìà <b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${stats.total_referrals}
üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${stats.total_earned.toFixed(2)}‚ÇΩ

üìä <b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>
‚Ä¢ 1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.referrals_by_level[1] || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.referrals_by_level[2] || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.referrals_by_level[3] || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> ${new Date().toLocaleString('ru-RU')}`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralStats().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  @Action('admin_referral_payments')
  async showAllPayments(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const payments = await this.referralsService.getAllPayments(20, 0);
      
      let message = `üí∞ <b>–í–°–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø</b>\n\n`;
      
      if (payments.length === 0) {
        message += 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π';
      } else {
        payments.forEach((payment, index) => {
          const referrerName = (payment as any).referrer_first_name + 
            ((payment as any).referrer_username ? ` (@${(payment as any).referrer_username})` : '');
          const payerName = (payment as any).payer_first_name + 
            ((payment as any).payer_username ? ` (@${(payment as any).payer_username})` : '');
          const date = new Date(payment.created_at).toLocaleString('ru-RU');
          const status = payment.status === 'paid' ? '‚úÖ' : payment.status === 'pending' ? '‚è≥' : '‚ùå';
          
          message += `${index + 1}. ${status} ${payment.amount.toFixed(2)}‚ÇΩ\n`;
          message += `   üë§ –†–µ—Ñ–µ—Ä–µ—Ä: ${referrerName}\n`;
          message += `   üí≥ –ü–ª–∞—Ç–µ–ª—å—â–∏–∫: ${payerName}\n`;
          message += `   üìä –£—Ä–æ–≤–µ–Ω—å ${payment.level} (${payment.bonus_value}%)\n`;
          message += `   üìÖ ${date}\n\n`;
        });

        if (payments.length >= 20) {
          message += `... –∏ –µ—â–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20)`;
        }
      }

      message += `\nüîô <b>–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralMenu().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
    }
  }

  @Action('admin_referral_top')
  async showTopReferrers(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const stats = await this.referralsService.getSystemStats();
      
      let message = `üèÜ <b>–¢–û–ü –†–ï–§–ï–†–ê–õ–û–í</b>\n\n`;
      
      if (stats.top_referrers.length === 0) {
        message += 'üòî –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
      } else {
        stats.top_referrers.forEach((referrer, index) => {
          const name = referrer.first_name + (referrer.username ? ` (@${referrer.username})` : '');
          message += `${index + 1}. ${name}\n`;
          message += `   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrer.total_referrals}\n`;
          message += `   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–ª: ${referrer.total_earned.toFixed(2)}‚ÇΩ\n\n`;
        });
      }

      message += `üîô <b>–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralMenu().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    }
  }

  @Action('admin_referral_settings')
  async showSettings(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´</b>

üí∞ <b>–¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b>
‚Ä¢ 1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: 10%
‚Ä¢ 2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: 5%
‚Ä¢ 3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: 2%

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã

üí° <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralSettings().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }

  @Action('admin_referral_daily')
  async showDailyStats(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const stats = await this.referralsService.getDailyReferralStats();
      const today = new Date().toLocaleDateString('ru-RU');

      let message = `üìÖ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨</b>\n`;
      message += `üìÜ –î–∞—Ç–∞: ${today}\n\n`;
      
      message += `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.totalReferrals}\n`;
      message += `‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.totalEarnings.toFixed(2)}‚ÇΩ\n\n`;
      
      message += `üéØ <b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>\n`;
      message += `‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: ${stats.level1Referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (${stats.level1Earnings.toFixed(2)}‚ÇΩ)\n`;
      message += `‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: ${stats.level2Referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (${stats.level2Earnings.toFixed(2)}‚ÇΩ)\n`;
      message += `‚Ä¢ 3-–π —É—Ä–æ–≤–µ–Ω—å: ${stats.level3Referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (${stats.level3Earnings.toFixed(2)}‚ÇΩ)\n\n`;

      if (stats.topReferrers.length > 0) {
        message += `üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:</b>\n`;
        stats.topReferrers.forEach((referrer, index) => {
          message += `${index + 1}. ID ${referrer.user_id}: ${referrer.total_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (${referrer.total_earned.toFixed(2)}‚ÇΩ)\n`;
        });
      } else {
        message += `üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:</b>\n`;
        message += `‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n`;
      }

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.adminReferralDaily().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: this.keyboardsService.adminReferralMenu().reply_markup,
        }
      );
    }
  }

  @Action('admin_referral_back')
  async backToMainMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      await (ctx as any).scene.leave();
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      // await this.menuService.sendMainMenu(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    }
  }
}
