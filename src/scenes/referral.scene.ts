import { Injectable, Inject } from '@nestjs/common';
import { Scene, SceneEnter, Action, Ctx, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ReferralsService } from '../referrals/referrals.service';
import { KeyboardsService } from '../keyboards/keyboards.service';
import { CustomLoggerService } from '../logger/logger.service';
import { Pool } from 'pg';
import { PG_POOL } from '../database/database.module';

interface TelegramContext extends Context {}

@Injectable()
@Scene('referral')
export class ReferralScene {
  constructor(
    private readonly referralsService: ReferralsService,
    private readonly keyboardsService: KeyboardsService,
    private readonly logger: CustomLoggerService,
    @Inject(PG_POOL) private readonly pool: Pool
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegramContext): Promise<void> {
    this.logger.log('üîç [ReferralScene] SceneEnter called', 'ReferralScene');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é
    const shouldShowMenu = await this.shouldShowReferralMenu(ctx);
    if (shouldShowMenu === true) {
      await this.showReferralMenu(ctx);
    } else {
      this.logger.log('üîç [ReferralScene] Menu already shown, skipping', 'ReferralScene');
    }
  }

  @Action('referral_system')
  async showReferralMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      this.logger.log('üîç [ReferralScene] showReferralMenu called', 'ReferralScene');
      const userId = ctx.from?.id;
      const isUserIdMissing = userId === undefined || userId === null;
      if (isUserIdMissing === true) {
        this.logger.warn('‚ùå [ReferralScene] userId missing in showReferralMenu', 'ReferralScene');
        return;
      }
      this.logger.log(
        `üîç [ReferralScene] Showing referral menu for user ${userId}`,
        'ReferralScene'
      );

      const message = `üí∞ <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>

üéØ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫
‚Ä¢ –¢—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 1: 10% —Å –ø–æ–∫—É–ø–æ–∫ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 2: 5% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤  
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 3: 2% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è

üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralSystem().reply_markup,
      });
      this.logger.log('‚úÖ [ReferralScene] Referral menu shown successfully', 'ReferralScene');
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
      const isMessageNotModified =
        error instanceof Error && error.message.includes('message is not modified');

      if (isMessageNotModified === true) {
        this.logger.log(
          '‚ÑπÔ∏è [ReferralScene] Message already up to date, skipping edit',
          'ReferralScene'
        );
      } else {
        this.logger.error('‚ùå [ReferralScene] Error showing referral menu:', error);
      }
    }
  }

  @Action('referral_stats')
  async showReferralStats(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      this.logger.log('üîç [ReferralScene] showReferralStats –≤—ã–∑–≤–∞–Ω', 'ReferralScene');
      const userId = ctx.from?.id;
      const isUserIdMissingForStats = userId === undefined || userId === null;
      if (isUserIdMissingForStats === true) {
        this.logger.warn(
          '‚ùå [ReferralScene] userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ showReferralStats',
          'ReferralScene'
        );
        return;
      }
      this.logger.log(
        `üîç [ReferralScene] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
        'ReferralScene'
      );

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      const isUserResultMissing = userResult === undefined || userResult === null;
      if (isUserResultMissing === true) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const statsResult = await this.referralsService.getReferralStats(userResult.id);

      const isStatsMissing =
        statsResult.referralStats === undefined || statsResult.referralStats === null;
      if (isStatsMissing === true) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }

      const stats = statsResult.referralStats;
      const message = `üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–û–í</b>

üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${stats.total_referrals}

üìà <b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>
‚Ä¢ 1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_1_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_2_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤  
‚Ä¢ 3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: ${stats.level_3_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${stats.total_earned.toFixed(2)} ‚ÇΩ

üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> ${new Date(stats.last_updated).toLocaleString('ru-RU')}`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralStats().reply_markup,
      });
      this.logger.log('‚úÖ [ReferralScene] Referral stats shown successfully', 'ReferralScene');
    } catch (error) {
      this.logger.error('‚ùå [ReferralScene] Error showing referral stats:', error);
      this.logger.error(
        `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ - userId: ${ctx.from?.id}, error: ${error}`,
        'ReferralScene'
      );
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  @Action('referral_link')
  async showReferralLink(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const userId = ctx.from?.id;
      const isUserIdMissingForLink = userId === undefined || userId === null;
      if (isUserIdMissingForLink === true) return;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      const isUserResultMissingForLink = userResult === undefined || userResult === null;
      if (isUserResultMissingForLink === true) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const botUsername = process.env.BOT_USERNAME || 'your_bot';
      const referralLink = await this.referralsService.createReferralLink(
        userResult.id,
        botUsername
      );

      const message = `üîó <b>–í–ê–®–ê –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê</b>

${referralLink}

üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –ö–æ–≥–¥–∞ –æ–Ω–∏ –ø–µ—Ä–µ–π–¥—É—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è
3. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫

üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ!`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralSystem().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
      this.logger.error(
        `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ - userId: ${ctx.from?.id}, botUsername: ${process.env.BOT_USERNAME}, error: ${error}`,
        'ReferralScene'
      );
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏');
    }
  }

  @Action('referral_list')
  async showReferralListMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `üë• <b>–ú–û–ò –†–ï–§–ï–†–ê–õ–´</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:

‚Ä¢ 1Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 1</b> - –ø—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (10% –±–æ–Ω—É—Å)
‚Ä¢ 2Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 2</b> - —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (5% –±–æ–Ω—É—Å)  
‚Ä¢ 3Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 3</b> - —Ä–µ—Ñ–µ—Ä–∞–ª—ã 3-–≥–æ —É—Ä–æ–≤–Ω—è (2% –±–æ–Ω—É—Å)
‚Ä¢ üë• <b>–í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralList().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    }
  }

  @Action(/referral_list_level_(\d+)/)
  async showReferralListByLevel(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const userId = ctx.from?.id;
      const isUserIdMissingForLevel = userId === undefined || userId === null;
      if (isUserIdMissingForLevel === true) return;

      const match = (ctx.callbackQuery as any)?.data?.match(/referral_list_level_(\d+)/);
      const isNoMatch = match === undefined || match === null;
      if (isNoMatch === true) return;

      const level = parseInt(match[1]);

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      const isUserResultMissingForLevel = userResult === undefined || userResult === null;
      if (isUserResultMissingForLevel === true) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const referrals = await this.referralsService.getUserReferrals(userResult.id, level);

      let message = `üë• <b>–†–ï–§–ï–†–ê–õ–´ ${level}-–ì–û –£–†–û–í–ù–Ø</b>\n\n`;

      if (referrals.length === 0) {
        message += 'üòî –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ';
      } else {
        referrals.forEach((ref, index) => {
          const name =
            (ref as any).first_name + ((ref as any).last_name ? ` ${(ref as any).last_name}` : '');
          const username = (ref as any).username ? ` (@${(ref as any).username})` : '';
          const date = new Date(ref.created_at).toLocaleDateString('ru-RU');
          message += `${index + 1}. ${name}${username}\n   üìÖ ${date}\n\n`;
        });
      }

      message += `\nüîô <b>–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralList().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
    }
  }

  @Action('referral_list_all')
  async showAllReferrals(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const userId = ctx.from?.id;
      const isUserIdMissingForAll = userId === undefined || userId === null;
      if (isUserIdMissingForAll === true) return;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      const isUserResultMissingForAll = userResult === undefined || userResult === null;
      if (isUserResultMissingForAll === true) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const referrals = await this.referralsService.getUserReferrals(userResult.id);

      let message = `üë• <b>–í–°–ï –ú–û–ò –†–ï–§–ï–†–ê–õ–´</b>\n\n`;

      if (referrals.length === 0) {
        message += 'üòî –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
      } else {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        const byLevel = referrals.reduce(
          (acc, ref) => {
            const isLevelGroupMissing = acc[ref.level] === undefined || acc[ref.level] === null;
            if (isLevelGroupMissing === true) acc[ref.level] = [];
            acc[ref.level].push(ref);
            return acc;
          },
          {} as Record<number, any[]>
        );

        for (const level of [1, 2, 3]) {
          if (byLevel[level]) {
            message += `\n${level}Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å ${level}:</b>\n`;
            byLevel[level].forEach((ref, index) => {
              const name = ref.first_name + (ref.last_name ? ` ${ref.last_name}` : '');
              const username = ref.username ? ` (@${ref.username})` : '';
              const date = new Date(ref.created_at).toLocaleDateString('ru-RU');
              message += `${index + 1}. ${name}${username} - ${date}\n`;
            });
          }
        }
      }

      message += `\nüîô <b>–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralList().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
    }
  }

  @Action('referral_payments')
  async showReferralPayments(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const userId = ctx.from?.id;
      const isUserIdMissingForPayments = userId === undefined || userId === null;
      if (isUserIdMissingForPayments === true) return;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await this.getUserFromDatabase(userId);
      const isUserResultMissingForPayments = userResult === undefined || userResult === null;
      if (isUserResultMissingForPayments === true) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const payments = await this.referralsService.getUserPayments(userResult.id);

      let message = `üí∞ <b>–ò–°–¢–û–†–ò–Ø –ù–ê–ß–ò–°–õ–ï–ù–ò–ô</b>\n\n`;

      if (payments.length === 0) {
        message += 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π';
      } else {
        payments.slice(0, 10).forEach((payment, index) => {
          const payerName =
            (payment as any).first_name +
            ((payment as any).last_name ? ` ${(payment as any).last_name}` : '');
          const payerUsername = (payment as any).username ? ` (@${(payment as any).username})` : '';
          const date = new Date(payment.created_at).toLocaleDateString('ru-RU');
          const status =
            payment.status === 'paid' ? '‚úÖ' : payment.status === 'pending' ? '‚è≥' : '‚ùå';

          message += `${index + 1}. ${status} ${payment.amount.toFixed(2)} ‚ÇΩ\n`;
          message += `   üë§ ${payerName}${payerUsername}\n`;
          message += `   üìä –£—Ä–æ–≤–µ–Ω—å ${payment.level} (${payment.bonus_value}%)\n`;
          message += `   üìÖ ${date}\n\n`;
        });

        if (payments.length > 10) {
          message += `... –∏ –µ—â–µ ${payments.length - 10} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`;
        }
      }

      message += `\nüîô <b>–ù–∞–∑–∞–¥ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ</b>`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralSystem().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', error);
      this.logger.error(
        `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ - userId: ${ctx.from?.id}, error: ${error}`,
        'ReferralScene'
      );
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  @Action('referral_info')
  async showReferralInfo(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      const message = `‚ÑπÔ∏è <b>–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫
‚Ä¢ –¢—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π

üìä <b>–£—Ä–æ–≤–Ω–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b>
‚Ä¢ 1Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 1:</b> 10% —Å –ø–æ–∫—É–ø–æ–∫ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 2Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 2:</b> 5% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 3Ô∏è‚É£ <b>–£—Ä–æ–≤–µ–Ω—å 3:</b> 2% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è

üí∞ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
2. –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
3. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø–æ–∫—É–ø–∫—É
4. –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å

‚è∞ <b>–ö–æ–≥–¥–∞ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å—ã:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç–æ–∂–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤–≥–ª—É–±—å`;

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: this.keyboardsService.referralSystem().reply_markup,
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  @Action('main_menu')
  async backToMainMenu(@Ctx() ctx: TelegramContext): Promise<void> {
    try {
      await (ctx as any).scene.leave();
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      // await this.menuService.sendMainMenu(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
   */
  private async getUserFromDatabase(telegramId: number): Promise<{ id: number } | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
      const result = await this.pool.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
      
      if (result.rows.length === 0) {
        this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        return null;
      }
      
      return { id: result.rows[0].id };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
   */
  private async shouldShowReferralMenu(ctx: TelegramContext): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query —Å –¥–∞–Ω–Ω—ã–º–∏
      const hasCallbackQuery = ctx.callbackQuery && 'data' in ctx.callbackQuery;
      if (hasCallbackQuery === false) {
        return true; // –ï—Å–ª–∏ –Ω–µ—Ç callback_query, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      }

      const callbackData = (ctx.callbackQuery as any).data;

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
      if (callbackData === 'referral_system') {
        return true;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      const isReferralAction = callbackData?.startsWith('referral_');
      if (isReferralAction === true) {
        return false;
      }

      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é:', error);
      return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    }
  }
}
