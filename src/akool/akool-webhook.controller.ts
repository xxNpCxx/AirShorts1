import { Controller, Post, Body, Logger, Inject } from "@nestjs/common";
import { Telegraf } from "telegraf";
import { getBotToken } from "nestjs-telegraf";

@Controller("akool/webhook")
export class AkoolWebhookController {
  private readonly logger = new Logger(AkoolWebhookController.name);

  constructor(
    @Inject(getBotToken("airshorts1_bot")) private readonly bot: Telegraf,
  ) {}

  @Post()
  async handleWebhook(@Body() body: any) {
    this.logger.log("üì• AKOOL webhook received:", body);
    
    try {
      // AKOOL –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (body.dataEncrypt) {
        this.logger.log("üîì –ü–æ–ª—É—á–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç AKOOL");
        this.logger.log("üìã Webhook —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∏–¥–µ–æ");
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        try {
          const decryptedData = await this.decryptWebhookData(body);
          this.logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:", decryptedData);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          // status: 1=–æ—á–µ—Ä–µ–¥—å, 2=–æ–±—Ä–∞–±–æ—Ç–∫–∞, 3=–≥–æ—Ç–æ–≤–æ, 4=–æ—à–∏–±–∫–∞
          const { _id, status, type, url } = decryptedData;
          
          this.logger.log(`üìä –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
          this.logger.log(`  ID: ${_id}`);
          this.logger.log(`  Status: ${status}`);
          this.logger.log(`  Type: ${type}`);
          this.logger.log(`  URL: ${url}`);
          
          if (status === 3) { // 3 = –≥–æ—Ç–æ–≤–æ
            this.logger.log(`üéâ ${type} –≥–æ—Ç–æ–≤–æ! ID: ${_id}, URL: ${url}`);
            
            if (url) {
              await this.sendVideoToUser(url, _id);
            }
          } else if (status === 4) { // 4 = –æ—à–∏–±–∫–∞
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${type} –¥–ª—è –∑–∞–¥–∞—á–∏: ${_id}`);
            await this.notifyUserError(_id);
          } else {
            this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å ${type}: ${status} (${status === 1 ? '–æ—á–µ—Ä–µ–¥—å' : '–æ–±—Ä–∞–±–æ—Ç–∫–∞'})`);
          }
        } catch (decryptError) {
          this.logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:", decryptError);
          this.logger.log("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...");
        }
        
        return { status: "ok", message: "Webhook processed" };
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è API)
      if (body.data && body.data.video_status === 2) { // 2 = –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        const { video_id, video, task_id } = body.data;
        
        this.logger.log(`‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ID: ${video_id}, URL: ${video}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (video) {
          await this.sendVideoToUser(video, task_id);
        }
      } else if (body.data && body.data.video_status === 3) { // 3 = –æ—à–∏–±–∫–∞
        const { task_id } = body.data;
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏: ${task_id}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        await this.notifyUserError(task_id);
      } else {
        this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${body.data?.video_status} (–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)`);
      }
      
      return { status: "ok" };
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", error);
      return { status: "error", message: error.message };
    }
  }

  private async sendVideoToUser(videoUrl: string, taskId: string) {
    try {
      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å userId –ø–æ taskId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const chatId = process.env.TEST_CHAT_ID || "161693997"; // –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      
      await this.bot.telegram.sendVideo(chatId, videoUrl, {
        caption: `üéâ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìã Task ID: ${taskId}\nüîó –°—Å—ã–ª–∫–∞: ${videoUrl}`
      });
      
      this.logger.log(`‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:", error);
    }
  }

  private async notifyUserError(taskId: string) {
    try {
      const chatId = process.env.TEST_CHAT_ID || "161693997";
      
      await this.bot.telegram.sendMessage(chatId, 
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.\n\nüìã Task ID: ${taskId}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
      );
      
      this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:", error);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö –æ—Ç AKOOL —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   * https://docs.akool.com/ai-tools-suite/webhook
   */
  private async decryptWebhookData(body: any): Promise<any> {
    try {
      const { dataEncrypt, signature, timestamp, nonce } = body;
      
      this.logger.log("üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö AKOOL...");
      this.logger.log(`üìä Signature: ${signature}`);
      this.logger.log(`‚è∞ Timestamp: ${timestamp}`);
      this.logger.log(`üî¢ Nonce: ${nonce}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const clientId = process.env.AKOOL_CLIENT_ID;
      const clientSecret = process.env.AKOOL_CLIENT_SECRET;
      
      if (!clientId || !clientSecret) {
        throw new Error("AKOOL_CLIENT_ID –∏ AKOOL_CLIENT_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      }
      
      this.logger.log(`üîë Client ID: ${clientId}`);
      this.logger.log(`üîë Client Secret: ${clientSecret.substring(0, 8)}...`);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      const isValidSignature = this.verifySignature(clientId, timestamp, nonce, dataEncrypt, signature);
      if (!isValidSignature) {
        throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook");
      }
      
      this.logger.log("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      
      // 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const decryptedData = this.decryptAES(dataEncrypt, clientId, clientSecret);
      this.logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:", decryptedData);
      
      return JSON.parse(decryptedData);
      
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –¥–∞–Ω–Ω—ã—Ö:", error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AKOOL
   * signature = sha1(sort(clientId, timestamp, nonce, dataEncrypt))
   */
  private verifySignature(clientId: string, timestamp: number, nonce: string, dataEncrypt: string, signature: string): boolean {
    try {
      const crypto = require('crypto');
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
      
      // –í—ã—á–∏—Å–ª—è–µ–º SHA1 —Ö–µ—à
      const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
      
      this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:`);
      this.logger.log(`  –û–∂–∏–¥–∞–µ–º–∞—è: ${signature}`);
      this.logger.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è: ${calculatedSignature}`);
      
      return calculatedSignature === signature;
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:", error);
      return false;
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ AES-192-CBC —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AKOOL
   * data = AES_Decrypt(dataEncrypt, clientSecret, clientId)
   */
  private decryptAES(dataEncrypt: string, clientId: string, clientSecret: string): string {
    try {
      const crypto = require('crypto');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –∫–ª—é—á –¥–æ 24 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ AKOOL)
      let processedClientSecret = clientSecret;
      if (clientSecret.length > 24) {
        this.logger.warn(`‚ö†Ô∏è ClientSecret —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${clientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 24`);
        processedClientSecret = clientSecret.substring(0, 24);
      } else if (clientSecret.length < 24) {
        throw new Error(`ClientSecret –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ: ${clientSecret.length}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É IV (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 16 –±–∞–π—Ç)
      if (clientId.length !== 16) {
        throw new Error(`ClientId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 16 –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ: ${clientId.length}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV
      const key = Buffer.from(processedClientSecret, 'utf8');
      const iv = Buffer.from(clientId, 'utf8');
      
      this.logger.log(`üîë –ö–ª—é—á (${key.length} –±–∞–π—Ç): ${key.toString('hex')}`);
      this.logger.log(`üîë IV (${iv.length} –±–∞–π—Ç): ${iv.toString('hex')}`);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC
      const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
      let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
      decrypted += decipher.final('utf8');
      
      return decrypted;
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:", error);
      throw error;
    }
  }
}
