import { Controller, Post, Body, Logger, Inject } from "@nestjs/common";
import { Telegraf } from "telegraf";
import { getBotToken } from "nestjs-telegraf";

@Controller("akool/webhook")
export class AkoolWebhookController {
  private readonly logger = new Logger(AkoolWebhookController.name);

  constructor(
    @Inject(getBotToken("airshorts1_bot")) private readonly bot: Telegraf,
  ) {}

  @Post()
  async handleWebhook(@Body() body: any) {
    this.logger.log("üì• AKOOL webhook received:", body);
    
    try {
      // AKOOL –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (body.dataEncrypt) {
        this.logger.log("üîì –ü–æ–ª—É—á–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç AKOOL");
        this.logger.log("üìã Webhook —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∏–¥–µ–æ");
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        try {
          const decryptedData = await this.decryptWebhookData(body);
          this.logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:", decryptedData);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (decryptedData.video_status === 2) { // 2 = –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            const { video_id, video, task_id } = decryptedData;
            this.logger.log(`üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ID: ${video_id}, URL: ${video}`);
            
            if (video) {
              await this.sendVideoToUser(video, task_id);
            }
          } else if (decryptedData.video_status === 3) { // 3 = –æ—à–∏–±–∫–∞
            const { task_id } = decryptedData;
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏: ${task_id}`);
            await this.notifyUserError(task_id);
          } else {
            this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${decryptedData.video_status} (–æ–±—Ä–∞–±–æ—Ç–∫–∞)`);
          }
        } catch (decryptError) {
          this.logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:", decryptError);
          this.logger.log("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...");
        }
        
        return { status: "ok", message: "Webhook processed" };
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è API)
      if (body.data && body.data.video_status === 2) { // 2 = –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        const { video_id, video, task_id } = body.data;
        
        this.logger.log(`‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ID: ${video_id}, URL: ${video}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (video) {
          await this.sendVideoToUser(video, task_id);
        }
      } else if (body.data && body.data.video_status === 3) { // 3 = –æ—à–∏–±–∫–∞
        const { task_id } = body.data;
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏: ${task_id}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        await this.notifyUserError(task_id);
      } else {
        this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${body.data?.video_status} (–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)`);
      }
      
      return { status: "ok" };
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", error);
      return { status: "error", message: error.message };
    }
  }

  private async sendVideoToUser(videoUrl: string, taskId: string) {
    try {
      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å userId –ø–æ taskId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const chatId = process.env.TEST_CHAT_ID || "161693997"; // –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      
      await this.bot.telegram.sendVideo(chatId, videoUrl, {
        caption: `üéâ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìã Task ID: ${taskId}\nüîó –°—Å—ã–ª–∫–∞: ${videoUrl}`
      });
      
      this.logger.log(`‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:", error);
    }
  }

  private async notifyUserError(taskId: string) {
    try {
      const chatId = process.env.TEST_CHAT_ID || "161693997";
      
      await this.bot.telegram.sendMessage(chatId, 
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.\n\nüìã Task ID: ${taskId}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
      );
      
      this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:", error);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –¥–∞–Ω–Ω—ã—Ö –æ—Ç AKOOL
   */
  private async decryptWebhookData(body: any): Promise<any> {
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
      const { dataEncrypt, signature, timestamp, nonce } = body;
      
      this.logger.log("üîç –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ...");
      this.logger.log(`üìä Signature: ${signature}`);
      this.logger.log(`‚è∞ Timestamp: ${timestamp}`);
      this.logger.log(`üî¢ Nonce: ${nonce}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const webhookSecret = process.env.AKOOL_WEBHOOK_SECRET;
      const clientSecret = process.env.AKOOL_CLIENT_SECRET;
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏
      const keysToTry = [
        { name: "AKOOL_WEBHOOK_SECRET", key: webhookSecret },
        { name: "AKOOL_CLIENT_SECRET", key: clientSecret },
        { name: "Signature as key", key: signature }
      ];
      
      for (const keyInfo of keysToTry) {
        if (keyInfo.key) {
          this.logger.log(`üîë –ü—Ä–æ–±—É–µ–º –∫–ª—é—á: ${keyInfo.name}`);
        
          // –ú–µ—Ç–æ–¥ 1: AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
          try {
            const crypto = require('crypto');
            const key = Buffer.from(keyInfo.key, 'hex');
            const iv = Buffer.from(nonce, 'hex');
            
            const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
            let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
            decrypted += decipher.final('utf8');
            
            this.logger.log(`‚úÖ AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} —É—Å–ø–µ—à–Ω–∞:`, decrypted);
            return JSON.parse(decrypted);
          } catch (aesError) {
            this.logger.debug(`‚ùå AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, aesError.message);
          }
          
          // –ú–µ—Ç–æ–¥ 2: XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
          try {
            const dataBuffer = Buffer.from(dataEncrypt, 'base64');
            const keyBuffer = Buffer.from(keyInfo.key, 'hex');
            const decrypted = Buffer.alloc(dataBuffer.length);
            
            for (let i = 0; i < dataBuffer.length; i++) {
              decrypted[i] = dataBuffer[i] ^ keyBuffer[i % keyBuffer.length];
            }
            
            const result = decrypted.toString('utf8');
            this.logger.log(`‚úÖ XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} —É—Å–ø–µ—à–Ω–∞:`, result);
            return JSON.parse(result);
          } catch (xorError) {
            this.logger.debug(`‚ùå XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, xorError.message);
          }
          
          // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Å—Ç–æ–µ XOR —Å –∫–ª—é—á–æ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π
          try {
            const dataBuffer = Buffer.from(dataEncrypt, 'base64');
            const keyBuffer = Buffer.from(keyInfo.key, 'utf8');
            const decrypted = Buffer.alloc(dataBuffer.length);
            
            for (let i = 0; i < dataBuffer.length; i++) {
              decrypted[i] = dataBuffer[i] ^ keyBuffer[i % keyBuffer.length];
            }
            
            const result = decrypted.toString('utf8');
            this.logger.log(`‚úÖ String XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} —É—Å–ø–µ—à–Ω–∞:`, result);
            return JSON.parse(result);
          } catch (stringXorError) {
            this.logger.debug(`‚ùå String XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å ${keyInfo.name} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, stringXorError.message);
          }
        }
      }
      
      this.logger.warn("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      this.logger.log("üí° –î–æ–±–∞–≤—å—Ç–µ AKOOL_CLIENT_SECRET –≤ .env —Ñ–∞–π–ª");
      
      // Fallback: —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∫–ª—é—á–∞
      this.logger.log("üîÑ –ü—Ä–æ–±—É–µ–º fallback –º–µ—Ç–æ–¥—ã...");
      
      // –ú–µ—Ç–æ–¥ 3: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      try {
        const base64Decoded = Buffer.from(dataEncrypt, 'base64').toString('utf-8');
        this.logger.log("üîì Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:", base64Decoded);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        const jsonData = JSON.parse(base64Decoded);
        this.logger.log("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:", jsonData);
        return jsonData;
      } catch (base64Error) {
        this.logger.debug("‚ùå Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:", base64Error.message);
      }
      
      // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–æ–µ XOR —Å nonce
      try {
        const dataBuffer = Buffer.from(dataEncrypt, 'base64');
        const nonceBuffer = Buffer.from(nonce, 'hex');
        const decrypted = Buffer.alloc(dataBuffer.length);
        
        for (let i = 0; i < dataBuffer.length; i++) {
          decrypted[i] = dataBuffer[i] ^ nonceBuffer[i % nonceBuffer.length];
        }
        
        const result = decrypted.toString('utf8');
        this.logger.log("‚úÖ XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:", result);
        return JSON.parse(result);
      } catch (xorError) {
        this.logger.debug("‚ùå XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:", xorError.message);
      }
      
      throw new Error("–í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å. –ù—É–∂–µ–Ω AKOOL_WEBHOOK_SECRET");
      
    } catch (error) {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –¥–∞–Ω–Ω—ã—Ö:", error);
      throw error;
    }
  }
}
