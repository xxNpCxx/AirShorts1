import { Controller, Post, Body, Logger, Inject } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { Pool } from 'pg';
import { PG_POOL } from '../database/database.module';
import { ConfigService } from '@nestjs/config';
import { AkoolProgressService } from './akool-progress.service';
import { ReferralPaymentHook } from '../referrals/referral-payment.hook';
import {
  AkoolWebhookBody,
  AkoolDecryptedData,
  AkoolWebhookLog,
  AkoolVideoRequestRecord,
  validateAkoolWebhookBody,
  validateAkoolDecryptedData,
} from '../types';

@Controller('akool/webhook')
export class AkoolWebhookController {
  private readonly logger = new Logger(AkoolWebhookController.name);

  constructor(
    @Inject(getBotToken('airshorts1_bot')) private readonly bot: Telegraf,
    @Inject(PG_POOL) private readonly pool: Pool,
    private readonly configService: ConfigService,
    private readonly progressService: AkoolProgressService,
    private readonly referralPaymentHook: ReferralPaymentHook
  ) {}

  @Post()
  async handleWebhook(@Body() body: unknown) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateAkoolWebhookBody(body)) {
      this.logger.error('‚ùå Invalid AKOOL webhook body received');
      return { success: false, error: 'Invalid webhook body format' };
    }
    this.logger.log('üì• AKOOL webhook received:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç webhook
    const webhookId = this.generateWebhookId(body);
    if (await this.isWebhookProcessed(webhookId)) {
      this.logger.log(`‚ö†Ô∏è Webhook —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${webhookId}`);
      return { status: 'ok', message: 'Webhook already processed' };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –≤ –ë–î
    await this.saveWebhookLog('akool', 'video_status', body);

    try {
      // AKOOL –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (body.dataEncrypt) {
        this.logger.log('üîì –ü–æ–ª—É—á–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç AKOOL');
        this.logger.log('üìã Webhook —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∏–¥–µ–æ');

        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        try {
          const decryptedData = await this.decryptWebhookData(body);
          this.logger.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:', decryptedData);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          // status: 1=–æ—á–µ—Ä–µ–¥—å, 2=–æ–±—Ä–∞–±–æ—Ç–∫–∞, 3=–≥–æ—Ç–æ–≤–æ, 4=–æ—à–∏–±–∫–∞
          const { _id, status, type, url } = decryptedData;

          this.logger.log(`üìä –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
          this.logger.log(`  ID: ${_id}`);
          this.logger.log(`  Status: ${status}`);
          this.logger.log(`  Type: ${type}`);
          this.logger.log(`  URL: ${url}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
          const dbStatus = status === 3 ? 'completed' : status === 4 ? 'failed' : 'processing';
          await this.updateVideoStatus(
            _id,
            dbStatus,
            url,
            status === 4 ? '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' : undefined
          );

          if (status === 3) {
            // 3 = –≥–æ—Ç–æ–≤–æ
            this.logger.log(`üéâ ${type} –≥–æ—Ç–æ–≤–æ! ID: ${_id}, URL: ${url}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 100%
            await this.progressService.updateProgress(_id, 'completed', 100, 'üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!');

            if (url) {
              await this.sendVideoToUser(url, _id);
            }
          } else if (status === 4) {
            // 4 = –æ—à–∏–±–∫–∞
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${type} –¥–ª—è –∑–∞–¥–∞—á–∏: ${_id}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—à–∏–±–∫—É
            await this.progressService.updateProgress(_id, 'failed', 0, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');

            await this.notifyUserError(_id);
          } else {
            // 1 = –æ—á–µ—Ä–µ–¥—å, 2 = –æ–±—Ä–∞–±–æ—Ç–∫–∞
            const progress = status === 1 ? 10 : 50;
            const message =
              status === 1 ? '‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...' : 'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...';

            this.logger.log(
              `‚è≥ –°—Ç–∞—Ç—É—Å ${type}: ${status} (${status === 1 ? '–æ—á–µ—Ä–µ–¥—å' : '–æ–±—Ä–∞–±–æ—Ç–∫–∞'})`
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await this.progressService.updateProgress(_id, 'processing', progress, message);
          }
        } catch (decryptError) {
          this.logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:', decryptError);
          this.logger.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...');
        }

        // –û—Ç–º–µ—á–∞–µ–º webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
        await this.markWebhookProcessed(webhookId);
        return { status: 'ok', message: 'Webhook processed' };
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è API)
      if (body.data && body.data.video_status === 2) {
        // 2 = –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        const { video_id, video, task_id } = body.data;

        this.logger.log(`‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ID: ${video_id}, URL: ${video}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (video) {
          await this.sendVideoToUser(video, task_id);
        }
      } else if (body.data && body.data.video_status === 3) {
        // 3 = –æ—à–∏–±–∫–∞
        const { task_id } = body.data;
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏: ${task_id}`);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        await this.notifyUserError(task_id);
      } else {
        this.logger.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${body.data?.video_status} (–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)`);
      }

      return { status: 'ok' };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      return { status: 'error', message: error.message };
    }
  }

  private async sendVideoToUser(videoUrl: string, taskId: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º userId –ø–æ taskId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const videoRequest = await this.findVideoRequestByTaskId(taskId);

      if (!videoRequest) {
        this.logger.error(`‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è taskId: ${taskId}`);
        return;
      }

      const userId = videoRequest.user_id;
      this.logger.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);

      await this.bot.telegram.sendVideo(userId, videoUrl, {
        caption: `üéâ **–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\nüìã Task ID: ${taskId}\nüîó –°—Å—ã–ª–∫–∞: ${videoUrl}\n\n‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`,
        parse_mode: 'Markdown',
      });

      this.logger.log(`‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', error);
    }
  }

  private async notifyUserError(taskId: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º userId –ø–æ taskId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const videoRequest = await this.findVideoRequestByTaskId(taskId);

      if (!videoRequest) {
        this.logger.error(`‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è taskId: ${taskId}`);
        return;
      }

      const userId = videoRequest.user_id;
      this.logger.log(
        `üì± –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`
      );

      await this.bot.telegram.sendMessage(
        userId,
        `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ**\n\n–ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        { parse_mode: 'Markdown' }
      );

      this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö –æ—Ç AKOOL —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   * https://docs.akool.com/ai-tools-suite/webhook
   */
  private async decryptWebhookData(body: AkoolWebhookBody): Promise<AkoolDecryptedData> {
    try {
      const { dataEncrypt, signature, timestamp, nonce } = body;

      this.logger.log('üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö AKOOL...');
      this.logger.log(`üìä Signature: ${signature}`);
      this.logger.log(`‚è∞ Timestamp: ${timestamp}`);
      this.logger.log(`üî¢ Nonce: ${nonce}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const clientId = process.env.AKOOL_CLIENT_ID;
      const clientSecret = process.env.AKOOL_CLIENT_SECRET;

      if (!clientId || !clientSecret) {
        throw new Error(
          'AKOOL_CLIENT_ID –∏ AKOOL_CLIENT_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'
        );
      }

      this.logger.log(`üîë Client ID: ${clientId}`);
      this.logger.log(`üîë Client Secret: ${clientSecret.substring(0, 8)}...`);

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      const isValidSignature = this.verifySignature(
        clientId,
        timestamp,
        nonce,
        dataEncrypt,
        signature
      );
      if (!isValidSignature) {
        throw new Error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook');
      }

      this.logger.log('‚úÖ –ü–æ–¥–ø–∏—Å—å webhook –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const decryptedData = this.decryptAES(dataEncrypt, clientId, clientSecret);
      this.logger.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:', decryptedData);

      return JSON.parse(decryptedData);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AKOOL
   * https://docs.akool.com/ai-tools-suite/webhook
   *
   * signature = sha1(sort(clientId, timestamp, nonce, dataEncrypt))
   */
  private verifySignature(
    clientId: string,
    timestamp: number,
    nonce: string,
    dataEncrypt: string,
    signature: string
  ): boolean {
    try {
      const crypto = require('crypto');

      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');

      // –í—ã—á–∏—Å–ª—è–µ–º SHA1 —Ö–µ—à
      const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');

      this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:`);
      this.logger.log(
        `  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [${clientId}, ${timestamp}, ${nonce}, ${dataEncrypt.substring(0, 20)}...]`
      );
      this.logger.log(`  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${sortedParams.substring(0, 100)}...`);
      this.logger.log(`  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å: ${signature}`);
      this.logger.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: ${calculatedSignature}`);

      const isValid = calculatedSignature === signature;
      this.logger.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${isValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);

      return isValid;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:', error);
      return false;
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ AES-192-CBC —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AKOOL
   * https://docs.akool.com/ai-tools-suite/webhook
   *
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç crypto-js –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
   */
  private decryptAES(dataEncrypt: string, clientId: string, clientSecret: string): string {
    try {
      const CryptoJS = require('crypto-js');

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const actualClientId = this.configService.get<string>('AKOOL_CLIENT_ID');
      const actualClientSecret = this.configService.get<string>('AKOOL_CLIENT_SECRET');

      this.logger.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`);
      this.logger.log(`üîë AKOOL_CLIENT_ID: ${actualClientId}`);
      this.logger.log(`üîë AKOOL_CLIENT_SECRET: ${actualClientSecret?.substring(0, 10)}...`);

      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const aesKey = actualClientSecret;
      const key = CryptoJS.enc.Utf8.parse(aesKey);
      const iv = CryptoJS.enc.Utf8.parse(actualClientId);

      this.logger.log(`üîë –ö–ª—é—á (UTF-8): ${key.toString(CryptoJS.enc.Hex)} (${key.sigBytes} –±–∞–π—Ç)`);
      this.logger.log(`üîë IV (UTF-8): ${iv.toString(CryptoJS.enc.Hex)} (${iv.sigBytes} –±–∞–π—Ç)`);

      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC —Å PKCS#7 padding –∏—Å–ø–æ–ª—å–∑—É—è crypto-js
      const decrypted = CryptoJS.AES.decrypt(dataEncrypt, key, {
        iv,
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7,
      });

      const result = decrypted.toString(CryptoJS.enc.Utf8);
      this.logger.log('‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞');
      return result;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è webhook
   */
  private generateWebhookId(body: AkoolWebhookBody): string {
    const crypto = require('crypto');
    const content = JSON.stringify(body);
    return crypto.createHash('sha256').update(content).digest('hex');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ webhook —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
   */
  private async isWebhookProcessed(webhookId: string): Promise<boolean> {
    try {
      const result = await this.pool.query(
        `SELECT id FROM webhook_logs WHERE webhook_id = $1 AND processed = true`,
        [webhookId]
      );
      return result.rows.length > 0;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', error);
      return false;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
   */
  private async markWebhookProcessed(webhookId: string): Promise<void> {
    try {
      await this.pool.query(`UPDATE webhook_logs SET processed = true WHERE webhook_id = $1`, [
        webhookId,
      ]);
      this.logger.debug(`‚úÖ Webhook –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π: ${webhookId}`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ webhook:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ webhook –ª–æ–≥–∞ –≤ –ë–î
   */
  private async saveWebhookLog(
    service: string,
    webhookType: string,
    payload: AkoolWebhookBody
  ): Promise<void> {
    try {
      const webhookId = this.generateWebhookId(payload);
      await this.pool.query(
        `INSERT INTO webhook_logs (service, webhook_type, payload, webhook_id, processed, created_at) 
         VALUES ($1, $2, $3, $4, false, NOW())`,
        [service, webhookType, JSON.stringify(payload), webhookId]
      );
      this.logger.debug(`üíæ Webhook –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${service}/${webhookType}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è webhook –ª–æ–≥–∞:`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ –ë–î
   */
  private async updateVideoStatus(
    taskId: string,
    status: string,
    resultUrl?: string,
    errorMessage?: string
  ): Promise<void> {
    try {
      const updateFields = ['status = $2', 'updated_at = NOW()'];
      const values = [taskId, status];
      let paramIndex = 3;

      if (resultUrl) {
        updateFields.push(`result_url = $${paramIndex++}`);
        values.push(resultUrl);
      }

      if (errorMessage) {
        updateFields.push(`error_message = $${paramIndex++}`);
        values.push(errorMessage);
      }

      if (status === 'completed' || status === 'failed') {
        updateFields.push(`completed_at = NOW()`);
      }

      await this.pool.query(
        `UPDATE video_requests 
         SET ${updateFields.join(', ')} 
         WHERE task_id = $1`,
        values
      );

      this.logger.debug(`üíæ –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${taskId} -> ${status}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ:`, error);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ task_id
   */
  private async findVideoRequestByTaskId(taskId: string): Promise<AkoolVideoRequestRecord | null> {
    try {
      const result = await this.pool.query('SELECT * FROM video_requests WHERE task_id = $1', [
        taskId,
      ]);
      return result.rows[0] || null;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
      return null;
    }
  }
}
