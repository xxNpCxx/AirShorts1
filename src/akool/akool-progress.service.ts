import { Injectable, Logger, Inject } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { Pool } from 'pg';
import { PG_POOL } from '../database/database.module';
import { ConfigService } from '@nestjs/config';

interface ProgressUpdate {
  taskId: string;
  userId: number;
  status: 'queued' | 'processing' | 'completed' | 'failed';
  progress: number; // 0-100
  message: string;
  messageId?: number; // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
}

@Injectable()
export class AkoolProgressService {
  private readonly logger = new Logger(AkoolProgressService.name);
  private readonly progressTimers = new Map<string, ReturnType<typeof setInterval>>();

  constructor(
    @Inject(getBotToken('airshorts1_bot')) private readonly bot: Telegraf,
    @Inject(PG_POOL) private readonly pool: Pool,
    private readonly configService: ConfigService
  ) {}

  /**
   * –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  async startProgressTracking(taskId: string, userId: number): Promise<void> {
    this.logger.log(
      `üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    const initialMessage = await this.sendProgressMessage(userId, {
      taskId,
      userId,
      status: 'queued',
      progress: 0,
      message: 'üé¨ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...',
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    if (initialMessage) {
      await this.saveProgressMessageId(taskId, initialMessage.message_id);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    this.startStatusPolling(taskId, userId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
   */
  private async sendProgressMessage(
    userId: number,
    update: ProgressUpdate
  ): Promise<{ message_id: number } | null> {
    try {
      const progressBar = this.createProgressBar(update.progress);
      const statusEmoji = this.getStatusEmoji(update.status);

      const message = `${statusEmoji} **${update.message}**\n\n${progressBar}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${update.progress}%`;

      const sentMessage = await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'Markdown',
      });

      this.logger.log(`üì± –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${update.progress}%`);
      return sentMessage;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async updateProgress(
    taskId: string,
    status: ProgressUpdate['status'],
    progress: number,
    message: string
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
      const videoRequest = await this.findVideoRequestByTaskId(taskId);
      if (!videoRequest) {
        this.logger.error(`‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${taskId}`);
        return;
      }

      const userId = videoRequest.user_id;
      const messageId = videoRequest.progress_message_id;

      // –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (messageId) {
        await this.editProgressMessage(userId, messageId, {
          taskId,
          userId,
          status,
          progress,
          message,
        });
      } else {
        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendProgressMessage(userId, {
          taskId,
          userId,
          status,
          progress,
          message,
        });
      }

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      if (status === 'completed' || status === 'failed') {
        this.stopProgressTracking(taskId);
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
   */
  private async editProgressMessage(
    userId: number,
    messageId: number,
    update: ProgressUpdate
  ): Promise<void> {
    try {
      const progressBar = this.createProgressBar(update.progress);
      const statusEmoji = this.getStatusEmoji(update.status);

      const message = `${statusEmoji} **${update.message}**\n\n${progressBar}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${update.progress}%`;

      await this.bot.telegram.editMessageText(userId, messageId, undefined, message, {
        parse_mode: 'Markdown',
      });

      this.logger.log(`üì± –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${update.progress}%`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   */
  private createProgressBar(progress: number): string {
    const totalBlocks = 10;
    const filledBlocks = Math.round((progress / 100) * totalBlocks);
    const emptyBlocks = totalBlocks - filledBlocks;

    const filled = '‚ñà'.repeat(filledBlocks);
    const empty = '‚ñë'.repeat(emptyBlocks);

    return `[${filled}${empty}]`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusEmoji(status: ProgressUpdate['status']): string {
    switch (status) {
      case 'queued':
        return '‚è≥';
      case 'processing':
        return 'üîÑ';
      case 'completed':
        return '‚úÖ';
      case 'failed':
        return '‚ùå';
      default:
        return 'üìä';
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  private startStatusPolling(taskId: string, userId: number): void {
    const pollingInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    const maxAttempts = 20; // 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

    const timer = setInterval(() => {
      attempts++;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º void –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      void (async () => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
          const status = await this.checkVideoStatus(taskId);

          if (status) {
            await this.updateProgress(taskId, status.status, status.progress, status.message);

            // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if (status.status === 'completed' || status.status === 'failed') {
              clearInterval(timer);
              this.progressTimers.delete(taskId);
            }
          }
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${taskId}:`, error);
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        if (attempts >= maxAttempts) {
          this.logger.warn(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
          clearInterval(timer);
          this.progressTimers.delete(taskId);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–∞–π–º–∞—É—Ç–µ
          await this.updateProgress(
            taskId,
            'failed',
            0,
            '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
          );
        }
      })();
    }, pollingInterval);

    this.progressTimers.set(taskId, timer);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  stopProgressTracking(taskId: string): void {
    const timer = this.progressTimers.get(taskId);
    if (timer) {
      clearInterval(timer);
      this.progressTimers.delete(taskId);
      this.logger.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API
   */
  private async checkVideoStatus(
    taskId: string
  ): Promise<{ status: ProgressUpdate['status']; progress: number; message: string } | null> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      status: 'processing',
      progress: 50,
      message: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...',
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ task_id
   */
  private async findVideoRequestByTaskId(
    taskId: string
  ): Promise<{ user_id: number; progress_message_id?: number } | null> {
    try {
      const result = await this.pool.query('SELECT * FROM video_requests WHERE task_id = $1', [
        taskId,
      ]);
      return result.rows[0] || null;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
   */
  private async saveProgressMessageId(taskId: string, messageId: number): Promise<void> {
    try {
      await this.pool.query(
        'UPDATE video_requests SET progress_message_id = $1 WHERE task_id = $2',
        [messageId, taskId]
      );
      this.logger.debug(`üíæ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${taskId} -> ${messageId}`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
}
