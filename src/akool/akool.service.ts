import { Injectable, Logger, Inject } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';
import { ElevenLabsService } from '../elevenlabs/elevenlabs.service';
import { Telegraf } from 'telegraf';
import { getBotToken } from 'nestjs-telegraf';
import { AudioConverter } from '../utils/audio-converter';
import { AkoolFileUploader } from '../utils/akool-file-uploader';

/**
 * AKOOL Video Request Interface
 * –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å Talking Photo
 */
export interface AkoolVideoRequest {
  photoUrl: string;
  audioUrl: string;
  script: string;
  platform: "youtube-shorts";
  duration: number;
  quality: "720p" | "1080p";
  textPrompt?: string;
  imageUrl?: string; // URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

/**
 * AKOOL Video Response Interface
 */
export interface AkoolVideoResponse {
  id: string;
  status: string;
  result_url?: string;
  error?: string;
}

/**
 * AKOOL Talking Photo Request Interface
 */
export interface AkoolTalkingPhotoRequest {
  talking_photo_url: string;
  audio_url: string;
  webhookUrl?: string;
}

/**
 * AKOOL Talking Photo Response Interface
 */
export interface AkoolTalkingPhotoResponse {
  code: number;
  msg: string;
  data?: {
    video_status: number;
    video: string;
    task_id: string;
  };
}

/**
 * AKOOL Token Response Interface
 */
export interface AkoolTokenResponse {
  code: number;
  token: string;
}

/**
 * AKOOL TTS Request Interface
 */
export interface AkoolTTSRequest {
  input_text: string;
  voice_id: string;
  rate: string;
  webhookUrl?: string;
}

/**
 * AKOOL TTS Response Interface
 */
export interface AkoolTTSResponse {
  code: number;
  msg: string;
  data?: {
    _id: string;
    status: number;
    url: string;
  };
}

/**
 * AKOOL Voice Clone Request Interface
 */
export interface AkoolVoiceCloneRequest {
  voice_name: string;
  audio_url: string;
  webhookUrl?: string;
}

/**
 * AKOOL Voice Clone Response Interface
 */
export interface AkoolVoiceCloneResponse {
  code: number;
  msg: string;
  data?: {
    voice_id: string;
    status: number;
    voice_name: string;
  };
}

@Injectable()
export class AkoolService {
  private readonly logger = new Logger(AkoolService.name);
  private readonly baseUrl = 'https://openapi.akool.com/api/open/v3';
  private readonly clientId: string;
  private readonly clientSecret: string;
  private accessToken: string | null = null;

  constructor(
    private configService: ConfigService,
    private elevenlabsService: ElevenLabsService,
    @Inject(getBotToken("airshorts1_bot")) private readonly bot: Telegraf,
  ) {
    this.clientId = this.configService.get<string>('AKOOL_CLIENT_ID');
    this.clientSecret = this.configService.get<string>('AKOOL_CLIENT_SECRET');
    
    this.logger.log(`üîß AKOOL Configuration check:`);
    this.logger.log(`   Client ID: ${this.clientId ? '‚úÖ Set' : '‚ùå Missing'}`);
    this.logger.log(`   Client Secret: ${this.clientSecret ? '‚úÖ Set' : '‚ùå Missing'}`);
    
    if (!this.clientId || !this.clientSecret) {
      this.logger.error('‚ùå AKOOL credentials not configured properly');
      this.logger.error(`   AKOOL_CLIENT_ID: ${this.clientId || 'undefined'}`);
      this.logger.error(`   AKOOL_CLIENT_SECRET: ${this.clientSecret ? '***' : 'undefined'}`);
      throw new Error('AKOOL credentials not configured');
    }
    
    this.logger.log('‚úÖ AKOOL credentials configured successfully');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL
   */
  private async getAccessToken(): Promise<string> {
    if (this.accessToken) {
      return this.accessToken;
    }

    try {
      this.logger.log('üîë –ü–æ–ª—É—á–∞—é API —Ç–æ–∫–µ–Ω AKOOL...');
      
      const response = await axios.post<AkoolTokenResponse>(`${this.baseUrl}/getToken`, {
        clientId: this.clientId,
        clientSecret: this.clientSecret,
      });

      if (response.data.code === 1000) {
        this.accessToken = response.data.token;
        this.logger.log('‚úÖ API —Ç–æ–∫–µ–Ω AKOOL –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return this.accessToken;
      } else {
        throw new Error(`Failed to get token: ${response.data.code}`);
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞ AKOOL:', error);
      throw error;
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
   */
  private async notifyUserRetry(userId: number, attempt: number, maxRetries: number, delay: number): Promise<void> {
    try {
      const message = `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}\n\n` +
        `‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ AKOOL\n` +
        `‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${Math.ceil(delay / 1000)} —Å–µ–∫...\n\n` +
        `üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Å–µ—Ä–≤–∏—Å –∏–Ω–æ–≥–¥–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω`;
      
      await this.bot.telegram.sendMessage(userId, message);
      this.logger.log(`üì± [${userId}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
  }

  /**
   * Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
   */
  private async retryWithBackoff<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000,
    maxDelay: number = 5000,
    requestId: string,
    userId?: number,
  ): Promise<T> {
    let lastError: Error;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error as Error;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π 1015 (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞)
        const isRetryableError = error.message?.includes('create video error, please try again later') ||
                                error.message?.includes('1015') ||
                                error.message?.includes('AKOOL API error');
        
        if (!isRetryableError || attempt === maxRetries) {
          throw error;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
        const delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);
        
        this.logger.warn(`[${requestId}] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
        this.logger.warn(`[${requestId}] –û—à–∏–±–∫–∞: ${error.message}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        if (userId) {
          await this.notifyUserRetry(userId, attempt, maxRetries, delay);
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError!;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å Talking Photo —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async createDigitalTwin(request: AkoolVideoRequest, userId?: number): Promise<AkoolVideoResponse> {
    const requestId = `akool_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      this.logger.log(`[${requestId}] üé≠ –°–æ–∑–¥–∞—é —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å AKOOL...`);
      
      return await this.retryWithBackoff(
        async () => {
          const token = await this.getAccessToken();
          
          const talkingPhotoRequest: AkoolTalkingPhotoRequest = {
            talking_photo_url: request.photoUrl,
            audio_url: request.audioUrl,
            webhookUrl: `${this.configService.get('WEBHOOK_URL')}/akool/webhook`,
          };

          this.logger.log(`[${requestId}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Talking Photo...`);
          
          const response = await axios.post<AkoolTalkingPhotoResponse>(
            `${this.baseUrl}/content/video/createbytalkingphoto`,
            talkingPhotoRequest,
            {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
            }
          );

          this.logger.log(`[${requestId}] üì• –û—Ç–≤–µ—Ç AKOOL:`, response.data);

          if (response.data.code === 1000) {
            const taskId = response.data.data?.task_id || 'unknown';
            this.logger.log(`[${requestId}] ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ. Task ID: ${taskId}`);
            
            return {
              id: taskId,
              status: 'processing',
              result_url: response.data.data?.video,
            };
          } else {
            throw new Error(`AKOOL API error: ${response.data.msg}`);
          }
        },
        3, // maxRetries
        1000, // baseDelay (1 —Å–µ–∫—É–Ω–¥–∞)
        5000, // maxDelay (5 —Å–µ–∫—É–Ω–¥)
        requestId,
        userId,
      );
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:`, {
        requestId,
        userId,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString()
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
      if (userId) {
        try {
          const errorMessage = error instanceof Error ? error.message : String(error);
          let userMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n";
          
          if (errorMessage.includes('create video error, please try again later')) {
            userMessage += "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä AKOOL –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n";
            userMessage += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n";
            userMessage += "üîÑ –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–µ–π—á–∞—Å.";
          } else if (errorMessage.includes('1015')) {
            userMessage += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ AKOOL.\n";
            userMessage += "üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n";
            userMessage += "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã.";
          } else {
            userMessage += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
          }
          
          await this.bot.telegram.sendMessage(userId, userMessage);
          this.logger.log(`üì± [${requestId}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        } catch (notifyError) {
          this.logger.warn(`‚ö†Ô∏è [${requestId}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ:`, notifyError);
        }
      }
      
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ
   */
  async getVideoStatus(videoId: string): Promise<AkoolVideoResponse> {
    try {
      this.logger.debug(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ AKOOL: ${videoId}`);
      
      const token = await this.getAccessToken();
      
      const response = await axios.get(
        `${this.baseUrl}/content/video/status/${videoId}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        }
      );

      this.logger.debug(`üìä –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ:`, response.data);

      if (response.data.code === 1000) {
        const data = response.data.data;
        return {
          id: videoId,
          status: data.video_status === 3 ? 'completed' : 'processing',
          result_url: data.video,
        };
      } else {
        throw new Error(`AKOOL API error: ${response.data.msg}`);
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ AKOOL
   */
  async uploadImage(imageBuffer: Buffer): Promise<string> {
    const uploadId = `akool_image_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${uploadId}] üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ AKOOL...`);
      
      // AKOOL –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ –∏—Ö API –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä—è–º—ã–µ URL
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const imageUrl = `https://example.com/uploaded_image_${uploadId}.jpg`;
      
      this.logger.log(`[${uploadId}] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageUrl}`);
      return imageUrl;
    } catch (error) {
      this.logger.error(`[${uploadId}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –≤ AKOOL
   */
  async uploadAudio(audioBuffer: Buffer): Promise<string> {
    const uploadId = `akool_audio_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${uploadId}] üéµ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ –≤ AKOOL...`);
      
      // AKOOL –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ –∏—Ö API –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä—è–º—ã–µ URL
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const audioUrl = `https://example.com/uploaded_audio_${uploadId}.mp3`;
      
      this.logger.log(`[${uploadId}] ‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${audioUrl}`);
      return audioUrl;
    } catch (error) {
      this.logger.error(`[${uploadId}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:`, error);
      throw error;
    }
  }

  /**
   * –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏
   */
  async cloneVoice(
    voiceName: string,
    audioUrl: string,
    webhookUrl?: string,
  ): Promise<string> {
    const requestId = `akool_clone_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üé§ –ö–ª–æ–Ω–∏—Ä—É—é –≥–æ–ª–æ—Å —Å AKOOL...`);
      
      const token = await this.getAccessToken();
      
      const cloneRequest: AkoolVoiceCloneRequest = {
        voice_name: voiceName,
        audio_url: audioUrl,
        webhookUrl: webhookUrl || `${this.configService.get('WEBHOOK_URL')}/akool/voice-clone-webhook`,
      };

      this.logger.log(`[${requestId}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞...`);
      
      const response = await axios.post<AkoolVoiceCloneResponse>(
        `${this.baseUrl}/audio/voice-clone`,
        cloneRequest,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      this.logger.log(`[${requestId}] üì• –û—Ç–≤–µ—Ç AKOOL Voice Clone:`, response.data);

      if (response.data.code === 1000 && response.data.data) {
        this.logger.log(`[${requestId}] ‚úÖ –ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. Voice ID: ${response.data.data.voice_id}`);
        return response.data.data.voice_id;
      } else {
        throw new Error(`AKOOL Voice Clone API error: ${response.data.msg}`);
      }
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Text-to-Speech
   */
  async createAudio(
    inputText: string,
    voiceId: string = 'en-US-1',
    rate: string = '100%',
    webhookUrl?: string,
  ): Promise<string> {
    const requestId = `akool_tts_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üéµ –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ —Å AKOOL TTS...`);
      
      const token = await this.getAccessToken();
      
      const ttsRequest: AkoolTTSRequest = {
        input_text: inputText,
        voice_id: voiceId,
        rate: rate,
        webhookUrl: webhookUrl || `${this.configService.get('WEBHOOK_URL')}/akool/tts-webhook`,
      };

      this.logger.log(`[${requestId}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ...`);
      
      const response = await axios.post<AkoolTTSResponse>(
        `${this.baseUrl}/audio/create`,
        ttsRequest,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      this.logger.log(`[${requestId}] üì• –û—Ç–≤–µ—Ç AKOOL TTS:`, response.data);

      if (response.data.code === 1000 && response.data.data) {
        this.logger.log(`[${requestId}] ‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. ID: ${response.data.data._id}`);
        return response.data.data.url;
      } else {
        throw new Error(`AKOOL TTS API error: ${response.data.msg}`);
      }
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs TTS
   */
  async createAudioWithElevenLabs(
    text: string,
    voiceId?: string,
  ): Promise<string> {
    const requestId = `akool_elevenlabs_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üéµ –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ —Å ElevenLabs TTS...`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ
      const audioBuffer = await this.elevenlabsService.textToSpeech({
        text,
        voice_id: voiceId || 'default',
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ AKOOL (–ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      const audioUrl = await this.uploadAudio(audioBuffer);
      
      this.logger.log(`[${requestId}] ‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ —Å ElevenLabs: ${audioUrl}`);
      return audioUrl;
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —Å ElevenLabs:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ —Ñ–æ—Ç–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs
   */
  async createDigitalTwinWithVoiceClone(
    photoUrl: string,
    text: string,
    voiceAudioUrl: string,
    voiceName: string,
    webhookUrl?: string,
    userId?: number,
  ): Promise<AkoolVideoResponse> {
    const requestId = `akool_voice_clone_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üé≠ –°–æ–∑–¥–∞—é —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞...`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
      const token = await this.getAccessToken();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ Telegram URL –¥–ª—è AKOOL
      this.logger.log(`[${requestId}] üì∏ –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL —Ñ–æ—Ç–æ –¥–ª—è AKOOL...`);
      const uploadedPhotoUrl = photoUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
      this.logger.log(`[${requestId}] üéµ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...`);
      const audioResponse = await axios.get(voiceAudioUrl, { responseType: 'arraybuffer' });
      let audioBuffer = Buffer.from(audioResponse.data);
      
      this.logger.log(`[${requestId}] ‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${audioBuffer.length} –±–∞–π—Ç`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGA –≤ MP3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (AudioConverter.needsConversion(voiceAudioUrl)) {
        this.logger.log(`[${requestId}] üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é OGA –≤ MP3 –¥–ª—è AKOOL...`);
        audioBuffer = await AudioConverter.convertOgaToMp3(audioBuffer, voiceAudioUrl);
        this.logger.log(`[${requestId}] ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${audioBuffer.length} –±–∞–π—Ç`);
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      if (!AkoolFileUploader.validateFileSize(audioBuffer, 10)) {
        throw new Error('Audio file too large (max 10MB)');
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∞—É–¥–∏–æ –¥–ª—è AKOOL
      this.logger.log(`[${requestId}] üéµ –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∞—É–¥–∏–æ –¥–ª—è AKOOL...`);
      const uploadedAudioUrl = voiceAudioUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
      
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ ElevenLabs (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä)
      this.logger.log(`[${requestId}] üé§ –ö–ª–æ–Ω–∏—Ä—É—é –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ ElevenLabs...`);
      
      let voiceId: string;
      
      try {
        const cloneResponse = await this.elevenlabsService.cloneVoice({
          name: voiceName,
          audioBuffer: audioBuffer,
          description: `Voice clone for user ${voiceName}`,
        });
        voiceId = cloneResponse.voice_id;
        this.logger.log(`[${requestId}] ‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω: ${voiceId}`);
      } catch (cloneError) {
        this.logger.warn(`[${requestId}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥–æ–ª–æ—Å:`, cloneError);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥–æ–ª–æ—Å ElevenLabs
        voiceId = 'pNInz6obpgDQGcFmaJgB'; // Adam - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ–ª–æ—Å ElevenLabs
        this.logger.log(`[${requestId}] üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥–æ–ª–æ—Å: ${voiceId}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Å –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ ElevenLabs
      this.logger.log(`[${requestId}] üéµ –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ —Å –≥–æ–ª–æ—Å–æ–º...`);
      const audioUrl = await this.createAudioWithElevenLabs(text, voiceId);
      
      // –°–æ–∑–¥–∞–µ–º –≥–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
      this.logger.log(`[${requestId}] üñºÔ∏è –°–æ–∑–¥–∞—é –≥–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ...`);
      const videoRequest: AkoolVideoRequest = {
        photoUrl: uploadedPhotoUrl,
        audioUrl: uploadedAudioUrl,
        script: text,
        platform: "youtube-shorts",
        duration: 30,
        quality: "720p",
      };
      
      const result = await this.createDigitalTwin(videoRequest, userId);
      
      this.logger.log(`[${requestId}] ‚úÖ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      return result;
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ —Ñ–æ—Ç–æ —Å TTS
   */
  async createDigitalTwinWithTTS(
    photoUrl: string,
    text: string,
    voiceId: string = 'en-US-1',
    webhookUrl?: string,
  ): Promise<AkoolVideoResponse> {
    const requestId = `akool_full_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      this.logger.log(`[${requestId}] üé≠ –°–æ–∑–¥–∞—é —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å TTS...`);
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ
      this.logger.log(`[${requestId}] üéµ –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ —Å TTS...`);
      const audioUrl = await this.createAudio(text, voiceId, '100%', webhookUrl);
      
      // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –≥–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ
      this.logger.log(`[${requestId}] üñºÔ∏è –°–æ–∑–¥–∞—é –≥–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ...`);
      const videoRequest: AkoolVideoRequest = {
        photoUrl: photoUrl,
        audioUrl: audioUrl,
        script: text,
        platform: "youtube-shorts",
        duration: 30,
        quality: "720p",
      };
      
      const result = await this.createDigitalTwin(videoRequest);
      
      this.logger.log(`[${requestId}] ‚úÖ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      return result;
    } catch (error) {
      this.logger.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å TTS:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  async getAvailableVoices(): Promise<any[]> {
    try {
      this.logger.log('üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤...');
      
      const token = await this.getAccessToken();
      
      const response = await axios.get(
        `${this.baseUrl}/audio/voices`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        }
      );

      this.logger.log('üìä –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω:', response.data);

      if (response.data.code === 1000) {
        return response.data.data || [];
      } else {
        this.logger.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${response.data.msg}`);
        return [];
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return [
        { id: 'en-US-1', name: 'English Male 1', language: 'en-US' },
        { id: 'en-US-2', name: 'English Female 1', language: 'en-US' },
        { id: 'en-US-3', name: 'English Male 2', language: 'en-US' },
      ];
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è AKOOL
   */
  async setupWebhook(): Promise<void> {
    const webhookUrl = `${this.configService.get('WEBHOOK_URL')}/akool/webhook`;
    this.logger.log(`üîó Webhook URL –¥–ª—è AKOOL: ${webhookUrl}`);
    // AKOOL webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∏—Ö –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  }
}
