#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ Akool webhook
 */

const CryptoJS = require('crypto-js');
const crypto = require('crypto');

// –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ (—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏)
const testData = {
  signature: "9a0403251957a130fad76ea64236e02c3c521e70",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7ow8MGfv8ow1idyPVOpDA0ncWuZmgMLazug/Vm1yEHrDhdr77Sz4hk9O0Oezc5VHKB6/Me5xwehJZjyVSCKTe/+2lqV7ezzDhi6LmMy7sCkVwt4rOFvq8Yafi64CnCcZLzpA==",
  timestamp: 1757785623798,
  nonce: "9047"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const clientId = process.env.AKOOL_CLIENT_ID || "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = process.env.AKOOL_CLIENT_SECRET || "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ Akool webhook");
console.log("===============================================");
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  return calculatedSignature === signature;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)
function decryptAES(dataEncrypt, clientId, clientSecret) {
  try {
    const CryptoJS = require('crypto-js');

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const aesKey = clientSecret;
    const key = CryptoJS.enc.Utf8.parse(aesKey);
    const iv = CryptoJS.enc.Utf8.parse(clientId);

    console.log(`üîë –ö–ª—é—á (UTF-8): ${key.toString(CryptoJS.enc.Hex)} (${key.sigBytes} –±–∞–π—Ç)`);
    console.log(`üîë IV (UTF-8): ${iv.toString(CryptoJS.enc.Hex)} (${iv.sigBytes} –±–∞–π—Ç)`);

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC —Å PKCS#7 padding –∏—Å–ø–æ–ª—å–∑—É—è crypto-js
    const decrypted = CryptoJS.AES.decrypt(dataEncrypt, key, {
      iv: iv,
      mode: CryptoJS.mode.CBC,
      padding: CryptoJS.pad.Pkcs7
    });

    const result = decrypted.toString(CryptoJS.enc.Utf8);
    console.log('‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞');
    return result;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testFixedCode() {
  try {
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const isSignatureValid = verifySignature(
      clientId,
      testData.timestamp,
      testData.nonce,
      testData.dataEncrypt,
      testData.signature
    );
    
    console.log(`–ü–æ–¥–ø–∏—Å—å: ${isSignatureValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (!isSignatureValid) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===");
    
    try {
      const decryptedData = decryptAES(testData.dataEncrypt, clientId, clientSecret);
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`üéâ –£–°–ü–ï–•! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (jsonData._id && jsonData.status && jsonData.type && jsonData.url) {
          console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!`);
          console.log(`  ID: ${jsonData._id}`);
          console.log(`  Status: ${jsonData.status}`);
          console.log(`  Type: ${jsonData.type}`);
          console.log(`  URL: ${jsonData.url}`);
        }
        
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${decryptError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testFixedCode();
