#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Akool
 * https://docs.akool.com/ai-tools-suite/webhook
 */

const crypto = require('crypto');

// –ü—Ä–∏–º–µ—Ä –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Akool
const officialExample = {
  signature: "04e30dd43d9d8f95dd7c127dad617f0929d61c1d",
  dataEncrypt: "LuG1OVSVIwOO/xpW00eSYo77Ncxa9h4VKmOJRjwoyoAmCIS/8FdJRJ+BpZn90BVAAg8xpU1bMmcDlAYDT010Wa9tNi1jivX25Ld03iA4EKs=",
  timestamp: 1710757981609,
  nonce: "1529"
};

// –ö–ª—é—á–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const exampleClientId = "AKDt8rWEczpYPzCGur2xE=";
const exampleClientSecret = "nmwUjMAK0PJpl0MOiXLOOOwZADm0gkLo";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Akool");
console.log("==========================================================");
console.log();

console.log("üìä –ü—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:");
console.log(`  Signature: ${officialExample.signature}`);
console.log(`  Data Encrypt: ${officialExample.dataEncrypt}`);
console.log(`  Timestamp: ${officialExample.timestamp}`);
console.log(`  Nonce: ${officialExample.nonce}`);
console.log();

console.log("üîë –ö–ª—é—á–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:");
console.log(`  Client ID: ${exampleClientId} (${exampleClientId.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log(`  Client Secret: ${exampleClientSecret} (${exampleClientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  return calculatedSignature === signature;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES
function decryptAES(dataEncrypt, clientId, clientSecret) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    let key = Buffer.from(clientSecret, 'utf8');
    let iv = Buffer.from(clientId, 'utf8');
    
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if (key.length > 24) key = key.slice(0, 24);
    if (iv.length > 16) iv = iv.slice(0, 16);
    
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true);
    
    let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testOfficialExample() {
  try {
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const isSignatureValid = verifySignature(
      exampleClientId,
      officialExample.timestamp,
      officialExample.nonce,
      officialExample.dataEncrypt,
      officialExample.signature
    );
    
    console.log(`–ü–æ–¥–ø–∏—Å—å: ${isSignatureValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (!isSignatureValid) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===");
    
    try {
      const decryptedData = decryptAES(officialExample.dataEncrypt, exampleClientId, exampleClientSecret);
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`üéâ –£–°–ü–ï–•! –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${decryptError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testOfficialExample();
