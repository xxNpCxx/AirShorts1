#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Final AKOOL Webhook Decryption
–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö –æ—Ç AKOOL
"""

import base64
import json
import re
import hashlib

def try_decrypt(data_bytes, key, method_name):
    """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º"""
    try:
        decrypted = bytearray()
        for i in range(len(data_bytes)):
            decrypted.append(data_bytes[i] ^ key[i % len(key)])
        
        text = decrypted.decode('utf-8', errors='ignore')
        
        # –ò—â–µ–º JSON –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        json_patterns = [
            r'\{[^}]*\}',  # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
            r'\{.*\}',     # –û–±—ä–µ–∫—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
            r'\[.*\]',     # –ú–∞—Å—Å–∏–≤—ã
        ]
        
        for pattern in json_patterns:
            matches = re.findall(pattern, text, re.DOTALL)
            for match in matches:
                try:
                    json_data = json.loads(match)
                    print(f"‚úÖ {method_name} - Valid JSON found:")
                    print(json.dumps(json_data, indent=2))
                    return json_data
                except:
                    pass
        
        # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        print(f"‚ùå {method_name} - No valid JSON found: {text[:100]}...")
        return None
        
    except Exception as e:
        print(f"‚ùå {method_name} - Error: {e}")
        return None

def main():
    print("üîì Final AKOOL Webhook Decryption")
    print("=================================")
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ webhook
    data_encrypt = "VzUJ0xiILQxxcGD1BC3dEBstjHTCfB8oLTi/JKe0DQBMHiYOX8K7utv1c5z3gIh/SFw/10oYoy1b2HDNEiB3ErogTUi1p+LgZm2CLPmd9RL/puYDQ02CaP+e72+2PhI7S5upOSHW3rNz6g9Alfng4903lNGdPDtwF+1m0LHt9yIfuao7cvJL+PXVQWumSUqj/g0H2B1C4GIEEwEJxroYtQ=="
    signature = "fd9af605124f0d2b386bc80fac11ea0420911142"
    timestamp = "1757189387922"
    nonce = "3243"
    
    print("üìä Webhook Data:")
    print(f"  Data Encrypt: {data_encrypt}")
    print(f"  Signature: {signature}")
    print(f"  Timestamp: {timestamp}")
    print(f"  Nonce: {nonce}")
    print()
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        data_bytes = base64.b64decode(data_encrypt)
        print(f"Data length: {len(data_bytes)} bytes")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
        keys = []
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏
        keys.append(("Signature hex", bytes.fromhex(signature)))
        keys.append(("Nonce hex", bytes.fromhex(nonce)))
        keys.append(("Timestamp", timestamp.encode()))
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
        keys.append(("Signature + Nonce", (signature + nonce).encode()))
        keys.append(("Timestamp + Nonce", (timestamp + nonce).encode()))
        keys.append(("Signature + Timestamp", (signature + timestamp).encode()))
        
        # Hash –∫–ª—é—á–∏
        keys.append(("SHA256(Signature)", hashlib.sha256(signature.encode()).digest()))
        keys.append(("SHA256(Nonce)", hashlib.sha256(nonce.encode()).digest()))
        keys.append(("SHA256(Timestamp)", hashlib.sha256(timestamp.encode()).digest()))
        keys.append(("SHA256(Signature+Nonce)", hashlib.sha256((signature + nonce).encode()).digest()))
        keys.append(("SHA256(Timestamp+Nonce)", hashlib.sha256((timestamp + nonce).encode()).digest()))
        
        # MD5 –∫–ª—é—á–∏
        keys.append(("MD5(Signature)", hashlib.md5(signature.encode()).digest()))
        keys.append(("MD5(Nonce)", hashlib.md5(nonce.encode()).digest()))
        keys.append(("MD5(Timestamp)", hashlib.md5(timestamp.encode()).digest()))
        
        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–ª—é—á–∏
        keys.append(("Signature repeated", (signature * 10).encode()[:32]))
        keys.append(("Nonce repeated", (nonce * 10).encode()[:32]))
        keys.append(("Timestamp repeated", (timestamp * 10).encode()[:32]))
        
        # –ö–ª—é—á–∏ –∏–∑ hex
        keys.append(("Signature hex repeated", (signature * 10).encode()[:32]))
        keys.append(("Nonce hex repeated", (nonce * 10).encode()[:32]))
        
        print("üîç –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏:")
        print("=" * 50)
        
        success = False
        for method_name, key in keys:
            print(f"\nüîë {method_name}:")
            result = try_decrypt(data_bytes, key, method_name)
            if result:
                success = True
                print(f"üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω JSON —Å –∫–ª—é—á–æ–º: {method_name}")
                break
        
        if not success:
            print("\n‚ùå –ù–∏ –æ–¥–∏–Ω –∫–ª—é—á –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - AKOOL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
            print("   - –ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç XOR")
            print("   - –ù—É–∂–µ–Ω –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏ AKOOL")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
        print("=" * 30)
        
        # –ê–Ω–∞–ª–∏–∑ hex –¥–∞–Ω–Ω—ã—Ö
        hex_data = data_bytes.hex()
        print(f"Hex data: {hex_data}")
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns = {
            '7b': '{',
            '5b': '[',
            '22': '"',
            '766964656f': 'video',
            '737461747573': 'status',
            '7461736b': 'task'
        }
        
        print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
        for hex_pattern, char in patterns.items():
            pos = hex_data.find(hex_pattern)
            if pos != -1:
                print(f"  {char} ({hex_pattern}) at position {pos}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                start = max(0, pos - 20)
                end = min(len(hex_data), pos + 40)
                context = hex_data[start:end]
                print(f"    Context: {context}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("\nüéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
