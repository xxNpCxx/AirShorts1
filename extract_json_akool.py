#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Extract JSON from AKOOL Webhook
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import base64
import json
import re

def main():
    print("üîç Extract JSON from AKOOL Webhook")
    print("==================================")
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ webhook
    data_encrypt = "VzUJ0xiILQxxcGD1BC3dEBstjHTCfB8oLTi/JKe0DQBMHiYOX8K7utv1c5z3gIh/SFw/10oYoy1b2HDNEiB3ErogTUi1p+LgZm2CLPmd9RL/puYDQ02CaP+e72+2PhI7S5upOSHW3rNz6g9Alfng4903lNGdPDtwF+1m0LHt9yIfuao7cvJL+PXVQWumSUqj/g0H2B1C4GIEEwEJxroYtQ=="
    signature = "fd9af605124f0d2b386bc80fac11ea0420911142"
    timestamp = "1757189387922"
    nonce = "3243"
    
    print("üìä Webhook Data:")
    print(f"  Data Encrypt: {data_encrypt}")
    print(f"  Signature: {signature}")
    print(f"  Timestamp: {timestamp}")
    print(f"  Nonce: {nonce}")
    print()
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        data_bytes = base64.b64decode(data_encrypt)
        print(f"Data length: {len(data_bytes)} bytes")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        hex_data = data_bytes.hex()
        print(f"Hex data: {hex_data[:100]}...")
        
        # –ò—â–µ–º JSON –º–∞—Ä–∫–µ—Ä—ã
        json_markers = {
            '7b': '{',  # {
            '5b': '[',  # [
            '22': '"',  # "
            '766964656f': 'video',
            '737461747573': 'status',
            '7461736b': 'task'
        }
        
        print("\nüîç –ü–æ–∏—Å–∫ JSON –º–∞—Ä–∫–µ—Ä–æ–≤:")
        for hex_marker, char in json_markers.items():
            pos = hex_data.find(hex_marker)
            if pos != -1:
                print(f"Found {char} ({hex_marker}) at position {pos}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        print("\nüîç –ü–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON:")
        
        # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ JSON –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ö
        for encoding in ['utf-8', 'latin-1', 'ascii']:
            try:
                text = data_bytes.decode(encoding, errors='ignore')
                print(f"\n{encoding} encoding:")
                print(f"Text: {text[:200]}...")
                
                # –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç—ã
                json_patterns = [
                    r'\{[^}]*\}',  # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
                    r'\{.*\}',     # –û–±—ä–µ–∫—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
                    r'\[.*\]',     # –ú–∞—Å—Å–∏–≤—ã
                ]
                
                for pattern in json_patterns:
                    matches = re.findall(pattern, text, re.DOTALL)
                    for match in matches:
                        print(f"Found JSON pattern: {match[:100]}...")
                        try:
                            json_data = json.loads(match)
                            print("‚úÖ Valid JSON found:")
                            print(json.dumps(json_data, indent=2))
                            break
                        except:
                            pass
                            
            except Exception as e:
                print(f"‚ùå {encoding} encoding failed: {e}")
        
        # –°–ø–æ—Å–æ–± 2: XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∏ –ø–æ–∏—Å–∫ JSON
        print("\nüîç XOR + JSON –ø–æ–∏—Å–∫:")
        
        keys = [
            bytes.fromhex(signature),
            bytes.fromhex(nonce),
            timestamp.encode(),
            (signature + nonce).encode(),
            (timestamp + nonce).encode()
        ]
        
        for i, key in enumerate(keys):
            try:
                decrypted = bytearray()
                for j in range(len(data_bytes)):
                    decrypted.append(data_bytes[j] ^ key[j % len(key)])
                
                text = decrypted.decode('utf-8', errors='ignore')
                print(f"\nXOR key {i+1}: {text[:100]}...")
                
                # –ò—â–µ–º JSON –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                json_patterns = [
                    r'\{[^}]*\}',
                    r'\{.*\}',
                    r'\[.*\]',
                ]
                
                for pattern in json_patterns:
                    matches = re.findall(pattern, text, re.DOTALL)
                    for match in matches:
                        print(f"Found JSON in XOR {i+1}: {match[:100]}...")
                        try:
                            json_data = json.loads(match)
                            print("‚úÖ Valid JSON found in XOR:")
                            print(json.dumps(json_data, indent=2))
                            break
                        except:
                            pass
                            
            except Exception as e:
                print(f"‚ùå XOR key {i+1} failed: {e}")
        
        # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ hex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        print("\nüîç Hex pattern search:")
        
        # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON —Å—Ç—Ä–æ–∫–∏ –≤ hex
        hex_patterns = [
            '7b22',  # {"
            '227b',  # "{
            '5b22',  # ["
            '227d',  # "}
            '227d',  # "}
        ]
        
        for pattern in hex_patterns:
            pos = hex_data.find(pattern)
            if pos != -1:
                print(f"Found hex pattern {pattern} at position {pos}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                start = max(0, pos - 20)
                end = min(len(hex_data), pos + 100)
                context = hex_data[start:end]
                print(f"Context: {context}")
                
                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ hex
                try:
                    hex_bytes = bytes.fromhex(context)
                    text = hex_bytes.decode('utf-8', errors='ignore')
                    print(f"Decoded: {text}")
                except:
                    pass

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("\nüéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
