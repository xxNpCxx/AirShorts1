#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç crypto-js
 */

const CryptoJS = require('crypto-js');
const crypto = require('crypto');

// –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ (—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏)
const testData = {
  signature: "9a0403251957a130fad76ea64236e02c3c521e70",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7ow8MGfv8ow1idyPVOpDA0ncWuZmgMLazug/Vm1yEHrDhdr77Sz4hk9O0Oezc5VHKB6/Me5xwehJZjyVSCKTe/+2lqV7ezzDhi6LmMy7sCkVwt4rOFvq8Yafi64CnCcZLzpA==",
  timestamp: 1757785623798,
  nonce: "9047"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const clientId = process.env.AKOOL_CLIENT_ID || "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = process.env.AKOOL_CLIENT_SECRET || "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤ (crypto-js)");
console.log("=======================================================");
console.log();

console.log("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤:");
console.log(`  Signature: ${testData.signature}`);
console.log(`  Data Encrypt: ${testData.dataEncrypt}`);
console.log(`  Timestamp: ${testData.timestamp}`);
console.log(`  Nonce: ${testData.nonce}`);
console.log();

console.log("üîë –ö–ª—é—á–∏:");
console.log(`  Client ID: ${clientId} (${clientId.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log(`  Client Secret: ${clientSecret} (${clientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  return calculatedSignature === signature;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES —Å crypto-js
function decryptAESWithCryptoJS(dataEncrypt, clientId, clientSecret) {
  try {
    const aesKey = clientSecret;
    const key = CryptoJS.enc.Utf8.parse(aesKey);
    const iv = CryptoJS.enc.Utf8.parse(clientId);
    
    console.log(`  –ö–ª—é—á (UTF-8): ${key.toString(CryptoJS.enc.Hex)} (${key.sigBytes} –±–∞–π—Ç)`);
    console.log(`  IV (UTF-8): ${iv.toString(CryptoJS.enc.Hex)} (${iv.sigBytes} –±–∞–π—Ç)`);
    
    const decrypted = CryptoJS.AES.decrypt(dataEncrypt, key, {
      iv: iv,
      mode: CryptoJS.mode.CBC,
      padding: CryptoJS.pad.Pkcs7
    });
    
    return decrypted.toString(CryptoJS.enc.Utf8);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES —Å –Ω–∞—Ç–∏–≤–Ω—ã–º crypto
function decryptAESWithNativeCrypto(dataEncrypt, clientId, clientSecret) {
  try {
    let key = Buffer.from(clientSecret, 'utf8');
    let iv = Buffer.from(clientId, 'utf8');
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if (key.length > 24) key = key.slice(0, 24);
    if (iv.length > 16) iv = iv.slice(0, 16);
    
    console.log(`  –ö–ª—é—á (–Ω–∞—Ç–∏–≤–Ω—ã–π): ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
    console.log(`  IV (–Ω–∞—Ç–∏–≤–Ω—ã–π): ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
    
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true);
    
    let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testRealLogs() {
  try {
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const isSignatureValid = verifySignature(
      clientId,
      testData.timestamp,
      testData.nonce,
      testData.dataEncrypt,
      testData.signature
    );
    
    console.log(`–ü–æ–¥–ø–∏—Å—å: ${isSignatureValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (!isSignatureValid) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å crypto-js ===");
    
    try {
      const decryptedData = decryptAESWithCryptoJS(testData.dataEncrypt, clientId, clientSecret);
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`üéâ –£–°–ü–ï–•! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å crypto-js —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å crypto-js: ${decryptError.message}`);
    }
    
    console.log();
    console.log("=== –®–ê–ì 3: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º crypto ===");
    
    try {
      const decryptedData = decryptAESWithNativeCrypto(testData.dataEncrypt, clientId, clientSecret);
      console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`üéâ –£–°–ü–ï–•! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º crypto —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      } catch (jsonError) {
        console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
        console.log(`–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      }
      
    } catch (decryptError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º crypto: ${decryptError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testRealLogs();
