#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –æ—Ç AKOOL
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * https://docs.akool.com/ai-tools-suite/webhook
 */

const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
const testData = {
  signature: "b2d282320e8c066d4d18e9f8df0746ebd5650d43",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7owzptb5afaKp7Jht+NBOZ6hM=",
  timestamp: 1757785561571,
  nonce: "3253"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑ –ª–æ–≥–æ–≤)
const clientId = "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AKOOL webhook");
console.log("==========================================");
console.log();

console.log("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
console.log(`  Signature: ${testData.signature}`);
console.log(`  Data Encrypt: ${testData.dataEncrypt}`);
console.log(`  Timestamp: ${testData.timestamp}`);
console.log(`  Nonce: ${testData.nonce}`);
console.log();

console.log("üîë –ö–ª—é—á–∏:");
console.log(`  Client ID: ${clientId}`);
console.log(`  Client Secret: ${clientSecret}`);
console.log();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–π
console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω –∫–ª—é—á–µ–π:");
console.log(`  Client ID –¥–ª–∏–Ω–∞: ${clientId.length} —Å–∏–º–≤–æ–ª–æ–≤`);
console.log(`  Client Secret –¥–ª–∏–Ω–∞: ${clientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤`);
console.log();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–π
console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–π");
console.log(`   ClientSecret: ${clientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 24)`);
console.log(`   ClientId: ${clientId.length} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 16)`);
console.log();

// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π
console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π:");
console.log();

// –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
let actualClientSecret = clientSecret;
let actualClientId = clientId;
console.log("–í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏");
console.log(`  ClientSecret: ${actualClientSecret} (${actualClientSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log(`  ClientId: ${actualClientId} (${actualClientId.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log();

console.log("‚úÖ –î–ª–∏–Ω—ã –∫–ª—é—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:");
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  
  // –í—ã—á–∏—Å–ª—è–µ–º SHA1 —Ö–µ—à
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  
  console.log(`  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [${clientId}, ${timestamp}, ${nonce}, ${dataEncrypt.substring(0, 20)}...]`);
  console.log(`  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${sortedParams.substring(0, 100)}...`);
  console.log(`  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å: ${signature}`);
  console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: ${calculatedSignature}`);
  
  const isValid = calculatedSignature === signature;
  console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${isValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
  
  return isValid;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES
function decryptAES(dataEncrypt, clientId, clientSecret) {
  console.log("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ AES:");
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    let key = Buffer.from(clientSecret, 'utf8');
    let iv = Buffer.from(clientId, 'utf8');
    
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á (${key.length} –±–∞–π—Ç): ${key.toString('hex')}`);
    console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π IV (${iv.length} –±–∞–π—Ç): ${iv.toString('hex')}`);
    
    // –î–ª—è AES-192-CBC –Ω—É–∂–µ–Ω –∫–ª—é—á 24 –±–∞–π—Ç–∞ –∏ IV 16 –±–∞–π—Ç
    if (key.length > 24) {
      key = key.slice(0, 24);
      console.log(`  –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∫–ª—é—á (${key.length} –±–∞–π—Ç): ${key.toString('hex')}`);
    } else if (key.length < 24) {
      // –î–æ–ø–æ–ª–Ω—è–µ–º –∫–ª—é—á –Ω—É–ª—è–º–∏
      const paddedKey = Buffer.alloc(24);
      key.copy(paddedKey);
      key = paddedKey;
      console.log(`  –î–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á (${key.length} –±–∞–π—Ç): ${key.toString('hex')}`);
    }
    
    if (iv.length > 16) {
      iv = iv.slice(0, 16);
      console.log(`  –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π IV (${iv.length} –±–∞–π—Ç): ${iv.toString('hex')}`);
    } else if (iv.length < 16) {
      // –î–æ–ø–æ–ª–Ω—è–µ–º IV –Ω—É–ª—è–º–∏
      const paddedIv = Buffer.alloc(16);
      iv.copy(paddedIv);
      iv = paddedIv;
      console.log(`  –î–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π IV (${iv.length} –±–∞–π—Ç): ${iv.toString('hex')}`);
    }
    
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á (${key.length} –±–∞–π—Ç): ${key.toString('hex')}`);
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π IV (${iv.length} –±–∞–π—Ç): ${iv.toString('hex')}`);
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES-192-CBC —Å PKCS#7 padding
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true); // PKCS#7 padding
    
    let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    console.log("‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞");
    return decrypted;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testDecryption() {
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    console.log("=== –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===");
    const isSignatureValid = verifySignature(
      actualClientId,
      testData.timestamp,
      testData.nonce,
      testData.dataEncrypt,
      testData.signature
    );
    
    if (!isSignatureValid) {
      console.log("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
      return;
    }
    
    console.log();
    
    // –®–∞–≥ 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log("=== –®–ê–ì 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===");
    const decryptedData = decryptAES(testData.dataEncrypt, actualClientId, actualClientSecret);
    
    console.log();
    console.log("üìã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
    console.log(decryptedData);
    
    // –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ JSON
    console.log();
    console.log("=== –®–ê–ì 3: –ü–∞—Ä—Å–∏–Ω–≥ JSON ===");
    try {
      const jsonData = JSON.parse(decryptedData);
      console.log("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:");
      console.log(JSON.stringify(jsonData, null, 2));
    } catch (jsonError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${jsonError.message}`);
      console.log("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:", decryptedData);
    }
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDecryption();
