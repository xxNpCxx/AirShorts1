#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ Akool
 */

const https = require('https');

// –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
const taskId = "68c67e93993286d395173391";
const clientId = "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ Akool");
console.log("===============================");
console.log();

console.log(`Task ID: ${taskId}`);
console.log(`Client ID: ${clientId}`);
console.log(`Client Secret: ${clientSecret.substring(0, 10)}...`);
console.log();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function getToken() {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      clientId: clientId,
      clientSecret: clientSecret
    });

    const options = {
      hostname: 'openapi.akool.com',
      port: 443,
      path: '/api/open/v3/getToken',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          if (response.code === 1000) {
            resolve(response.token);
          } else {
            reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.msg}`));
          }
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`));
    });

    req.write(postData);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async function checkTaskStatus(token) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'openapi.akool.com',
      port: 443,
      path: `/api/open/v3/video/status/${taskId}`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`));
    });

    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log("üîë –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...");
    const token = await getToken();
    console.log("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω");
    console.log();

    console.log("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏...");
    const status = await checkTaskStatus(token);
    
    console.log("üìã –û—Ç–≤–µ—Ç Akool:");
    console.log(JSON.stringify(status, null, 2));
    
    if (status.code === 1000) {
      const data = status.data;
      console.log();
      console.log("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:");
      console.log(`  Task ID: ${data.task_id || 'N/A'}`);
      console.log(`  Video Status: ${data.video_status || 'N/A'}`);
      console.log(`  Video URL: ${data.video_url || 'N/A'}`);
      console.log(`  Error Message: ${data.error_message || 'N/A'}`);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusMap = {
        1: '–í –æ—á–µ—Ä–µ–¥–∏',
        2: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', 
        3: '–ì–æ—Ç–æ–≤–æ',
        4: '–û—à–∏–±–∫–∞'
      };
      
      const statusText = statusMap[data.video_status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      console.log(`  –°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç): ${statusText}`);
      
      if (data.video_status === 3 && data.video_url) {
        console.log("üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!");
        console.log(`üîó URL: ${data.video_url}`);
      } else if (data.video_status === 4) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ");
        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      } else {
        console.log("‚è≥ –í–∏–¥–µ–æ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...");
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${status.msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫
main();
