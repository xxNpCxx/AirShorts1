#!/usr/bin/env node

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ webhook –æ—Ç AKOOL
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π
 */

const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
const testData = {
  signature: "b2d282320e8c066d4d18e9f8df0746ebd5650d43",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7owzptb5afaKp7Jht+NBOZ6hM=",
  timestamp: 1757785561571,
  nonce: "3253"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑ –ª–æ–≥–æ–≤)
const clientId = "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AKOOL webhook");
console.log("==================================================");
console.log();

console.log("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
console.log(`  Signature: ${testData.signature}`);
console.log(`  Data Encrypt: ${testData.dataEncrypt}`);
console.log(`  Timestamp: ${testData.timestamp}`);
console.log(`  Nonce: ${testData.nonce}`);
console.log();

console.log("üîë –ö–ª—é—á–∏:");
console.log(`  Client ID: ${clientId}`);
console.log(`  Client Secret: ${clientSecret}`);
console.log();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
function verifySignature(clientId, timestamp, nonce, dataEncrypt, signature) {
  const sortedParams = [clientId, timestamp.toString(), nonce, dataEncrypt].sort().join('');
  const calculatedSignature = crypto.createHash('sha1').update(sortedParams).digest('hex');
  return calculatedSignature === signature;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ AES
function decryptAES(dataEncrypt, key, iv) {
  try {
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true);
    
    let decrypted = decipher.update(dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`);
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π
const testCases = [
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∫–∞–∫ UTF-8",
    clientId: clientId,
    clientSecret: clientSecret
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 2: ClientId –∫–∞–∫ Base64, ClientSecret –∫–∞–∫ UTF-8",
    clientId: Buffer.from(clientId, 'base64').toString('utf8'),
    clientSecret: clientSecret
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 3: ClientId –∫–∞–∫ UTF-8, ClientSecret –∫–∞–∫ Base64",
    clientId: clientId,
    clientSecret: Buffer.from(clientSecret, 'base64').toString('utf8')
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 4: –û–±–∞ –∫–ª—é—á–∞ –∫–∞–∫ Base64",
    clientId: Buffer.from(clientId, 'base64').toString('utf8'),
    clientSecret: Buffer.from(clientSecret, 'base64').toString('utf8')
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 5: ClientId –æ–±—Ä–µ–∑–∞–Ω –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤",
    clientId: clientId.substring(0, 16),
    clientSecret: clientSecret
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 6: ClientSecret –æ–±—Ä–µ–∑–∞–Ω –¥–æ 24 —Å–∏–º–≤–æ–ª–æ–≤",
    clientId: clientId,
    clientSecret: clientSecret.substring(0, 24)
  },
  {
    name: "–í–∞—Ä–∏–∞–Ω—Ç 7: –û–±–∞ –∫–ª—é—á–∞ –æ–±—Ä–µ–∑–∞–Ω—ã",
    clientId: clientId.substring(0, 16),
    clientSecret: clientSecret.substring(0, 24)
  }
];

console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π:");
console.log("==============================================");
console.log();

for (let i = 0; i < testCases.length; i++) {
  const testCase = testCases[i];
  console.log(`\n--- ${testCase.name} ---`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const isSignatureValid = verifySignature(
      testCase.clientId,
      testData.timestamp,
      testData.nonce,
      testData.dataEncrypt,
      testData.signature
    );
    
    console.log(`  –ü–æ–¥–ø–∏—Å—å: ${isSignatureValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    
    if (isSignatureValid) {
      console.log("  üéâ –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞! –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...");
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV
      let key = Buffer.from(testCase.clientSecret, 'utf8');
      let iv = Buffer.from(testCase.clientId, 'utf8');
      
      console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
      console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
      
      // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
      if (key.length > 24) key = key.slice(0, 24);
      if (iv.length > 16) iv = iv.slice(0, 16);
      
      console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
      console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
      const decryptedData = decryptAES(testData.dataEncrypt, key, iv);
      console.log(`  ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
      console.log(`  üìã –î–∞–Ω–Ω—ã–µ: ${decryptedData}`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
      try {
        const jsonData = JSON.parse(decryptedData);
        console.log(`  ‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
        console.log(`  üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
        console.log(`  üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!`);
        break;
      } catch (jsonError) {
        console.log(`  ‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
      }
    }
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

console.log("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
