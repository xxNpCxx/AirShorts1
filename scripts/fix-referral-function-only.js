#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ update_referral_stats
 * –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */

const { Pool } = require('pg');

async function fixReferralFunction() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é update_referral_stats...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const tables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      AND table_name IN ('referrals', 'referral_payments', 'referral_stats')
    `);
    
    const existingTables = tables.rows.map(row => row.table_name);
    const requiredTables = ['referrals', 'referral_payments', 'referral_stats'];
    const missingTables = requiredTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', missingTables.join(', '));
      console.log('‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é 010_create_referral_system.sql');
      process.exit(1);
    }

    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
    console.log('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é update_referral_stats...');
    await pool.query('DROP FUNCTION IF EXISTS update_referral_stats(INTEGER)');

    // –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é update_referral_stats...');
    await pool.query(`
      CREATE OR REPLACE FUNCTION update_referral_stats(user_id INTEGER)
      RETURNS VOID AS $$
      BEGIN
          INSERT INTO referral_stats (
              user_id, 
              total_referrals, 
              level_1_referrals, 
              level_2_referrals, 
              level_3_referrals,
              total_earned,
              last_updated
          )
          SELECT 
              r.referrer_id as user_id,
              COUNT(*) as total_referrals,
              COUNT(CASE WHEN r.level = 1 THEN 1 END) as level_1_referrals,
              COUNT(CASE WHEN r.level = 2 THEN 1 END) as level_2_referrals,
              COUNT(CASE WHEN r.level = 3 THEN 1 END) as level_3_referrals,
              COALESCE(SUM(rp.amount), 0) as total_earned,
              NOW() as last_updated
          FROM referrals r
          LEFT JOIN referral_payments rp ON r.id = rp.referral_id AND rp.status = 'paid'
          WHERE r.referrer_id = $1
          GROUP BY r.referrer_id
          ON CONFLICT (user_id) DO UPDATE SET
              total_referrals = EXCLUDED.total_referrals,
              level_1_referrals = EXCLUDED.level_1_referrals,
              level_2_referrals = EXCLUDED.level_2_referrals,
              level_3_referrals = EXCLUDED.level_3_referrals,
              total_earned = EXCLUDED.total_earned,
              last_updated = EXCLUDED.last_updated;
      END;
      $$ LANGUAGE plpgsql;
    `);

    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è update_referral_stats —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  fixReferralFunction();
}

module.exports = { fixReferralFunction };
