#!/bin/bash

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AKOOL + ELEVENLABS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞

set -e # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
AKOOL_CLIENT_ID="mrj0kTxsc6LoKCEJX2oyyA=="
AKOOL_CLIENT_SECRET="J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF"
AKOOL_BASE_URL="https://openapi.akool.com/api/open/v3"

ELEVENLABS_API_KEY=""
ELEVENLABS_BASE_URL="https://api.elevenlabs.io/v1"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
AKOOL_ACCESS_TOKEN=""
ELEVENLABS_VOICE_ID=""
AKOOL_TASK_ID=""
TEST_PHOTO_URL=""
TEST_AUDIO_URL=""
TEST_TEXT="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v curl &> /dev/null; then
        error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        error "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
    
    if ! command -v base64 &> /dev/null; then
        error "base64 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ base64 –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞ AKOOL
get_akool_token() {
    log "üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL..."
    local response=$(curl -s --max-time 10 -X POST "${AKOOL_BASE_URL}/getToken" \
        -H "Content-Type: application/json" \
        -d "{\"clientId\": \"${AKOOL_CLIENT_ID}\", \"clientSecret\": \"${AKOOL_CLIENT_SECRET}\"}")

    echo "–û—Ç–≤–µ—Ç getToken: $response"

    local code=$(echo "$response" | jq -r '.code // empty')
    local token=$(echo "$response" | jq -r '.token // empty')

    if [ "$code" = "1000" ] && [ -n "$token" ] && [ "$token" != "null" ]; then
        success "API —Ç–æ–∫–µ–Ω AKOOL –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        AKOOL_ACCESS_TOKEN="$token"
        echo "$AKOOL_ACCESS_TOKEN" > /tmp/akool_token.txt
        log "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/akool_token.txt"
        return 0
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞ AKOOL. –ö–æ–¥: $code"
        echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ElevenLabs API –∫–ª—é—á–∞
check_elevenlabs_key() {
    log "üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API –∫–ª—é—á–∞..."
    
    if [ -z "$ELEVENLABS_API_KEY" ]; then
        warning "ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã ElevenLabs."
        return 1
    fi
    
    local response=$(curl -s --max-time 10 -X GET "${ELEVENLABS_BASE_URL}/voices" \
        -H "xi-api-key: ${ELEVENLABS_API_KEY}")
    
    if echo "$response" | jq -e '.voices' > /dev/null 2>&1; then
        success "ElevenLabs API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω"
        return 0
    else
        error "ElevenLabs API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API"
        echo "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
create_test_audio() {
    log "üéµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π WAV —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é sox (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π
    if command -v sox &> /dev/null; then
        sox -n -r 22050 -c 1 /tmp/test_audio.wav synth 2 sine 440
        success "–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é sox"
    else
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
        cat > /tmp/test_audio.wav << 'EOF'
RIFF....WAVEfmt ........PCM.....
EOF
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ WAV —Ñ–∞–π–ª–∞
        printf "RIFF" > /tmp/test_audio.wav
        printf "\x24\x00\x00\x00" >> /tmp/test_audio.wav  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 8
        printf "WAVE" >> /tmp/test_audio.wav
        printf "fmt " >> /tmp/test_audio.wav
        printf "\x10\x00\x00\x00" >> /tmp/test_audio.wav  # –†–∞–∑–º–µ—Ä fmt chunk
        printf "\x01\x00" >> /tmp/test_audio.wav           # Audio format (PCM)
        printf "\x01\x00" >> /tmp/test_audio.wav           # Number of channels
        printf "\x44\xac\x00\x00" >> /tmp/test_audio.wav   # Sample rate
        printf "\x88\x58\x01\x00" >> /tmp/test_audio.wav   # Byte rate
        printf "\x02\x00" >> /tmp/test_audio.wav           # Block align
        printf "\x10\x00" >> /tmp/test_audio.wav           # Bits per sample
        printf "data" >> /tmp/test_audio.wav
        printf "\x00\x00\x00\x00" >> /tmp/test_audio.wav   # Data size
        
        success "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    fi
    
    TEST_AUDIO_URL="file:///tmp/test_audio.wav"
    log "–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ: $TEST_AUDIO_URL"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
create_test_image() {
    log "üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ImageMagick (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ
    if command -v convert &> /dev/null; then
        convert -size 400x400 xc:lightblue -pointsize 20 -fill black -gravity center -annotate +0+0 "Test Image" /tmp/test_image.jpg
        success "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ImageMagick"
    else
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JPEG —Ñ–∞–π–ª
        printf "\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.' \",#\x1c\x1c(7),01444\x1f'9=82<.342\xff\xc0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\x3f\x00\xaa\xff\xd9" > /tmp/test_image.jpg
        success "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JPEG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    fi
    
    TEST_PHOTO_URL="file:///tmp/test_image.jpg"
    log "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $TEST_PHOTO_URL"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs
clone_voice_elevenlabs() {
    if [ -z "$ELEVENLABS_API_KEY" ]; then
        warning "–ü—Ä–æ–ø—É—Å–∫–∞—é –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ - API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    log "üé§ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs..."
    
    # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    local audio_data=$(base64 -w 0 /tmp/test_audio.wav)
    
    local response=$(curl -s --max-time 30 -X POST "${ELEVENLABS_BASE_URL}/voices/add" \
        -H "xi-api-key: ${ELEVENLABS_API_KEY}" \
        -F "name=TestVoice_$(date +%s)" \
        -F "description=Test voice for integration testing" \
        -F "files=@/tmp/test_audio.wav")
    
    echo "–û—Ç–≤–µ—Ç ElevenLabs voice clone: $response"
    
    local voice_id=$(echo "$response" | jq -r '.voice_id // empty')
    
    if [ -n "$voice_id" ] && [ "$voice_id" != "null" ]; then
        success "–ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. Voice ID: $voice_id"
        ELEVENLABS_VOICE_ID="$voice_id"
        echo "$ELEVENLABS_VOICE_ID" > /tmp/elevenlabs_voice_id.txt
        return 0
    else
        error "–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"
        echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
create_audio_with_voice() {
    if [ -z "$ELEVENLABS_API_KEY" ] || [ -z "$ELEVENLABS_VOICE_ID" ]; then
        warning "–ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ - API –∫–ª—é—á –∏–ª–∏ Voice ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 1
    fi
    
    log "üó£Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º..."
    
    local payload=$(jq -n \
        --arg text "$TEST_TEXT" \
        --arg voice_id "$ELEVENLABS_VOICE_ID" \
        --arg model_id "eleven_multilingual_v2" \
        '{
            text: $text,
            model_id: $model_id,
            voice_settings: {
                stability: 0.5,
                similarity_boost: 0.75,
                style: 0.0,
                use_speaker_boost: true
            }
        }')
    
    local response=$(curl -s --max-time 30 -X POST "${ELEVENLABS_BASE_URL}/text-to-speech/${ELEVENLABS_VOICE_ID}" \
        -H "xi-api-key: ${ELEVENLABS_API_KEY}" \
        -H "Content-Type: application/json" \
        -d "$payload" \
        --output /tmp/generated_audio.mp3)
    
    if [ -f "/tmp/generated_audio.mp3" ] && [ -s "/tmp/generated_audio.mp3" ]; then
        success "–ê—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        TEST_AUDIO_URL="file:///tmp/generated_audio.mp3"
        log "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: $TEST_AUDIO_URL"
        return 0
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ AKOOL (—Å–∏–º—É–ª—è—Ü–∏—è)
upload_files_to_akool() {
    log "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ AKOOL (—Å–∏–º—É–ª—è—Ü–∏—è)..."
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ AKOOL API
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if [ -f "/tmp/test_image.jpg" ]; then
        success "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è AKOOL"
    else
        error "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    if [ -f "/tmp/generated_audio.mp3" ]; then
        success "–ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è AKOOL"
    elif [ -f "/tmp/test_audio.wav" ]; then
        success "–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è AKOOL"
    else
        error "–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo —á–µ—Ä–µ–∑ AKOOL
create_talking_photo_akool() {
    if [ -z "$AKOOL_ACCESS_TOKEN" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω AKOOL"
        return 1
    fi
    
    log "üé≠ –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —á–µ—Ä–µ–∑ AKOOL..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∏ –±—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ URL)
    local talking_photo_url="https://example.com/test_photo.jpg"  # –°–∏–º—É–ª—è—Ü–∏—è
    local audio_url="https://example.com/test_audio.mp3"          # –°–∏–º—É–ª—è—Ü–∏—è
    local webhook_url="https://webhook.site/your-unique-id"
    
    local response=$(curl -s --max-time 30 -X POST "${AKOOL_BASE_URL}/content/video/createbytalkingphoto" \
        -H "Authorization: Bearer ${AKOOL_ACCESS_TOKEN}" \
        -H "Content-Type: application/json" \
        -d "{\"talking_photo_url\": \"${talking_photo_url}\", \"audio_url\": \"${audio_url}\", \"webhookUrl\": \"${webhook_url}\"}")
    
    echo "–û—Ç–≤–µ—Ç AKOOL create talking photo: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    local task_id=$(echo "$response" | jq -r '.data.task_id // empty')
    
    if [ "$code" = "1000" ] && [ -n "$task_id" ] && [ "$task_id" != "null" ]; then
        success "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Talking Photo –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. Task ID: $task_id"
        AKOOL_TASK_ID="$task_id"
        echo "$AKOOL_TASK_ID" > /tmp/akool_task_id.txt
        return 0
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
        echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ AKOOL
check_akool_video_status() {
    if [ -z "$AKOOL_ACCESS_TOKEN" ] || [ -z "$AKOOL_TASK_ID" ]; then
        error "–ù—É–∂–Ω—ã —Ç–æ–∫–µ–Ω AKOOL –∏ Task ID"
        return 1
    fi
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ AKOOL (Task ID: $AKOOL_TASK_ID)..."
    
    local response=$(curl -s --max-time 10 -X GET "${AKOOL_BASE_URL}/content/video/getvideostatus?task_id=${AKOOL_TASK_ID}" \
        -H "Authorization: Bearer ${AKOOL_ACCESS_TOKEN}")
    
    echo "–û—Ç–≤–µ—Ç AKOOL video status: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    local status=$(echo "$response" | jq -r '.data.status // empty')
    local video_url=$(echo "$response" | jq -r '.data.video_url // empty')
    
    if [ "$code" = "1000" ]; then
        success "–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: $status"
        if [ "$status" = "3" ]; then # 3 = completed
            success "–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! URL: $video_url"
        elif [ "$status" = "2" ]; then # 2 = processing
            info "–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
        elif [ "$status" = "4" ]; then # 4 = error
            error "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
        fi
        return 0
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
        echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
test_full_process() {
    log "üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞"
    echo
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ AKOOL
    info "=== –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ AKOOL ==="
    get_akool_token || {
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω AKOOL. –ü—Ä–µ—Ä—ã–≤–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        return 1
    }
    echo
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API
    info "=== –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API ==="
    if check_elevenlabs_key; then
        success "ElevenLabs API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    else
        warning "ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"
    fi
    echo
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    info "=== –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ ==="
    create_test_audio || {
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ"
        return 1
    }
    create_test_image || {
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        return 1
    }
    echo
    
    # –®–∞–≥ 4: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    info "=== –®–ê–ì 4: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ ==="
    if clone_voice_elevenlabs; then
        success "–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
        info "=== –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º ==="
        if create_audio_with_voice; then
            success "–ê—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —Å–æ–∑–¥–∞–Ω–æ"
        else
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ"
        fi
    else
        warning "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ"
    fi
    echo
    
    # –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ AKOOL
    info "=== –®–ê–ì 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è AKOOL ==="
    upload_files_to_akool || {
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è AKOOL"
        return 1
    }
    echo
    
    # –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo
    info "=== –®–ê–ì 7: –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —á–µ—Ä–µ–∑ AKOOL ==="
    if create_talking_photo_akool; then
        success "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Talking Photo –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        
        # –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        info "=== –®–ê–ì 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ ==="
        check_akool_video_status || {
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ"
        }
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Talking Photo"
        return 1
    fi
    echo
    
    success "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    log "üßπ –û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    rm -f /tmp/akool_token.txt
    rm -f /tmp/akool_task_id.txt
    rm -f /tmp/elevenlabs_voice_id.txt
    rm -f /tmp/test_audio.wav
    rm -f /tmp/test_image.jpg
    rm -f /tmp/generated_audio.mp3
    success "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AKOOL + ELEVENLABS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -k, --elevenlabs-key    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ElevenLabs API –∫–ª—é—á"
    echo "  --akool-only            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ AKOOL API"
    echo "  --elevenlabs-only       –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ElevenLabs API"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                                    # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  $0 -k sk-xxx                         # –° ElevenLabs API –∫–ª—é—á–æ–º"
    echo "  $0 --akool-only                      # –¢–æ–ª—å–∫–æ AKOOL"
    echo "  $0 --elevenlabs-only                 # –¢–æ–ª—å–∫–æ ElevenLabs"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
AKOOL_ONLY=false
ELEVENLABS_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -k|--elevenlabs-key)
            ELEVENLABS_API_KEY="$2"
            shift 2
            ;;
        --akool-only)
            AKOOL_ONLY=true
            shift
            ;;
        --elevenlabs-only)
            ELEVENLABS_ONLY=true
            shift
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üé¨ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL + ELEVENLABS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    echo
    
    check_dependencies
    
    if [ "$ELEVENLABS_ONLY" = true ]; then
        info "=== –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ ElevenLabs ==="
        check_elevenlabs_key || exit 1
        create_test_audio || exit 1
        clone_voice_elevenlabs || exit 1
        create_audio_with_voice || exit 1
        success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    elif [ "$AKOOL_ONLY" = true ]; then
        info "=== –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ AKOOL ==="
        get_akool_token || exit 1
        create_test_audio || exit 1
        create_test_image || exit 1
        upload_files_to_akool || exit 1
        create_talking_photo_akool || exit 1
        check_akool_video_status || true
        success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    else
        test_full_process
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
trap cleanup EXIT

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"


