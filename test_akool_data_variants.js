#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */

const crypto = require('crypto');

// –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤ (—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏)
const testData = {
  signature: "9a0403251957a130fad76ea64236e02c3c521e70",
  dataEncrypt: "dOiIGl2CZPmj6UKlO9yzmWPW4Tb+T93rLqKQj6ES7xP7k4H5OhvVugbymXZ0kGW8v+Bfa0oJKI0RlPkC7P7ow8MGfv8ow1idyPVOpDA0ncWuZmgMLazug/Vm1yEHrDhdr77Sz4hk9O0Oezc5VHKB6/Me5xwehJZjyVSCKTe/+2lqV7ezzDhi6LmMy7sCkVwt4rOFvq8Yafi64CnCcZLzpA==",
  timestamp: 1757785623798,
  nonce: "9047"
};

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const clientId = process.env.AKOOL_CLIENT_ID || "mrj0kTxsc6LoKCEJX2oyyA==";
const clientSecret = process.env.AKOOL_CLIENT_SECRET || "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF";

console.log("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
console.log("================================================");
console.log();

// –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ IV
let key = Buffer.from(clientSecret, 'utf8');
let iv = Buffer.from(clientId, 'utf8');

// –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
if (key.length > 24) key = key.slice(0, 24);
if (iv.length > 16) iv = iv.slice(0, 16);

console.log(`–ö–ª—é—á: ${key.toString('hex')} (${key.length} –±–∞–π—Ç)`);
console.log(`IV: ${iv.toString('hex')} (${iv.length} –±–∞–π—Ç)`);
console.log();

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
const dataVariants = [
  {
    name: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Base64)",
    data: testData.dataEncrypt,
    encoding: 'base64'
  },
  {
    name: "–î–∞–Ω–Ω—ã–µ –∫–∞–∫ hex",
    data: Buffer.from(testData.dataEncrypt, 'base64').toString('hex'),
    encoding: 'hex'
  },
  {
    name: "–î–∞–Ω–Ω—ã–µ –∫–∞–∫ binary",
    data: Buffer.from(testData.dataEncrypt, 'base64'),
    encoding: 'binary'
  }
];

console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:");
console.log("==============================================");

for (const variant of dataVariants) {
  console.log(`\n--- ${variant.name} ---`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º decipher
    const decipher = crypto.createDecipheriv('aes-192-cbc', key, iv);
    decipher.setAutoPadding(true);
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
    let decrypted;
    if (variant.encoding === 'binary') {
      decrypted = decipher.update(variant.data);
      decrypted += decipher.final();
      decrypted = decrypted.toString('utf8');
    } else {
      decrypted = decipher.update(variant.data, variant.encoding, 'utf8');
      decrypted += decipher.final('utf8');
    }
    
    console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ: ${decrypted.substring(0, 100)}...`);
    
    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
    try {
      const jsonData = JSON.parse(decrypted);
      console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
      console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
      console.log(`üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: ${variant.name}`);
      break;
    } catch (jsonError) {
      console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π
console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–π:");
console.log("==============================================");

const keyVariants = [
  {
    name: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏",
    key: key,
    iv: iv
  },
  {
    name: "–ö–ª—é—á–∏ –∫–∞–∫ Base64",
    key: Buffer.from(clientSecret, 'base64').slice(0, 24),
    iv: Buffer.from(clientId, 'base64').slice(0, 16)
  },
  {
    name: "–ö–ª—é—á–∏ –∫–∞–∫ hex",
    key: Buffer.from(clientSecret, 'hex').slice(0, 24),
    iv: Buffer.from(clientId, 'hex').slice(0, 16)
  }
];

for (const variant of keyVariants) {
  console.log(`\n--- ${variant.name} ---`);
  
  try {
    console.log(`  –ö–ª—é—á: ${variant.key.toString('hex')} (${variant.key.length} –±–∞–π—Ç)`);
    console.log(`  IV: ${variant.iv.toString('hex')} (${variant.iv.length} –±–∞–π—Ç)`);
    
    // –°–æ–∑–¥–∞–µ–º decipher
    const decipher = crypto.createDecipheriv('aes-192-cbc', variant.key, variant.iv);
    decipher.setAutoPadding(true);
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
    let decrypted = decipher.update(testData.dataEncrypt, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    
    console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ: ${decrypted.substring(0, 100)}...`);
    
    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
    try {
      const jsonData = JSON.parse(decrypted);
      console.log(`‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!`);
      console.log(`üìä JSON: ${JSON.stringify(jsonData, null, 2)}`);
      console.log(`üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: ${variant.name}`);
      break;
    } catch (jsonError) {
      console.log(`‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${jsonError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

console.log("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
