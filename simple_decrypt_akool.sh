#!/bin/bash

# Simple AKOOL Webhook Decryption Script
# –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

echo "üîì Simple AKOOL Webhook Decryption"
echo "=================================="

# –î–∞–Ω–Ω—ã–µ –∏–∑ webhook
DATA_ENCRYPT="VzUJ0xiILQxxcGD1BC3dEBstjHTCfB8oLTi/JKe0DQBMHiYOX8K7utv1c5z3gIh/SFw/10oYoy1b2HDNEiB3ErogTUi1p+LgZm2CLPmd9RL/puYDQ02CaP+e72+2PhI7S5upOSHW3rNz6g9Alfng4903lNGdPDtwF+1m0LHt9yIfuao7cvJL+PXVQWumSUqj/g0H2B1C4GIEEwEJxroYtQ=="
SIGNATURE="fd9af605124f0d2b386bc80fac11ea0420911142"
TIMESTAMP="1757189387922"
NONCE="3243"

echo "üìä Webhook Data:"
echo "  Data Encrypt: $DATA_ENCRYPT"
echo "  Signature: $SIGNATURE"
echo "  Timestamp: $TIMESTAMP"
echo "  Nonce: $NONCE"
echo ""

# –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å Python (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
python3 -c "
import base64
import binascii
import hashlib
import json

data_encrypt = '$DATA_ENCRYPT'
signature = '$SIGNATURE'
timestamp = '$TIMESTAMP'
nonce = '$NONCE'

print('üîç –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏')
print('============================')

# –ú–µ—Ç–æ–¥ 1: Base64 + –ø–æ–∏—Å–∫ JSON
print('\\nüîç –ú–µ—Ç–æ–¥ 1: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ')
try:
    data_bytes = base64.b64decode(data_encrypt)
    print(f'Data length: {len(data_bytes)} bytes')
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    for encoding in ['utf-8', 'latin-1', 'ascii']:
        try:
            result = data_bytes.decode(encoding, errors='ignore')
            print(f'{encoding}: {result[:100]}...')
            
            # –ò—â–µ–º JSON –º–∞—Ä–∫–µ—Ä—ã
            if '{' in result or '[' in result:
                print(f'Found JSON markers in {encoding}')
                try:
                    json_data = json.loads(result)
                    print('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:')
                    print(json.dumps(json_data, indent=2))
                except:
                    pass
        except:
            pass
            
except Exception as e:
    print(f'‚ùå Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}')

# –ú–µ—Ç–æ–¥ 2: XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
print('\\nüîç –ú–µ—Ç–æ–¥ 2: XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞')
try:
    data_bytes = base64.b64decode(data_encrypt)
    
    # –ö–ª—é—á 1: signature
    key1 = bytes.fromhex(signature)
    decrypted1 = bytearray()
    for i in range(len(data_bytes)):
        decrypted1.append(data_bytes[i] ^ key1[i % len(key1)])
    
    result1 = decrypted1.decode('utf-8', errors='ignore')
    print(f'XOR with signature: {result1[:100]}...')
    
    # –ö–ª—é—á 2: nonce
    key2 = bytes.fromhex(nonce)
    decrypted2 = bytearray()
    for i in range(len(data_bytes)):
        decrypted2.append(data_bytes[i] ^ key2[i % len(key2)])
    
    result2 = decrypted2.decode('utf-8', errors='ignore')
    print(f'XOR with nonce: {result2[:100]}...')
    
    # –ö–ª—é—á 3: timestamp (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)
    timestamp_bytes = timestamp.encode()[:16]
    decrypted3 = bytearray()
    for i in range(len(data_bytes)):
        decrypted3.append(data_bytes[i] ^ timestamp_bytes[i % len(timestamp_bytes)])
    
    result3 = decrypted3.decode('utf-8', errors='ignore')
    print(f'XOR with timestamp: {result3[:100]}...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for i, result in enumerate([result1, result2, result3], 1):
        try:
            json_data = json.loads(result)
            print(f'‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ XOR {i} —É—Å–ø–µ—à–µ–Ω:')
            print(json.dumps(json_data, indent=2))
            break
        except:
            pass
            
except Exception as e:
    print(f'‚ùå XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}')

# –ú–µ—Ç–æ–¥ 3: –ê–Ω–∞–ª–∏–∑ hex –¥–∞–Ω–Ω—ã—Ö
print('\\nüîç –ú–µ—Ç–æ–¥ 3: –ê–Ω–∞–ª–∏–∑ hex –¥–∞–Ω–Ω—ã—Ö')
try:
    data_bytes = base64.b64decode(data_encrypt)
    hex_data = data_bytes.hex()
    
    print(f'Hex data: {hex_data[:100]}...')
    
    # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = ['7b', '5b', '22', '766964656f', '737461747573', '7461736b']
    for pattern in patterns:
        if pattern in hex_data:
            print(f'Found pattern {pattern} at position {hex_data.find(pattern)}')
            
except Exception as e:
    print(f'‚ùå –ê–Ω–∞–ª–∏–∑ hex –Ω–µ —É–¥–∞–ª—Å—è: {e}')

# –ú–µ—Ç–æ–¥ 4: –ü–æ–ø—ã—Ç–∫–∞ —Å hash –∫–ª—é—á–∞–º–∏
print('\\nüîç –ú–µ—Ç–æ–¥ 4: Hash –∫–ª—é—á–∏')
try:
    data_bytes = base64.b64decode(data_encrypt)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –∏–∑ hash
    key1 = hashlib.sha256(signature.encode()).digest()
    key2 = hashlib.sha256(nonce.encode()).digest()
    key3 = hashlib.sha256(timestamp.encode()).digest()
    
    for i, key in enumerate([key1, key2, key3], 1):
        decrypted = bytearray()
        for j in range(len(data_bytes)):
            decrypted.append(data_bytes[j] ^ key[j % len(key)])
        
        result = decrypted.decode('utf-8', errors='ignore')
        print(f'Hash key {i}: {result[:100]}...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
        try:
            json_data = json.loads(result)
            print(f'‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ hash key {i} —É—Å–ø–µ—à–µ–Ω:')
            print(json.dumps(json_data, indent=2))
            break
        except:
            pass
            
except Exception as e:
    print(f'‚ùå Hash –∫–ª—é—á–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}')

print('\\nüéØ –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
print('–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Ç AKOOL.')
"
