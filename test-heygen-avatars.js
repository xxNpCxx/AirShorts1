#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ HeyGen
const fetch = require('node-fetch');

async function testHeyGenAvatars() {
  const apiKey = process.env.HEYGEN_API_KEY;
  
  if (!apiKey) {
    console.log('‚ùå HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º HeyGen API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤...');
  console.log(`üîë API Key: ${apiKey.substring(0, 10)}...`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
  const endpoints = [
    'https://api.heygen.com/v1/avatar.list',
    'https://api.heygen.com/v2/avatar.list', 
    'https://api.heygen.com/v1/avatars',
    'https://api.heygen.com/v2/avatars',
    'https://api.heygen.com/avatars'
  ];

  for (const endpoint of endpoints) {
    try {
      console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint}`);
      
      const response = await fetch(endpoint, {
        headers: {
          'X-API-KEY': apiKey,
        },
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:');
        console.log(JSON.stringify(data, null, 2));
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–≤–∞—Ç–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if (data.data?.avatars || data.avatars) {
          const avatars = data.data?.avatars || data.avatars;
          console.log(`\nüé≠ –ù–∞–π–¥–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤: ${avatars.length}`);
          avatars.slice(0, 5).forEach((avatar, index) => {
            console.log(`  ${index + 1}. ${avatar.avatar_id || avatar.id} - ${avatar.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`);
          });
        }
        break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π endpoint, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
  console.log('\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞...');
  
  const createEndpoints = [
    'https://api.heygen.com/v1/avatar.create',
    'https://api.heygen.com/v2/avatar/create',
    'https://api.heygen.com/v1/avatar',
    'https://api.heygen.com/v2/avatar'
  ];

  for (const endpoint of createEndpoints) {
    try {
      console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ: ${endpoint}`);
      
      const formData = new FormData();
      formData.append('avatar_name', 'test_avatar');
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'X-API-KEY': apiKey,
        },
        body: formData,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
        console.log(JSON.stringify(data, null, 2));
        break;
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testHeyGenAvatars().catch(console.error);