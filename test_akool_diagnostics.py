#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–∫–∏ 1015 AKOOL
–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ retry, –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
"""

import os
import sys
import json
import time
import requests
import argparse
from typing import Optional, Dict, Any, List
from pathlib import Path
import tempfile
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('akool_diagnostics.log')
    ]
)
logger = logging.getLogger(__name__)

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    BLUE = '\033[0;34m'
    YELLOW = '\033[1;33m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'  # No Color

class AkoolDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ AKOOL API"""
    
    def __init__(self):
        # AKOOL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.client_id = "mrj0kTxsc6LoKCEJX2oyyA=="
        self.client_secret = "J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF"
        self.base_url = "https://openapi.akool.com/api/open/v3"
        self.access_token = None
        
        # Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_retries = 5
        self.base_delay = 2
        self.max_delay = 30
        self.status_check_attempts = 10
        self.status_delay = 5
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.temp_dir = tempfile.mkdtemp(prefix='akool_diagnostics_')
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_dir}")
    
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        color_map = {
            "INFO": Colors.BLUE,
            "SUCCESS": Colors.GREEN,
            "ERROR": Colors.RED,
            "WARNING": Colors.YELLOW,
            "DEBUG": Colors.CYAN,
            "INFO_SPECIAL": Colors.PURPLE
        }
        color = color_map.get(level, Colors.NC)
        print(f"{color}[{level}]{Colors.NC} {message}")
        logger.info(f"[{level}] {message}")
    
    def get_access_token(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL"""
        self.log("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL...")
        
        try:
            response = requests.post(
                f"{self.base_url}/getToken",
                json={
                    "clientId": self.client_id,
                    "clientSecret": self.client_secret
                },
                timeout=10
            )
            
            self.log(f"–û—Ç–≤–µ—Ç getToken: {response.text}", "DEBUG")
            
            data = response.json()
            if data.get('code') == 1000 and data.get('token'):
                self.access_token = data['token']
                self.log("‚úÖ API —Ç–æ–∫–µ–Ω AKOOL –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ö–æ–¥: {data.get('code')}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}", "ERROR")
            return False
    
    def check_account_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –∏ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.log("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –∏ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        if not self.access_token:
            self.log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω", "ERROR")
            return False
        
        try:
            response = requests.get(
                f"{self.base_url}/user/info",
                headers={"Authorization": f"Bearer {self.access_token}"},
                timeout=10
            )
            
            self.log(f"–û—Ç–≤–µ—Ç user/info: {response.text}", "DEBUG")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('code') == 1000:
                    remaining_quota = data.get('data', {}).get('remaining_quota', 'unknown')
                    total_quota = data.get('data', {}).get('total_quota', 'unknown')
                    
                    self.log(f"–ö–≤–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞: {remaining_quota} / {total_quota}", "INFO")
                    
                    if remaining_quota != 'unknown' and remaining_quota < 1:
                        self.log("‚ö†Ô∏è –ö–≤–æ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞!", "WARNING")
                        return False
                    
                    self.log("‚úÖ –ö–≤–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ", "SUCCESS")
                    return True
                else:
                    self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–æ—Ç—ã. –ö–æ–¥: {data.get('code')}", "WARNING")
                    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            else:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}", "WARNING")
                return True
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç: {e}", "WARNING")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    def validate_request_parameters(self, talking_photo_url: str, audio_url: str, webhook_url: str = None) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞...")
        
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not talking_photo_url:
            errors.append("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        elif not talking_photo_url.startswith(('http://', 'https://')):
            errors.append("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∞—É–¥–∏–æ
        if not audio_url:
            errors.append("URL –∞—É–¥–∏–æ –Ω–µ —É–∫–∞–∑–∞–Ω")
        elif not audio_url.startswith(('http://', 'https://')):
            errors.append("URL –∞—É–¥–∏–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook URL
        if webhook_url and not webhook_url.startswith(('http://', 'https://')):
            errors.append("Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        
        if errors:
            self.log("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", "ERROR")
            for error in errors:
                self.log(f"  - {error}", "ERROR")
            return False
        
        self.log("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã", "SUCCESS")
        return True
    
    def analyze_error_1015(self, code: str, msg: str, full_response: str) -> None:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ 1015"""
        self.log(f"üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ {code}...")
        
        if code == "1015":
            self.log("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 1015:", "WARNING")
            self.log("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ - URL —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã", "WARNING")
            self.log("  2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ - —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω", "WARNING")
            self.log("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç", "WARNING")
            self.log("  4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É AKOOL —Å –ª–æ–≥–∞–º–∏", "WARNING")
            self.log("  5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç/–∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", "WARNING")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            self.create_support_report(code, msg, full_response)
        elif code == "1001":
            self.log("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ CLIENT_ID –∏ CLIENT_SECRET", "ERROR")
        elif code == "2001":
            self.log("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É", "ERROR")
        else:
            self.log(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ {code} - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "WARNING")
    
    def create_support_report(self, code: str, msg: str, full_response: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        report_file = os.path.join(self.temp_dir, f"akool_error_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=== –û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ï AKOOL API ===\n")
            f.write(f"–í—Ä–µ–º—è: {datetime.now()}\n")
            f.write(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {code}\n")
            f.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}\n\n")
            
            f.write("=== –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–†–û–°–ê ===\n")
            f.write(f"Client ID: {self.client_id}\n")
            f.write(f"Base URL: {self.base_url}\n")
            f.write("Endpoint: /content/video/createbytalkingphoto\n\n")
            
            f.write("=== –û–¢–í–ï–¢ API ===\n")
            f.write(f"{full_response}\n\n")
            
            f.write("=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
            f.write(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}\n")
            f.write(f"OS: {os.name}\n")
            f.write(f"Requests –≤–µ—Ä—Å–∏—è: {requests.__version__}\n\n")
            
            f.write("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===\n")
            f.write("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL —Ñ–∞–π–ª–æ–≤\n")
            f.write("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n")
            f.write("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è < 100MB)\n")
            f.write("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n")
            f.write("5. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É AKOOL —Å —ç—Ç–∏–º –æ—Ç—á–µ—Ç–æ–º\n\n")
            
            f.write("=== –ö–û–ù–¢–ê–ö–¢–´ –ü–û–î–î–ï–†–ñ–ö–ò ===\n")
            f.write("Email: support@akool.com\n")
            f.write("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.akool.com/\n")
        
        self.log(f"üìÑ –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω: {report_file}", "INFO")
        self.log("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É AKOOL –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", "INFO")
    
    def create_talking_photo_with_retry(self, talking_photo_url: str, audio_url: str, webhook_url: str = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —Å retry –ª–æ–≥–∏–∫–æ–π"""
        self.log("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —Å retry –ª–æ–≥–∏–∫–æ–π...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.validate_request_parameters(talking_photo_url, audio_url, webhook_url):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç
        if not self.check_account_limits():
            return False
        
        attempt = 1
        delay = self.base_delay
        
        while attempt <= self.max_retries:
            self.log(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries} —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo...")
            
            try:
                payload = {
                    "talking_photo_url": talking_photo_url,
                    "audio_url": audio_url
                }
                
                if webhook_url:
                    payload["webhookUrl"] = webhook_url
                
                response = requests.post(
                    f"{self.base_url}/content/video/createbytalkingphoto",
                    headers={
                        "Authorization": f"Bearer {self.access_token}",
                        "Content-Type": "application/json"
                    },
                    json=payload,
                    timeout=30
                )
                
                self.log(f"–û—Ç–≤–µ—Ç create talking photo (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {response.text}", "DEBUG")
                
                if response.status_code == 200:
                    data = response.json()
                    code = str(data.get('code', ''))
                    task_id = data.get('data', {}).get('task_id')
                    msg = data.get('msg', '')
                    
                    if code == "1000" and task_id:
                        self.log(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Talking Photo –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. Task ID: {task_id}", "SUCCESS")
                        return True
                    elif code == "1015":
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 1015: {msg}", "WARNING")
                        self.log(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...", "WARNING")
                        
                        if attempt < self.max_retries:
                            time.sleep(delay)
                            delay = min(delay * 2, self.max_delay)
                        else:
                            self.analyze_error_1015(code, msg, response.text)
                            return False
                    else:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo. –ö–æ–¥: {code}", "ERROR")
                        self.log(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}", "ERROR")
                        self.analyze_error_1015(code, msg, response.text)
                        return False
                else:
                    self.log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}", "ERROR")
                    return False
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Talking Photo: {e}", "ERROR")
                return False
            
            attempt += 1
        
        self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Talking Photo –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
        return False
    
    def check_video_status_with_retry(self, task_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ —Å retry"""
        self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ —Å retry –ª–æ–≥–∏–∫–æ–π (Task ID: {task_id})...")
        
        if not self.access_token:
            self.log("‚ùå –ù—É–∂–µ–Ω —Ç–æ–∫–µ–Ω AKOOL", "ERROR")
            return False
        
        attempt = 1
        
        while attempt <= self.status_check_attempts:
            self.log(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ {attempt}/{self.status_check_attempts}...")
            
            try:
                response = requests.get(
                    f"{self.base_url}/content/video/getvideostatus?task_id={task_id}",
                    headers={"Authorization": f"Bearer {self.access_token}"},
                    timeout=10
                )
                
                self.log(f"–û—Ç–≤–µ—Ç video status (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {response.text}", "DEBUG")
                
                if response.status_code == 200:
                    data = response.json()
                    code = str(data.get('code', ''))
                    status = str(data.get('data', {}).get('status', ''))
                    video_url = data.get('data', {}).get('video_url', '')
                    
                    if code == "1000":
                        if status == "2":
                            self.log(f"‚è≥ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... (—Å—Ç–∞—Ç—É—Å: {status})", "INFO")
                            if attempt < self.status_check_attempts:
                                time.sleep(self.status_delay)
                        elif status == "3":
                            self.log(f"üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! URL: {video_url}", "SUCCESS")
                            return True
                        elif status == "4":
                            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (—Å—Ç–∞—Ç—É—Å: {status})", "ERROR")
                            return False
                        else:
                            self.log(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}", "WARNING")
                    else:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ. –ö–æ–¥: {code}", "ERROR")
                        msg = data.get('msg', '')
                        if msg:
                            self.log(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}", "ERROR")
                else:
                    self.log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}", "ERROR")
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}", "ERROR")
            
            attempt += 1
        
        self.log("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞", "WARNING")
        return False
    
    def test_different_formats(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        self.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        test_cases = [
            {"photo": "https://example.com/test_photo.jpg", "audio": "https://example.com/test_audio.mp3", "quality": "720p"},
            {"photo": "https://example.com/test_photo.png", "audio": "https://example.com/test_audio.wav", "quality": "1080p"},
            {"photo": "https://example.com/test_photo.jpeg", "audio": "https://example.com/test_audio.m4a", "quality": "480p"},
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            self.log(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {i}: {test_case['quality']} –∫–∞—á–µ—Å—Ç–≤–æ", "INFO")
            self.log(f"–§–æ—Ç–æ: {test_case['photo']}, –ê—É–¥–∏–æ: {test_case['audio']}", "DEBUG")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("üßπ –û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        try:
            import shutil
            shutil.rmtree(self.temp_dir, ignore_errors=True)
            self.log("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã", "SUCCESS")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}", "WARNING")
    
    def run_diagnostics(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AKOOL API —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–∫–∏ 1015", "INFO_SPECIAL")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not self.get_access_token():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω AKOOL. –ü—Ä–µ—Ä—ã–≤–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.", "ERROR")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.test_different_formats()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo —Å retry
        talking_photo_url = "https://example.com/test_photo.jpg"
        audio_url = "https://example.com/test_audio.mp3"
        webhook_url = "https://webhook.site/your-unique-id"
        
        if self.create_talking_photo_with_retry(talking_photo_url, audio_url, webhook_url):
            self.log("‚úÖ Talking Photo —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            return True
        else:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Talking Photo –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ AKOOL API')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--max-retries', type=int, default=5, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
    parser.add_argument('--base-delay', type=int, default=2, help='–ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    diagnostics = AkoolDiagnostics()
    diagnostics.max_retries = args.max_retries
    diagnostics.base_delay = args.base_delay
    
    try:
        success = diagnostics.run_diagnostics()
        if success:
            diagnostics.log("üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
        else:
            diagnostics.log("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏", "ERROR")
            sys.exit(1)
    finally:
        diagnostics.cleanup()

if __name__ == "__main__":
    main()
