/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Upload endpoints HeyGen API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ assets
 */

const { default: fetch } = require('node-fetch');
const FormData = require('form-data');
const fs = require('fs');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const API_KEY = process.env.HEYGEN_API_KEY || 'your-api-key-here';
const BASE_URL = 'https://api.heygen.com';

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å)
const createTestImage = () => {
  // –ü—Ä–æ—Å—Ç–æ–π PNG 1x1 –ø–∏–∫—Å–µ–ª—å –≤ base64
  const pngData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
  return Buffer.from(pngData, 'base64');
};

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ (1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã)
const createTestAudio = () => {
  // WAV —Ñ–∞–π–ª 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
  const wavHeader = Buffer.from([
    0x52, 0x49, 0x46, 0x46, // "RIFF"
    0x24, 0x00, 0x00, 0x00, // File size
    0x57, 0x41, 0x56, 0x45, // "WAVE"
    0x66, 0x6D, 0x74, 0x20, // "fmt "
    0x10, 0x00, 0x00, 0x00, // Format chunk size
    0x01, 0x00, // Audio format (PCM)
    0x01, 0x00, // Number of channels
    0x44, 0xAC, 0x00, 0x00, // Sample rate (44100)
    0x88, 0x58, 0x01, 0x00, // Byte rate
    0x02, 0x00, // Block align
    0x10, 0x00, // Bits per sample
    0x64, 0x61, 0x74, 0x61, // "data"
    0x00, 0x00, 0x00, 0x00  // Data size
  ]);
  return wavHeader;
};

// –í–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const POSSIBLE_ENDPOINTS = [
  // v1 endpoints
  '/v1/upload',
  '/v1/assets',
  '/v1/asset/upload',
  '/v1/file/upload',
  '/v1/media/upload',
  '/v1/image/upload',
  '/v1/audio/upload',
  
  // v2 endpoints
  '/v2/upload',
  '/v2/assets',
  '/v2/asset/upload',
  '/v2/file/upload',
  '/v2/media/upload',
  '/v2/image/upload',
  '/v2/audio/upload',
  
  // –ë–µ–∑ –≤–µ—Ä—Å–∏–∏
  '/upload',
  '/assets',
  '/asset/upload',
  '/file/upload',
  '/media/upload',
  '/image/upload',
  '/audio/upload',
  
  // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  '/api/v1/upload',
  '/api/v2/upload',
  '/api/upload',
  '/upload/asset',
  '/upload/file',
  '/upload/media',
];

// –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint
async function testEndpoint(endpoint, fileBuffer, fileType, fileName) {
  try {
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint}`);
    
    const formData = new FormData();
    formData.append('file', fileBuffer, {
      filename: fileName,
      contentType: fileType
    });
    
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'X-API-KEY': API_KEY,
        ...formData.getHeaders()
      },
      body: formData
    });
    
    console.log(`üì• –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log(`‚úÖ –£–°–ü–ï–•! –û—Ç–≤–µ—Ç:`, JSON.stringify(result, null, 2));
      return { endpoint, success: true, data: result };
    } else {
      const errorText = await response.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 200)}`);
      return { endpoint, success: false, error: errorText };
    }
  } catch (error) {
    console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return { endpoint, success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï HEYGEN UPLOAD API');
  console.log('=====================================');
  console.log(`API Key: ${API_KEY.substring(0, 10)}...`);
  console.log(`Base URL: ${BASE_URL}`);
  console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º ${POSSIBLE_ENDPOINTS.length} endpoints...`);
  
  const testImage = createTestImage();
  const testAudio = createTestAudio();
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  console.log('\nüì∏ –¢–ï–°–¢–ò–†–£–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:');
  for (const endpoint of POSSIBLE_ENDPOINTS) {
    const result = await testEndpoint(endpoint, testImage, 'image/png', 'test.png');
    results.push({ ...result, type: 'image' });
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ
  console.log('\nüéµ –¢–ï–°–¢–ò–†–£–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ê–£–î–ò–û:');
  for (const endpoint of POSSIBLE_ENDPOINTS) {
    const result = await testEndpoint(endpoint, testAudio, 'audio/wav', 'test.wav');
    results.push({ ...result, type: 'audio' });
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log('======================');
  
  const successfulEndpoints = results.filter(r => r.success);
  const failedEndpoints = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulEndpoints.length}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedEndpoints.length}`);
  
  if (successfulEndpoints.length > 0) {
    console.log('\nüéâ –ù–ê–ô–î–ï–ù–´ –†–ê–ë–û–ß–ò–ï ENDPOINTS:');
    successfulEndpoints.forEach(result => {
      console.log(`- ${result.endpoint} (${result.type})`);
      console.log(`  –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(result.data, null, 2)}`);
    });
  } else {
    console.log('\nüòû –†–ê–ë–û–ß–ò–ï ENDPOINTS –ù–ï –ù–ê–ô–î–ï–ù–´');
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- API Key –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π');
    console.log('- Upload API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞');
    console.log('- Endpoints –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ API');
    console.log('- –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  fs.writeFileSync('heygen-upload-test-results.json', JSON.stringify(results, null, 2));
  console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ heygen-upload-test-results.json');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().catch(console.error);
