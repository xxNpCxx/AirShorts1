#!/bin/bash

# –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AKOOL API
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ curl –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# AKOOL API credentials
CLIENT_ID="mrj0kTxsc6LoKCEJX2oyyA=="
CLIENT_SECRET="J6QZyb+g0ucATnJa7MSG9QRm9FfVDsMF"
BASE_URL="https://openapi.akool.com/api/open/v3"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞
test_get_token() {
    log "–¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ AKOOL..."
    
    local response=$(curl -s --max-time 10 -X POST "$BASE_URL/getToken" \
        -H "Content-Type: application/json" \
        -d "{
            \"clientId\": \"$CLIENT_ID\",
            \"clientSecret\": \"$CLIENT_SECRET\"
        }")
    
    echo "–û—Ç–≤–µ—Ç getToken: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    local token=$(echo "$response" | jq -r '.token // empty')
    
    if [ "$code" = "1000" ] && [ -n "$token" ]; then
        success "API —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        echo "$token" > /tmp/akool_token.txt
        log "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/akool_token.txt"
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
        return 1
    fi
}

# –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
test_list_videos() {
    log "–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ..."
    
    if [ ! -f "/tmp/akool_token.txt" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
        return 1
    fi
    
    local token=$(cat /tmp/akool_token.txt)
    
    local response=$(curl -s --max-time 10 -X GET "$BASE_URL/content/video/list" \
        -H "Authorization: Bearer $token")
    
    echo "–û—Ç–≤–µ—Ç list videos: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    
    if [ "$code" = "1000" ]; then
        success "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        local count=$(echo "$response" | jq -r '.data.count // 0')
        log "–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: $count"
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
    fi
}

# –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo (—Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ URL)
test_create_talking_photo() {
    log "–¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ Talking Photo..."
    
    if [ ! -f "/tmp/akool_token.txt" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
        return 1
    fi
    
    local token=$(cat /tmp/akool_token.txt)
    local task_id="test_$(date +%s)"
    
    local response=$(curl -s --max-time 10 -X POST "$BASE_URL/content/video/createbytalkingphoto" \
        -H "Authorization: Bearer $token" \
        -H "Content-Type: application/json" \
        -d "{
            \"talking_photo_url\": \"https://example.com/test_photo.jpg\",
            \"audio_url\": \"https://example.com/test_audio.mp3\",
            \"webhookUrl\": \"https://webhook.site/unique-id\"
        }")
    
    echo "–û—Ç–≤–µ—Ç create talking photo: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    
    if [ "$code" = "1000" ]; then
        success "Talking Photo —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        local task_id=$(echo "$response" | jq -r '.data.task_id // empty')
        if [ -n "$task_id" ]; then
            log "Task ID: $task_id"
            echo "$task_id" > /tmp/akool_task_id.txt
        fi
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Talking Photo. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
    fi
}

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ
test_video_status() {
    log "–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ..."
    
    if [ ! -f "/tmp/akool_token.txt" ] || [ ! -f "/tmp/akool_task_id.txt" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
        return 1
    fi
    
    local token=$(cat /tmp/akool_token.txt)
    local task_id=$(cat /tmp/akool_task_id.txt)
    
    local response=$(curl -s --max-time 10 -X GET "$BASE_URL/content/video/status/$task_id" \
        -H "Authorization: Bearer $token")
    
    echo "–û—Ç–≤–µ—Ç video status: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    
    if [ "$code" = "1000" ]; then
        success "–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        local status=$(echo "$response" | jq -r '.data.video_status // empty')
        log "–°—Ç–∞—Ç—É—Å: $status (1: –≤ –æ—á–µ—Ä–µ–¥–∏, 2: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, 3: –∑–∞–≤–µ—Ä—à–µ–Ω–æ, 4: –æ—à–∏–±–∫–∞)"
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
    fi
}

# –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
test_account_info() {
    log "–¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ..."
    
    if [ ! -f "/tmp/akool_token.txt" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
        return 1
    fi
    
    local token=$(cat /tmp/akool_token.txt)
    
    local response=$(curl -s --max-time 10 -X GET "$BASE_URL/user/info" \
        -H "Authorization: Bearer $token")
    
    echo "–û—Ç–≤–µ—Ç account info: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    
    if [ "$code" = "1000" ]; then
        success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        local email=$(echo "$response" | jq -r '.data.email // empty')
        local name=$(echo "$response" | jq -r '.data.firstName // empty')
        log "Email: $email, Name: $name"
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
    fi
}

# –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
test_available_tools() {
    log "–¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
    
    if [ ! -f "/tmp/akool_token.txt" ]; then
        error "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
        return 1
    fi
    
    local token=$(cat /tmp/akool_token.txt)
    
    local response=$(curl -s --max-time 10 -X GET "$BASE_URL/tools/list" \
        -H "Authorization: Bearer $token")
    
    echo "–û—Ç–≤–µ—Ç tools list: $response"
    
    local code=$(echo "$response" | jq -r '.code // empty')
    
    if [ "$code" = "1000" ]; then
        success "–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        local count=$(echo "$response" | jq -r '.data | length // 0')
        log "–î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: $count"
    else
        error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ö–æ–¥: $code"
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ: $(echo "$response" | jq -r '.msg // empty')"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    log "–û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    rm -f /tmp/akool_*.txt
    success "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL API"
    echo
    
    test_get_token
    echo
    
    test_list_videos
    echo
    
    test_create_talking_photo
    echo
    
    test_video_status
    echo
    
    test_account_info
    echo
    
    test_available_tools
    echo
    
    success "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AKOOL API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    
    cleanup
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
trap cleanup EXIT

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
