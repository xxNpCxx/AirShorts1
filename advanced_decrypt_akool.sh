#!/bin/bash

# Advanced AKOOL Webhook Decryption Script
# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏

echo "üîì Advanced AKOOL Webhook Decryption"
echo "===================================="

# –î–∞–Ω–Ω—ã–µ –∏–∑ webhook
DATA_ENCRYPT="VzUJ0xiILQxxcGD1BC3dEBstjHTCfB8oLTi/JKe0DQBMHiYOX8K7utv1c5z3gIh/SFw/10oYoy1b2HDNEiB3ErogTUi1p+LgZm2CLPmd9RL/puYDQ02CaP+e72+2PhI7S5upOSHW3rNz6g9Alfng4903lNGdPDtwF+1m0LHt9yIfuao7cvJL+PXVQWumSUqj/g0H2B1C4GIEEwEJxroYtQ=="
SIGNATURE="fd9af605124f0d2b386bc80fac11ea0420911142"
TIMESTAMP="1757189387922"
NONCE="3243"

echo "üìä Webhook Data:"
echo "  Data Encrypt: $DATA_ENCRYPT"
echo "  Signature: $SIGNATURE"
echo "  Timestamp: $TIMESTAMP"
echo "  Nonce: $NONCE"
echo ""

# –£—Å—Ç–∞–Ω–æ–≤–∏–º cryptography –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
python3 -c "import cryptography" 2>/dev/null || {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography..."
    pip3 install cryptography
}

echo ""

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å Python
python3 -c "
import base64
import binascii
import hashlib
import hmac
import json
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend

data_encrypt = '$DATA_ENCRYPT'
signature = '$SIGNATURE'
timestamp = '$TIMESTAMP'
nonce = '$NONCE'

print('üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏')
print('================================')

# –ú–µ—Ç–æ–¥ 1: HMAC —Å timestamp
print('\\nüîç –ú–µ—Ç–æ–¥ 1: HMAC —Å timestamp')
try:
    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ timestamp
    key = hashlib.sha256(timestamp.encode()).digest()
    print(f'Key from timestamp: {key.hex()}')
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data_bytes = base64.b64decode(data_encrypt)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º HMAC —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    hmac_obj = hmac.new(key, data_bytes, hashlib.sha256)
    print(f'HMAC: {hmac_obj.hexdigest()}')
    
except Exception as e:
    print(f'‚ùå HMAC –º–µ—Ç–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {e}')

# –ú–µ—Ç–æ–¥ 2: PBKDF2 —Å nonce
print('\\nüîç –ú–µ—Ç–æ–¥ 2: PBKDF2 —Å nonce')
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nonce –∫–∞–∫ salt
    salt = bytes.fromhex(nonce)
    password = signature.encode()
    
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(password)
    print(f'PBKDF2 key: {key.hex()}')
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data_bytes = base64.b64decode(data_encrypt)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º AES —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    iv = data_bytes[:16]
    ciphertext = data_bytes[16:]
    
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(ciphertext) + decryptor.finalize()
    
    result = decrypted.decode('utf-8', errors='ignore')
    print(f'PBKDF2 Result: {result}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
    try:
        json_data = json.loads(result)
        print('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ PBKDF2 —É—Å–ø–µ—à–µ–Ω:')
        print(json.dumps(json_data, indent=2))
    except:
        print('‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ PBKDF2 –Ω–µ —É–¥–∞–ª—Å—è')
        
except Exception as e:
    print(f'‚ùå PBKDF2 –º–µ—Ç–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {e}')

# –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Å—Ç–æ–π XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
print('\\nüîç –ú–µ—Ç–æ–¥ 3: XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏')
try:
    data_bytes = base64.b64decode(data_encrypt)
    
    # –ö–ª—é—á 1: signature
    key1 = bytes.fromhex(signature)
    decrypted1 = bytearray()
    for i in range(len(data_bytes)):
        decrypted1.append(data_bytes[i] ^ key1[i % len(key1)])
    
    result1 = decrypted1.decode('utf-8', errors='ignore')
    print(f'XOR with signature: {result1[:100]}...')
    
    # –ö–ª—é—á 2: nonce –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã–π
    key2 = (nonce * (len(data_bytes) // len(nonce) + 1))[:len(data_bytes)]
    key2_bytes = key2.encode()
    decrypted2 = bytearray()
    for i in range(len(data_bytes)):
        decrypted2.append(data_bytes[i] ^ key2_bytes[i % len(key2_bytes)])
    
    result2 = decrypted2.decode('utf-8', errors='ignore')
    print(f'XOR with nonce: {result2[:100]}...')
    
    # –ö–ª—é—á 3: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è signature + nonce
    combined_key = signature + nonce
    key3 = (combined_key * (len(data_bytes) // len(combined_key) + 1))[:len(data_bytes)]
    key3_bytes = key3.encode()
    decrypted3 = bytearray()
    for i in range(len(data_bytes)):
        decrypted3.append(data_bytes[i] ^ key3_bytes[i % len(key3_bytes)])
    
    result3 = decrypted3.decode('utf-8', errors='ignore')
    print(f'XOR with combined: {result3[:100]}...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for i, result in enumerate([result1, result2, result3], 1):
        try:
            json_data = json.loads(result)
            print(f'‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ XOR {i} —É—Å–ø–µ—à–µ–Ω:')
            print(json.dumps(json_data, indent=2))
            break
        except:
            pass
            
except Exception as e:
    print(f'‚ùå XOR –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}')

# –ú–µ—Ç–æ–¥ 4: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
print('\\nüîç –ú–µ—Ç–æ–¥ 4: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤')
try:
    data_bytes = base64.b64decode(data_encrypt)
    
    # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    print(f'Data length: {len(data_bytes)} bytes')
    print(f'First 20 bytes: {data_bytes[:20].hex()}')
    print(f'Last 20 bytes: {data_bytes[-20:].hex()}')
    
    # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON –º–∞—Ä–∫–µ—Ä—ã
    json_markers = [b'{', b'[', b'"', b'video', b'status', b'task']
    for marker in json_markers:
        if marker in data_bytes:
            print(f'Found marker {marker}: {data_bytes.find(marker)}')
            
except Exception as e:
    print(f'‚ùå –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è: {e}')

print('\\nüéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
"
